================================================================
REPOPACK OUTPUT FILE
================================================================

This file was generated by Repopack on: 2024-10-03T12:47:15.930Z

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This header section
2. Multiple file entries, each consisting of:
   a. A separator line (================)
   b. The file path (File: path/to/file)
   c. Another separator line
   d. The full contents of the file
   e. A blank line

Usage Guidelines:
-----------------
1. This file should be treated as read-only. Any changes should be made to the
   original repository files, not this packed version.
2. When processing this file, use the separators and "File:" markers to
   distinguish between different files in the repository.
3. Be aware that this file may contain sensitive information. Handle it with
   the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation.
- Code comments have been removed.


For more information about Repopack, visit: https://github.com/yamadashy/repopack

Additional User-Provided Header:
--------------------------------
Transmissions repo

================================================================
Repository Files
================================================================

================
File: applications/dirwalker-test/about.md
================
it originally ran from

transmission.execute('../../data/mail-archive-sample')

================
File: applications/dirwalker-test/processors-config.ttl
================
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix trm: <http://purl.org/stuff/transmission/> .
# @prefix fs: <http://purl.org/stuff/filesystem/> .
@prefix t: <http://hyperdata.it/transmissions/> . # for custom terms & instances

t:FilePipelineMap a trm:DataMap ;
    trm:sourceFile "input.txt" ;
    trm:destinationFile "output.txt" .

================
File: applications/dirwalker-test/transmissions.ttl
================
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix trm: <http://purl.org/stuff/transmission/> .
@prefix : <http://hyperdata.it/transmissions/> . # for custom terms & instances

#############################################################
# insert into pipe for debugging
:DE a :DeadEnd . # ends the current pipe quietly
:H  a :Halt . # kills everything 
:SM a :ShowMessage . # verbose report, continues pipe
:N  a :NOP . # no operation (except for showing stage in pipe)
:UF a :Unfork . # collapses all pipes but one 
#############################################################

:dirwalkpipe a trm:Pipeline ;
    trm:pipe (:s1 :s2 :s3) .

:s1 a :DirWalker .
:s2 a :AppendProcess .
:s3 a :StringSink .

================
File: applications/env-loader-test/about.md
================
```sh
cd ~/github-danny/transmissions
./trans env-loader-test
```

================
File: applications/env-loader-test/processors-config.ttl
================
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix trm: <http://purl.org/stuff/transmission/> .
# @prefix fs: <http://purl.org/stuff/filesystem/> .
@prefix t: <http://hyperdata.it/transmissions/> . # for custom terms & instances

t:walkPrep a trm:ReMap ;
    trm:rename (t:pp1 t:pp2) . # consider using blank nodes
    t:pp1   trm:pre     "content" ;
            trm:post    "template"  .
    t:pp2   trm:pre     "entryContentMeta.sourceDir" ;
            trm:post    "sourceDir" .

================
File: applications/env-loader-test/transmissions.ttl
================
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix trm: <http://purl.org/stuff/transmission/> .
@prefix : <http://hyperdata.it/transmissions/> . # for custom terms & instances

#############################################################
# insert into pipe for debugging
:DE a :DeadEnd . # ends the current pipe quietly
:H  a :Halt . # kills everything 
:SC a :ShowConfig . # verbose report, continues pipe
:SM a :ShowMessage . # verbose report, continues pipe
:N  a :NOP . # no operation (except for showing stage in pipe)
:UF a :Unfork . # collapses all pipes but one 
#############################################################

:envy a trm:Pipeline ;
    trm:pipe (:s10 :s20 :SM) .
# trm:pipe (:SC) .
:s10 a :EnvLoader .
:s20 a :WhiteboardToMessage .

================
File: applications/file-copy-remove-test/about.md
================
# file-copy-remove-test

run with :

```
# in transmissions dir

./run file-copy-remove-test
```

or

```
npm test -- tests/integration/file-copy-remove-test.spec.js
```

this should :

- copy `start/one.txt` into `single-empty/`
- copy `single-empty/one.txt` into `single-full/`
- remove `single-empty/one.txt`

- copy everything in `start/` into `several-empty/`
- copy everything in `several-empty/` into `several-full/`
- remove everything in `several-empty/`

Hmm, test services would be helpful to check before and after - or maybe just use regular test runner script from npm?

================
File: applications/file-copy-remove-test/data/several-full/one.txt
================
Hello from One

================
File: applications/file-copy-remove-test/data/several-full/two.txt
================
Hello from Two

================
File: applications/file-copy-remove-test/data/single-full/one.txt
================
Hello from One

================
File: applications/file-copy-remove-test/data/start/one.txt
================
Hello from One

================
File: applications/file-copy-remove-test/data/start/two.txt
================
Hello from Two

================
File: applications/file-copy-remove-test/init.sh
================

rm -rf data/start
rm -rf data/single-empty
rm -rf data/single-full
rm -rf data/several-empty
rm -rf data/several-full
mkdir -p data/start
echo 'Hello from One' > data/start/one.txt
echo 'Hello from Two' > data/start/two.txt
tree data

================
File: applications/file-copy-remove-test/processors-config.ttl
================
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix trm: <http://purl.org/stuff/transmission/> .
@prefix t: <http://hyperdata.it/transmissions/> .

#t:copyOneToSingleEmpty a trm:ServiceConfig ;
 #   trm:key t:copyOneToSingleEmpty ;
  #  trm:source "data/start/one.txt" ;
   # trm:destination "data/single-empty/one.txt" .

t:copyOneToSingleEmpty a trm:ServiceConfig ;
    trm:key t:copyOneToSingleEmpty ;
    trm:source "data/start/one.txt" ;
    trm:destination "data/single-empty/one.txt" .

t:copySingleEmptyToSingleFull a trm:ServiceConfig ;
    trm:key t:copySingleEmptyToSingleFull ;
    trm:source "data/single-empty/one.txt" ;
    trm:destination "data/single-full/one.txt" .

t:removeSingleEmpty a trm:ServiceConfig ;
    trm:key t:removeSingleEmpty ;
    trm:target "data/single-empty/one.txt" .

t:copyStartToSeveralEmpty a trm:ServiceConfig ;
    trm:key t:copyStartToSeveralEmpty ;
    trm:source "data/start" ;
    trm:destination "data/several-empty" .

t:copySeveralEmptyToSeveralFull a trm:ServiceConfig ;
    trm:key t:copySeveralEmptyToSeveralFull ;
    trm:source "data/several-empty" ;
    trm:destination "data/several-full" .

t:removeSeveralEmpty a trm:ServiceConfig ;
    trm:key t:removeSeveralEmpty ;
    trm:target "data/several-empty" .

================
File: applications/file-copy-remove-test/transmissions.ttl
================
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix trm: <http://purl.org/stuff/transmission/> .
@prefix : <http://hyperdata.it/transmissions/> .

#############################################################
# insert into pipe for debugging
:DE a :DeadEnd . # ends the current pipe quietly
:H  a :Halt . # kills everything 
:SM a :ShowMessage . # verbose report, continues pipe
:N  a :NOP . # no operation (except for showing stage in pipe)
:UF a :Unfork . # collapses all pipes but one 
#############################################################

:file_copy_remove_test a trm:Pipeline ;
    trm:pipe (:s1 :s2 :s3 :s4 :s5 :s6) .

:s1 a :FileCopy ;
    trm:configKey :copyOneToSingleEmpty .

:s2 a :FileCopy ;
    trm:configKey :copySingleEmptyToSingleFull .

:s3 a :FileRemove ;
    trm:configKey :removeSingleEmpty .

:s4 a :FileCopy ;
    trm:configKey :copyStartToSeveralEmpty .

:s5 a :FileCopy ;
    trm:configKey :copySeveralEmptyToSeveralFull .

:s6 a :FileRemove ;
    trm:configKey :removeSeveralEmpty .

================
File: applications/file-pipeline/data/input.txt
================
Hello

================
File: applications/file-pipeline/data/output.txt
================
Hello world world

================
File: applications/file-pipeline/processors-config.ttl
================
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix trm: <http://purl.org/stuff/transmission/> .
# @prefix fs: <http://purl.org/stuff/filesystem/> .
@prefix t: <http://hyperdata.it/transmissions/> . # for custom terms & instances

t:FilePipelineMap a trm:DataMap ;
    trm:sourceFile "input.txt" ;
    trm:destinationFile "output.txt" .

================
File: applications/file-pipeline/transmissions.ttl
================
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix trm: <http://purl.org/stuff/transmission/> .
@prefix : <http://hyperdata.it/transmissions/> . # for custom terms & instances

:file_pipeline a trm:Pipeline ;
    trm:pipe (:s1 :s2 :s3 :s4) .

:s1 a :FileSource .
:s2 a :AppendProcess .
:s3 a :AppendProcess .
:s4 a :FileSink .

================
File: applications/globbo/about.md
================
# Globbo

```
./run globbo -c '{"rootDir": "./", "sourceDir":"docs"}'
```

there are more notes under

/home/danny/github-danny/transmissions/docs/postcraft-site/articles/new-application-walkthrough.md

/home/danny/github-danny/transmissions/docs/postcraft-site/articles/new-service-walkthrough.md

## Description

- Goal : a tool to recursively read local filesystem directories, checking for files with the `.md` extension to identify collections of such
- Goal : documentation of the app creation process
- Implementation : a #Transmissions application
- SoftGoal : reusability
- _non-goal_ - efficiency

================
File: applications/globbo/processors-config.ttl
================
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix trm: <http://purl.org/stuff/transmission/> .
# @prefix fs: <http://purl.org/stuff/filesystem/> .
@prefix t: <http://hyperdata.it/transmissions/> . # for custom terms & instances

t:walkPrep a trm:ReMap ;
    trm:rename (t:pp1 t:pp2) . # consider using blank nodes
    t:pp1   trm:pre     "content" ;
            trm:post    "template"  .
    t:pp2   trm:pre     "entryContentMeta.sourceDir" ;
            trm:post    "sourceDir" .

================
File: applications/globbo/transmissions.ttl
================
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix trm: <http://purl.org/stuff/transmission/> .
@prefix : <http://hyperdata.it/transmissions/> . # for custom terms & instances

#############################################################
# insert into pipe for debugging
:DE a :DeadEnd . # ends the current pipe quietly
:H  a :Halt . # kills everything 
:SC a :ShowConfig . # verbose report, continues pipe
:SM a :ShowMessage . # verbose report, continues pipe
:N  a :NOP . # no operation (except for showing stage in pipe)
:UF a :Unfork . # collapses all pipes but one 
#############################################################

:globbo a trm:Pipeline ;
    trm:pipe (:s10 :s20 :s30 :s40 :SM) .

#:s40 a :RemapContext ;
 #   trm:configKey :walkPrep .

:s10 a :DirWalker .
:s20 a :CaptureAll . # pushes all messages into config.whiteboard
:s30 a :Unfork .
:s40 a :WhiteboardToMessage .

================
File: applications/html-to-md/about.md
================
# HTML to Markdown

*a minimal application (that I need) which can also serve as an example in documentation*

```
./run html-to-md -c '{"rootDir": "./test-data/html-to-md", "filename":"webidl.html"}'
```

## Description

---

there are more notes under

/home/danny/github-danny/transmissions/docs/postcraft-site/articles/new-application-walkthrough.md

/home/danny/github-danny/transmissions/docs/postcraft-site/articles/new-service-walkthrough.md

## Description

- Goal : a tool to recursively read local filesystem directories, checking for files with the `.md` extension to identify collections of such
- Goal : documentation of the app creation process
- Implementation : a #Transmissions application
- SoftGoal : reusability
- _non-goal_ - efficiency

================
File: applications/html-to-md/processors-config.ttl
================
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix trm: <http://purl.org/stuff/transmission/> .
# @prefix fs: <http://purl.org/stuff/filesystem/> .
@prefix t: <http://hyperdata.it/transmissions/> . # for custom terms & instances

t:walkPrep a trm:ReMap ;
    trm:rename (t:pp1 t:pp2) . # consider using blank nodes
    t:pp1   trm:pre     "content" ;
            trm:post    "template"  .
    t:pp2   trm:pre     "entryContentMeta.sourceDir" ;
            trm:post    "sourceDir" .

================
File: applications/html-to-md/transmissions.ttl
================
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix trm: <http://purl.org/stuff/transmission/> .
@prefix : <http://hyperdata.it/transmissions/> . # for custom terms & instances

#############################################################
# insert into pipe for debugging
:DE a :DeadEnd . # ends the current pipe quietly
:H  a :Halt . # kills everything 
:SC a :ShowConfig . # verbose report, continues pipe
:SM a :ShowMessage . # verbose report, continues pipe
:N  a :NOP . # no operation (except for showing stage in pipe)
:UF a :Unfork . # collapses all pipes but one 
#############################################################

:h2m a trm:Pipeline ;
    trm:pipe (:s10 :s20 :s30 :s40 :SM) .

#:s40 a :RemapContext ;
 #   trm:configKey :walkPrep .

:s10 a :FileReader .
:s20 a :CaptureAll . # pushes all messages into config.whiteboard
:s30 a :Unfork .
:s40 a :WhiteboardToMessage .

================
File: applications/link-lister/about.md
================
run.js had

const here = import.meta.url
const message = { runScript: here }

transmission.execute('', message)

================
File: applications/link-lister/data/links.html
================
<p><a href="https://en.wikipedia.org/wiki/Main_Page">Main page</a>
<a href="https://en.wikipedia.org/wiki/Wikipedia:Contents">Contents</a>
<a href="https://en.wikipedia.org/wiki/Portal:Current_events">Current events</a>
<a href="https://en.wikipedia.org/wiki/Special:Random">Random article</a>
<a href="https://en.wikipedia.org/wiki/Wikipedia:About">About Wikipedia</a>
<a href="https://en.wikipedia.org/wiki/Wikipedia:Contact_us">Contact us</a>
<a href="https://donate.wikimedia.org/wiki/Special:FundraiserRedirector?utm_source=donate&utm_medium=sidebar&utm_campaign=C13_en.wikipedia.org&uselang=en">Donate</a>
<a href="https://en.wikipedia.org/wiki/Help:Contents">Help</a>
<a href="https://en.wikipedia.org/wiki/Help:Introduction">Learn to edit</a>
<a href="https://en.wikipedia.org/wiki/Wikipedia:Community_portal">Community portal</a>
<a href="https://en.wikipedia.org/wiki/Special:RecentChanges">Recent changes</a>
<a href="https://en.wikipedia.org/wiki/Wikipedia:File_upload_wizard">Upload file</a>
[</p>
<p>](<a href="https://en.wikipedia.org/wiki/Main_Page">https://en.wikipedia.org/wiki/Main_Page</a>)
[</p>
<p>Search
    ](<a href="https://en.wikipedia.org/wiki/Special:Search">https://en.wikipedia.org/wiki/Special:Search</a>)
<a href="https://en.wikipedia.org/w/index.php?title=Special:CreateAccount&returnto=FOAF">Create account</a>
<a href="https://en.wikipedia.org/w/index.php?title=Special:UserLogin&returnto=FOAF">Log in</a>
<a href="https://en.wikipedia.org/w/index.php?title=Special:CreateAccount&returnto=FOAF"> Create account</a>
<a href="https://en.wikipedia.org/w/index.php?title=Special:UserLogin&returnto=FOAF"> Log in</a>
<a href="https://en.wikipedia.org/wiki/Help:Introduction">learn more</a>
<a href="https://en.wikipedia.org/wiki/Special:MyContributions">Contributions</a>
<a href="https://en.wikipedia.org/wiki/Special:MyTalk">Talk</a></p>
<h2>Contents</h2>
<h1>FOAF</h1>
<p><a href="https://ca.wikipedia.org/wiki/FOAF">Català</a>
<a href="https://de.wikipedia.org/wiki/FOAF">Deutsch</a>
<a href="https://es.wikipedia.org/wiki/FOAF">Español</a>
<a href="https://fa.wikipedia.org/wiki/%D8%A7%D9%81%E2%80%8C%D8%A7%D9%88%D8%A7%DB%8C%E2%80%8C%D8%A7%D9%81_(%D9%87%D8%B3%D8%AA%DB%8C%E2%80%8C%D8%B4%D9%86%D8%A7%D8%B3%DB%8C)">فارسی</a>
<a href="https://fr.wikipedia.org/wiki/FOAF">Français</a>
<a href="https://it.wikipedia.org/wiki/FOAF">Italiano</a>
<a href="https://lv.wikipedia.org/wiki/FOAF">Latviešu</a>
<a href="https://nl.wikipedia.org/wiki/FOAF">Nederlands</a>
<a href="https://ja.wikipedia.org/wiki/Friend_of_a_Friend">日本語</a>
<a href="https://no.wikipedia.org/wiki/FOAF">Norsk bokmål</a>
<a href="https://pl.wikipedia.org/wiki/FOAF_(format)">Polski</a>
<a href="https://pt.wikipedia.org/wiki/FOAF">Português</a>
<a href="https://ru.wikipedia.org/wiki/FOAF">Русский</a>
<a href="https://uk.wikipedia.org/wiki/FOAF">Українська</a>
<a href="https://www.wikidata.org/wiki/Special:EntityPage/Q1389366#sitelinks-wikipedia">Edit links</a>
<a href="https://en.wikipedia.org/wiki/FOAF">Article</a>
<a href="https://en.wikipedia.org/wiki/Talk:FOAF">Talk</a>
<a href="https://en.wikipedia.org/wiki/FOAF">Read</a>
<a href="https://en.wikipedia.org/w/index.php?title=FOAF&action=edit">Edit</a>
<a href="https://en.wikipedia.org/w/index.php?title=FOAF&action=history">View history</a>
<a href="https://en.wikipedia.org/wiki/FOAF">Read</a>
<a href="https://en.wikipedia.org/w/index.php?title=FOAF&action=edit">Edit</a>
<a href="https://en.wikipedia.org/w/index.php?title=FOAF&action=history">View history</a>
<a href="https://en.wikipedia.org/wiki/Special:WhatLinksHere/FOAF">What links here</a>
<a href="https://en.wikipedia.org/wiki/Special:RecentChangesLinked/FOAF">Related changes</a>
<a href="https://en.wikipedia.org/wiki/Wikipedia:File_Upload_Wizard">Upload file</a>
<a href="https://en.wikipedia.org/wiki/Special:SpecialPages">Special pages</a>
<a href="https://en.wikipedia.org/w/index.php?title=FOAF&oldid=1165941964">Permanent link</a>
<a href="https://en.wikipedia.org/w/index.php?title=FOAF&action=info">Page information</a>
<a href="https://en.wikipedia.org/w/index.php?title=Special:CiteThisPage&page=FOAF&id=1165941964&wpFormIdentifier=titleform">Cite this page</a>
<a href="https://en.wikipedia.org/w/index.php?title=Special:UrlShortener&url=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FFOAF">Get shortened URL</a>
<a href="https://en.wikipedia.org/w/index.php?title=Special:QrCode&url=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FFOAF">Download QR code</a>
<a href="https://www.wikidata.org/wiki/Special:EntityPage/Q1389366">Wikidata item</a>
<a href="https://en.wikipedia.org/w/index.php?title=Special:DownloadAsPdf&page=FOAF&action=show-download-screen">Download as PDF</a>
<a href="https://en.wikipedia.org/w/index.php?title=FOAF&printable=yes">Printable version</a>
<a href="https://commons.wikimedia.org/wiki/Category:FOAF">Wikimedia Commons</a>
<a href="https://en.wikipedia.org/wiki/Friend_of_a_friend">friend of a friend</a>
<a href="https://en.wikipedia.org/wiki/Friend_of_a_Friend_(disambiguation)">Friend of a Friend (disambiguation)</a>
<a href="https://en.wikipedia.org/wiki/File:FoafLogo.svg"></a>
<a href="https://en.wikipedia.org/wiki/Resource_Description_Framework">RDF</a>
<a href="https://en.wikipedia.org/wiki/Web_Ontology_Language">OWL</a>
<a href="https://en.wikipedia.org/wiki/Semantic_Web">Semantic Web</a>
<a href="https://en.wikipedia.org/wiki/Creative_Commons_license">CC BY 1.0</a>
<a href="http://xmlns.com/foaf/spec/">xmlns.com/foaf/spec/</a>
<a href="https://en.wikipedia.org/wiki/Friend_of_a_friend">friend of a friend</a>
<a href="https://en.wikipedia.org/wiki/Machine-readable_data">machine-readable</a>
<a href="https://en.wikipedia.org/wiki/Ontology_(information_science)">ontology</a>
<a href="https://en.wikipedia.org/wiki/Person">persons</a>
<a href="https://en.wikipedia.org/wiki/Social_networks">social networks</a>
<a href="https://en.wikipedia.org/wiki/Resource_Description_Framework">Resource Description Framework</a>
<a href="https://en.wikipedia.org/wiki/Web_Ontology_Language">Web Ontology Language</a>
<a href="https://en.wikipedia.org/wiki/E-mail_address">e-mail addresses</a>
<a href="https://en.wikipedia.org/wiki/Telephone_number">telephone number</a>
<a href="https://en.wikipedia.org/wiki/Facebook">Facebook</a>
<a href="https://en.wikipedia.org/wiki/Extensible_Messaging_and_Presence_Protocol">Jabber ID</a>
<a href="https://en.wikipedia.org/wiki/Uniform_Resource_Identifier">URI</a>
<a href="https://en.wikipedia.org/wiki/Social_Semantic_Web">Social Semantic Web</a>
<a href="https://en.wikipedia.org/wiki/Wikipedia:Citation_needed">citation needed</a>
<a href="https://en.wikipedia.org/wiki/Resource_Description_Framework">RDF</a>
<a href="https://en.wikipedia.org/wiki/Social_web">social web</a>
<a href="https://en.wikipedia.org/wiki/Wikipedia:Please_clarify">clarification needed</a>
<a href="https://en.wikipedia.org/wiki/Tim_Berners-Lee">Tim Berners-Lee</a>
<a href="https://en.wikipedia.org/wiki/Semantic_web">semantic web</a>
<a href="https://en.wikipedia.org/wiki/Giant_Global_Graph">Giant Global Graph</a>
<a href="https://en.wikipedia.org/wiki/Internet">Internet</a>
<a href="https://en.wikipedia.org/wiki/World_Wide_Web">World Wide Web</a></p>
<h2>WebID[edit]</h2>
<p><a href="https://en.wikipedia.org/w/index.php?title=FOAF&action=edit&section=1">edit</a>
<a href="https://en.wikipedia.org/wiki/WebID">WebID</a></p>
<h2>Deployment[edit]</h2>
<p><a href="https://en.wikipedia.org/w/index.php?title=FOAF&action=edit&section=2">edit</a>
<a href="https://en.wikipedia.org/wiki/Live_Journal">Live Journal</a>
<a href="https://en.wikipedia.org/wiki/DeadJournal">DeadJournal</a>
<a href="https://en.wikipedia.org/wiki/My_Opera">My Opera</a>
<a href="https://en.wikipedia.org/wiki/Identi.ca">Identi.ca</a>
<a href="https://en.wikipedia.org/wiki/FriendFeed">FriendFeed</a>
<a href="https://en.wikipedia.org/wiki/WordPress">WordPress</a>
<a href="https://en.wikipedia.org/wiki/TypePad">TypePad</a>
<a href="https://en.wikipedia.org/wiki/Yandex">Yandex</a>
<a href="https://en.wikipedia.org/wiki/Safari_(web_browser)">Safari</a>
<a href="https://en.wikipedia.org/wiki/Firefox_(web_browser)">Firefox</a>
<a href="https://en.wikipedia.org/wiki/Semantic_MediaWiki">Semantic MediaWiki</a>
<a href="https://en.wikipedia.org/wiki/Semantic_annotation">semantic annotation</a>
<a href="https://en.wikipedia.org/wiki/Linked_data">linked data</a>
<a href="https://en.wikipedia.org/wiki/MediaWiki">MediaWiki</a>
<a href="https://en.wikipedia.org/wiki/Content_management_systems">content management systems</a></p>
<h2>Example[edit]</h2>
<p><a href="https://en.wikipedia.org/w/index.php?title=FOAF&action=edit&section=3">edit</a>
<a href="https://en.wikipedia.org/wiki/Turtle_(syntax)">Turtle</a>
<a href="https://en.wikipedia.org/wiki/Web_resource">web resources</a></p>
<h2>History[edit]</h2>
<p><a href="https://en.wikipedia.org/w/index.php?title=FOAF&action=edit&section=4">edit</a></p>
<h3>Versions[edit]</h3>
<p><a href="https://en.wikipedia.org/w/index.php?title=FOAF&action=edit&section=5">edit</a>
<a href="http://xmlns.com/foaf/0.1/">http://xmlns.com/foaf/0.1/</a>
<a href="http://xmlns.com/foaf/0.1/">http://xmlns.com/foaf/0.1/</a></p>
<h2>See also[edit]</h2>
<p><a href="https://en.wikipedia.org/w/index.php?title=FOAF&action=edit&section=6">edit</a>
<a href="https://en.wikipedia.org/wiki/Resource_Description_Framework">Resource Description Framework</a>
<a href="https://en.wikipedia.org/wiki/Web_Ontology_Language">Web Ontology Language</a>
<a href="https://en.wikipedia.org/wiki/Social_web">Social web</a>
<a href="https://en.wikipedia.org/wiki/Semantic_Web">Semantic Web</a>
<a href="https://en.wiktionary.org/wiki/DOAC">Description of a Career</a>
<a href="https://en.wikipedia.org/wiki/DOAP">Description of a Project</a>
<a href="https://en.wikipedia.org/wiki/Semantically-Interlinked_Online_Communities">Semantically-Interlinked Online Communities</a>
<a href="https://en.wikipedia.org/wiki/HCard">hCard</a>
<a href="https://en.wikipedia.org/wiki/VCard">vCard</a>
<a href="https://en.wikipedia.org/wiki/XHTML_Friends_Network">XHTML Friends Network</a></p>
<h2>References[edit]</h2>
<p><a href="https://en.wikipedia.org/w/index.php?title=FOAF&action=edit&section=7">edit</a>
<a href="https://web.archive.org/web/20091223003446/http://www.ibm.com/developerworks/xml/library/x-foaf.html">XML Watch: Finding friends with XML and RDF</a>
<a href="https://en.wikipedia.org/wiki/IBM_DeveloperWorks">IBM DeveloperWorks</a>
<a href="https://web.archive.org/web/20100307223814/http://www.ibm.com/developerworks/xml/library/x-foaf2.html">XML Watch: Support online communities with FOAF</a>
<a href="https://en.wikipedia.org/wiki/IBM_DeveloperWorks">IBM DeveloperWorks</a>
<a href="https://web.archive.org/web/20160713021037/http://dig.csail.mit.edu/breadcrumbs/node/215">&quot;Giant Global Graph&quot;</a>
<a href="http://dig.csail.mit.edu/breadcrumbs/node/215">the original</a>
<a href="https://web.archive.org/web/20100118151037/http://community.livejournal.com/ljfoaf">&quot;LiveJournal FOAF&quot;</a>
<a href="http://community.livejournal.com/ljfoaf">the original</a>
<a href="https://web.archive.org/web/20100226072731/http://wiki.foaf-project.org/w/DataSources">&quot;Known FOAF data providers&quot;</a>
<a href="http://wiki.foaf-project.org/w/DataSources">the original</a>
<a href="http://company.yandex.com/press_center/press_releases/2008/2008-08-15.xml">&quot;press release on the social networking support&quot;</a>
<a href="http://ejohn.org/blog/foaf-support-in-safari-rss/">&quot;FOAF Support in Safari RSS&quot;</a>
<a href="https://web.archive.org/web/20140108014347/https://addons.mozilla.org/en-US/firefox/addon/semantic-radar/">&quot;Semantic Radar plugin for the Firefox browser&quot;</a>
<a href="https://addons.mozilla.org/en-US/firefox/addon/semantic-radar/">the original</a>
<a href="https://metacpan.org/pod/XML::FOAF">&quot;FOAF support module for Perl&quot;</a>
<a href="https://metacpan.org/pod/Web::ID">&quot;FOAF+SSL authentication support for Perl&quot;</a>
<a href="https://drupal.org/project/foaf">http://drupal.org/project/foaf</a>
<a href="https://en.wikipedia.org/wiki/Drupal">Drupal</a>
<a href="http://xmlns.com/foaf/spec/20140114.html">&quot;FOAF Vocabulary Specification 0.99&quot;</a>
<a href="https://web.archive.org/web/20220303180551/http://xmlns.com/foaf/spec/20140114.html">Archived</a></p>
<h2>External links[edit]</h2>
<p><a href="https://en.wikipedia.org/w/index.php?title=FOAF&action=edit&section=8">edit</a>
<a href="http://www.foaf-project.org">Official website</a>
<a href="https://web.archive.org/web/20211023122305/http://www.foaf-project.org/">Archived</a>
<a href="https://en.wikipedia.org/wiki/Wayback_Machine">Wayback Machine</a>
<a href="http://ebiquity.umbc.edu/resource/html/id/82/">FOAF dataset</a>
<a href="https://web.archive.org/web/20181130195340/https://www.foaf-search.net/">FOAF-search - a search engine for FOAF data</a>
<a href="https://en.wikipedia.org/wiki/Wayback_Machine">Wayback Machine</a>
<a href="https://en.wikipedia.org/wiki/Template:Semantic_Web">v</a>
<a href="https://en.wikipedia.org/wiki/Template_talk:Semantic_Web">t</a>
<a href="https://en.wikipedia.org/wiki/Special:EditPage/Template:Semantic_Web">e</a>
<a href="https://en.wikipedia.org/wiki/Semantic_Web">Semantic Web</a>
<a href="https://en.wikipedia.org/wiki/Database">Databases</a>
<a href="https://en.wikipedia.org/wiki/Hypertext">Hypertext</a>
<a href="https://en.wikipedia.org/wiki/Internet">Internet</a>
<a href="https://en.wikipedia.org/wiki/Ontology_(computer_science)">Ontologies</a>
<a href="https://en.wikipedia.org/wiki/Semantics_(computer_science)">Semantics</a>
<a href="https://en.wikipedia.org/wiki/Semantic_network">Semantic networks</a>
<a href="https://en.wikipedia.org/wiki/World_Wide_Web">World Wide Web</a>
<a href="https://en.wikipedia.org/wiki/Dataspaces">Dataspaces</a>
<a href="https://en.wikipedia.org/wiki/Hyperdata">Hyperdata</a>
<a href="https://en.wikipedia.org/wiki/Linked_data">Linked data</a>
<a href="https://en.wikipedia.org/wiki/Rule-based_system">Rule-based systems</a>
<a href="https://en.wikipedia.org/wiki/Semantic_analytics">Semantic analytics</a>
<a href="https://en.wikipedia.org/wiki/Semantic_broker">Semantic broker</a>
<a href="https://en.wikipedia.org/wiki/Semantic_computing">Semantic computing</a>
<a href="https://en.wikipedia.org/wiki/Semantic_mapper">Semantic mapper</a>
<a href="https://en.wikipedia.org/wiki/Semantic_matching">Semantic matching</a>
<a href="https://en.wikipedia.org/wiki/Semantic_publishing">Semantic publishing</a>
<a href="https://en.wikipedia.org/wiki/Semantic_reasoner">Semantic reasoner</a>
<a href="https://en.wikipedia.org/wiki/Semantic_search">Semantic search</a>
<a href="https://en.wikipedia.org/wiki/Semantic_service-oriented_architecture">Semantic service-oriented architecture</a>
<a href="https://en.wikipedia.org/wiki/Semantic_wiki">Semantic wiki</a>
<a href="https://en.wikipedia.org/wiki/Solid_(web_decentralization_project)">Solid</a>
<a href="https://en.wikipedia.org/wiki/Collective_intelligence">Collective intelligence</a>
<a href="https://en.wikipedia.org/wiki/Description_logic">Description logic</a>
<a href="https://en.wikipedia.org/wiki/Folksonomy">Folksonomy</a>
<a href="https://en.wikipedia.org/wiki/Geotagging">Geotagging</a>
<a href="https://en.wikipedia.org/wiki/Information_architecture">Information architecture</a>
<a href="https://en.wikipedia.org/wiki/Knowledge_extraction">Knowledge extraction</a>
<a href="https://en.wikipedia.org/wiki/Knowledge_management">Knowledge management</a>
<a href="https://en.wikipedia.org/wiki/Knowledge_representation_and_reasoning">Knowledge representation and reasoning</a>
<a href="https://en.wikipedia.org/wiki/Library_2.0">Library 2.0</a>
<a href="https://en.wikipedia.org/wiki/Digital_library">Digital library</a>
<a href="https://en.wikipedia.org/wiki/Digital_humanities">Digital humanities</a>
<a href="https://en.wikipedia.org/wiki/Metadata">Metadata</a>
<a href="https://en.wikipedia.org/wiki/Reference_(computer_science)">References</a>
<a href="https://en.wikipedia.org/wiki/Topic_map">Topic map</a>
<a href="https://en.wikipedia.org/wiki/Web_2.0">Web 2.0</a>
<a href="https://en.wikipedia.org/wiki/Web_engineering">Web engineering</a>
<a href="https://en.wikipedia.org/wiki/Web_Science_Trust">Web Science Trust</a>
<a href="https://en.wikipedia.org/wiki/HTTP">HTTP</a>
<a href="https://en.wikipedia.org/wiki/Internationalized_Resource_Identifier">IRI</a>
<a href="https://en.wikipedia.org/wiki/Uniform_Resource_Identifier">URI</a>
<a href="https://en.wikipedia.org/wiki/Resource_Description_Framework">RDF</a>
<a href="https://en.wikipedia.org/wiki/Semantic_triple">triples</a>
<a href="https://en.wikipedia.org/wiki/RDF/XML">RDF/XML</a>
<a href="https://en.wikipedia.org/wiki/JSON-LD">JSON-LD</a>
<a href="https://en.wikipedia.org/wiki/Turtle_(syntax)">Turtle</a>
<a href="https://en.wikipedia.org/wiki/TriG_(syntax)">TriG</a>
<a href="https://en.wikipedia.org/wiki/Notation3">Notation3</a>
<a href="https://en.wikipedia.org/wiki/N-Triples">N-Triples</a>
<a href="https://en.wikipedia.org/wiki/TriX_(serialization_format)">TriX</a>
<a href="https://en.wikipedia.org/wiki/Research_Resource_Identifier">RRID</a>
<a href="https://en.wikipedia.org/wiki/SPARQL">SPARQL</a>
<a href="https://en.wikipedia.org/wiki/XML">XML</a>
<a href="https://en.wikipedia.org/wiki/Semantic_HTML">Semantic HTML</a>
<a href="https://en.wikipedia.org/wiki/Common_Logic">Common Logic</a>
<a href="https://en.wikipedia.org/wiki/Web_Ontology_Language">OWL</a>
<a href="https://en.wikipedia.org/wiki/RDF_Schema">RDFS</a>
<a href="https://en.wikipedia.org/wiki/Rule_Interchange_Format">Rule Interchange Format</a>
<a href="https://en.wikipedia.org/wiki/Semantic_Web_Rule_Language">Semantic Web Rule Language</a>
<a href="https://en.wikipedia.org/w/index.php?title=Application-Level_Profile_Semantics_(ALPS)&action=edit&redlink=1">ALPS</a>
<a href="https://en.wikipedia.org/wiki/SHACL">SHACL</a>
<a href="https://en.wikipedia.org/wiki/Embedded_RDF">eRDF</a>
<a href="https://en.wikipedia.org/wiki/GRDDL">GRDDL</a>
<a href="https://en.wikipedia.org/wiki/Microdata_(HTML)">Microdata</a>
<a href="https://en.wikipedia.org/wiki/Microformat">Microformats</a>
<a href="https://en.wikipedia.org/wiki/RDFa">RDFa</a>
<a href="https://en.wikipedia.org/wiki/SAWSDL">SAWSDL</a>
<a href="https://en.wikipedia.org/wiki/Facebook_Platform">Facebook Platform</a>
<a href="https://en.wikipedia.org/wiki/DOAP">DOAP</a>
<a href="https://en.wikipedia.org/wiki/Dublin_Core">Dublin Core</a>
<a href="https://en.wikipedia.org/wiki/Schema.org">Schema.org</a>
<a href="https://en.wikipedia.org/wiki/Semantically_Interlinked_Online_Communities">SIOC</a>
<a href="https://en.wikipedia.org/wiki/Simple_Knowledge_Organization_System">SKOS</a>
<a href="https://en.wikipedia.org/wiki/HAtom">hAtom</a>
<a href="https://en.wikipedia.org/wiki/HCalendar">hCalendar</a>
<a href="https://en.wikipedia.org/wiki/HCard">hCard</a>
<a href="https://en.wikipedia.org/wiki/HProduct">hProduct</a>
<a href="https://en.wikipedia.org/wiki/HRecipe">hRecipe</a>
<a href="https://en.wikipedia.org/wiki/HReview">hReview</a>
<a href="https://en.wikipedia.org/wiki/Template:Social_networking">v</a>
<a href="https://en.wikipedia.org/wiki/Template_talk:Social_networking">t</a>
<a href="https://en.wikipedia.org/wiki/Special:EditPage/Template:Social_networking">e</a>
<a href="https://en.wikipedia.org/wiki/Social_network">Social networks</a>
<a href="https://en.wikipedia.org/wiki/Social_media">social media</a>
<a href="https://en.wikipedia.org/wiki/Personal_network">Personal</a>
<a href="https://en.wikipedia.org/wiki/Professional_network_service">Professional</a>
<a href="https://en.wikipedia.org/wiki/Sexual_network">Sexual</a>
<a href="https://en.wikipedia.org/wiki/Value_network">Value</a>
<a href="https://en.wikipedia.org/wiki/Clique">Clique</a>
<a href="https://en.wikipedia.org/wiki/Adolescent_clique">Adolescent</a>
<a href="https://en.wikipedia.org/wiki/Corporate_social_media">Corporate social media</a>
<a href="https://en.wikipedia.org/wiki/Distributed_social_network">Distributed social network</a>
<a href="https://en.wikipedia.org/wiki/Comparison_of_software_and_protocols_for_distributed_social_networking">list</a>
<a href="https://en.wikipedia.org/wiki/Enterprise_social_networking">Enterprise social networking</a>
<a href="https://en.wikipedia.org/wiki/Enterprise_social_software">Enterprise social software</a>
<a href="https://en.wikipedia.org/wiki/Mobile_social_network">Mobile social network</a>
<a href="https://en.wikipedia.org/wiki/Personal_knowledge_networking">Personal knowledge networking</a>
<a href="https://en.wikipedia.org/wiki/Social_networking_service">Services</a>
<a href="https://en.wikipedia.org/wiki/List_of_social_networking_services">List of social networking services</a>
<a href="https://en.wikipedia.org/wiki/List_of_virtual_communities_with_more_than_1_million_users">List of virtual communities with more than 1 million users</a>
<a href="https://en.wikipedia.org/wiki/Ambient_awareness">Ambient awareness</a>
<a href="https://en.wikipedia.org/wiki/Assortative_mixing">Assortative mixing</a>
<a href="https://en.wikipedia.org/wiki/Attention_inequality">Attention inequality</a>
<a href="https://en.wikipedia.org/wiki/Bridge_(interpersonal)">Interpersonal bridge</a>
<a href="https://en.wikipedia.org/wiki/Organizational_network_analysis">Organizational network analysis</a>
<a href="https://en.wikipedia.org/wiki/Small-world_experiment">Small-world experiment</a>
<a href="https://en.wikipedia.org/wiki/Social_aspects_of_television">Social aspects of television</a>
<a href="https://en.wikipedia.org/wiki/Social_capital">Social capital</a>
<a href="https://en.wikipedia.org/wiki/Social_data_revolution">Social data revolution</a>
<a href="https://en.wikipedia.org/wiki/Social_exchange_theory">Social exchange theory</a>
<a href="https://en.wikipedia.org/wiki/Social_identity_theory">Social identity theory</a>
<a href="https://en.wikipedia.org/wiki/Social_media_and_psychology">Social media and psychology</a>
<a href="https://en.wikipedia.org/wiki/Social_media_intelligence">Social media intelligence</a>
<a href="https://en.wikipedia.org/wiki/Social_media_mining">Social media mining</a>
<a href="https://en.wikipedia.org/wiki/Social_media_optimization">Social media optimization</a>
<a href="https://en.wikipedia.org/wiki/Social_network_analysis">Social network analysis</a>
<a href="https://en.wikipedia.org/wiki/Social_web">Social web</a>
<a href="https://en.wikipedia.org/wiki/Structural_endogamy">Structural endogamy</a>
<a href="https://en.wikipedia.org/wiki/Virtual_collective_consciousness">Virtual collective consciousness</a>
<a href="https://en.wikipedia.org/wiki/Account_verification">Account verification</a>
<a href="https://en.wikipedia.org/wiki/Social_network_aggregation">Aggregation</a>
<a href="https://en.wikipedia.org/wiki/Social_network_change_detection">Change detection</a>
<a href="https://en.wikipedia.org/wiki/Blockmodeling">Blockmodeling</a>
<a href="https://en.wikipedia.org/wiki/Collaboration_graph">Collaboration graph</a>
<a href="https://en.wikipedia.org/wiki/Collaborative_consumption">Collaborative consumption</a>
<a href="https://en.wikipedia.org/wiki/Giant_Global_Graph">Giant Global Graph</a>
<a href="https://en.wikipedia.org/wiki/Lateral_communication">Lateral communication</a>
<a href="https://en.wikipedia.org/wiki/Reputation_system">Reputation system</a>
<a href="https://en.wikipedia.org/wiki/Social_bot">Social bot</a>
<a href="https://en.wikipedia.org/wiki/Social_graph">Social graph</a>
<a href="https://en.wikipedia.org/wiki/Social_media_analytics">Social media analytics</a>
<a href="https://en.wikipedia.org/wiki/Social_network_analysis_software">Social network analysis software</a>
<a href="https://en.wikipedia.org/wiki/Social_networking_potential">Social networking potential</a>
<a href="https://en.wikipedia.org/wiki/Social_television">Social television</a>
<a href="https://en.wikipedia.org/wiki/Structural_cohesion">Structural cohesion</a>
<a href="https://en.wikipedia.org/wiki/Affinity_fraud">Affinity fraud</a>
<a href="https://en.wikipedia.org/wiki/Attention_economy">Attention economy</a>
<a href="https://en.wikipedia.org/wiki/Collaborative_finance">Collaborative finance</a>
<a href="https://en.wikipedia.org/wiki/Creator_economy">Creator economy</a>
<a href="https://en.wikipedia.org/wiki/Influencer_marketing">Influencer marketing</a>
<a href="https://en.wikipedia.org/wiki/Narrowcasting">Narrowcasting</a>
<a href="https://en.wikipedia.org/wiki/Sharing_economy">Sharing economy</a>
<a href="https://en.wikipedia.org/wiki/Social_commerce">Social commerce</a>
<a href="https://en.wikipedia.org/wiki/Social_sorting">Social sorting</a>
<a href="https://en.wikipedia.org/wiki/Viral_marketing">Viral marketing</a>
<a href="https://en.wikipedia.org/wiki/Algorithmic_radicalization">Algorithmic radicalization</a>
<a href="https://en.wikipedia.org/wiki/Community_recognition">Community recognition</a>
<a href="https://en.wikipedia.org/wiki/Complex_contagion">Complex contagion</a>
<a href="https://en.wikipedia.org/wiki/Computer_addiction">Computer addiction</a>
<a href="https://en.wikipedia.org/wiki/Consequential_strangers">Consequential strangers</a>
<a href="https://en.wikipedia.org/wiki/Friend_of_a_friend">Friend of a friend</a>
<a href="https://en.wikipedia.org/wiki/Friending_and_following">Friending and following</a>
<a href="https://en.wikipedia.org/wiki/Friendship_paradox">Friendship paradox</a>
<a href="https://en.wikipedia.org/wiki/Influence-for-hire">Influence-for-hire</a>
<a href="https://en.wikipedia.org/wiki/Internet_addiction">Internet addiction</a>
<a href="https://en.wikipedia.org/wiki/Information_overload">Information overload</a>
<a href="https://en.wikipedia.org/wiki/Overchoice">Overchoice</a>
<a href="https://en.wikipedia.org/wiki/Six_degrees_of_separation">Six degrees of separation</a>
<a href="https://en.wikipedia.org/wiki/Social_media_addiction">Social media addiction</a>
<a href="https://en.wikipedia.org/wiki/Social_media_and_suicide">Social media and suicide</a>
<a href="https://en.wikipedia.org/wiki/Social_invisibility">Social invisibility</a>
<a href="https://en.wikipedia.org/wiki/Social_network_game">Social network game</a>
<a href="https://en.wikipedia.org/wiki/Suicide_and_the_Internet">Suicide and the Internet</a>
<a href="https://en.wikipedia.org/wiki/Tribe_(internet)">Tribe</a>
<a href="https://en.wikipedia.org/wiki/Viral_phenomenon">Viral phenomenon</a>
<a href="https://en.wikipedia.org/wiki/Friendship_recession">Friendship recession</a>
<a href="https://en.wikipedia.org/wiki/Peer_pressure">Peer pressure</a>
<a href="https://en.wikipedia.org/wiki/List_of_social_network_researchers">Researchers</a>
<a href="https://en.wikipedia.org/wiki/User_profile">User profile</a>
<a href="https://en.wikipedia.org/wiki/Online_identity">Online identity</a>
<a href="https://en.wikipedia.org/wiki/Persona_(user_experience)">Persona</a>
<a href="https://en.wikipedia.org/wiki/Social_profiling">Social profiling</a>
<a href="https://en.wikipedia.org/wiki/Viral_messages">Viral messages</a>
<a href="https://en.wikipedia.org/wiki/Virtual_community">Virtual community</a>
<a href="https://en.wikipedia.org/w/index.php?title=FOAF&oldid=1165941964">https://en.wikipedia.org/w/index.php?title=FOAF&amp;oldid=1165941964</a>
<a href="https://en.wikipedia.org/wiki/Help:Category">Categories</a>
<a href="https://en.wikipedia.org/wiki/Category:Ontology_(information_science)">Ontology (information science)</a>
<a href="https://en.wikipedia.org/wiki/Category:Semantic_Web">Semantic Web</a>
<a href="https://en.wikipedia.org/wiki/Category:2000_software">2000 software</a>
<a href="https://en.wikipedia.org/wiki/Category:Articles_with_short_description">Articles with short description</a>
<a href="https://en.wikipedia.org/wiki/Category:Short_description_matches_Wikidata">Short description matches Wikidata</a>
<a href="https://en.wikipedia.org/wiki/Category:All_articles_with_unsourced_statements">All articles with unsourced statements</a>
<a href="https://en.wikipedia.org/wiki/Category:Articles_with_unsourced_statements_from_April_2017">Articles with unsourced statements from April 2017</a>
<a href="https://en.wikipedia.org/wiki/Category:Wikipedia_articles_needing_clarification_from_April_2017">Wikipedia articles needing clarification from April 2017</a>
<a href="https://en.wikipedia.org/wiki/Category:Webarchive_template_wayback_links">Webarchive template wayback links</a>
<a href="https://en.wikipedia.org/wiki/Wikipedia:Text_of_the_Creative_Commons_Attribution-ShareAlike_4.0_International_License">Creative Commons Attribution-ShareAlike License 4.0</a>
<a href="https://en.wikipedia.org/wiki/Wikipedia:Text_of_the_Creative_Commons_Attribution-ShareAlike_4.0_International_License"></a>
<a href="https://foundation.wikimedia.org/wiki/Special:MyLanguage/Policy:Terms_of_Use">Terms of Use</a>
<a href="https://foundation.wikimedia.org/wiki/Special:MyLanguage/Policy:Privacy_policy">Privacy Policy</a>
<a href="https://www.wikimediafoundation.org/">Wikimedia Foundation, Inc.</a>
<a href="https://foundation.wikimedia.org/wiki/Special:MyLanguage/Policy:Privacy_policy">Privacy policy</a>
<a href="https://en.wikipedia.org/wiki/Wikipedia:About">About Wikipedia</a>
<a href="https://en.wikipedia.org/wiki/Wikipedia:General_disclaimer">Disclaimers</a>
<a href="https://en.wikipedia.org/wiki/Wikipedia:Contact_us">Contact Wikipedia</a>
<a href="https://foundation.wikimedia.org/wiki/Special:MyLanguage/Policy:Universal_Code_of_Conduct">Code of Conduct</a>
<a href="https://developer.wikimedia.org">Developers</a>
<a href="https://stats.wikimedia.org/#/en.wikipedia.org">Statistics</a>
<a href="https://foundation.wikimedia.org/wiki/Special:MyLanguage/Policy:Cookie_statement">Cookie statement</a>
<a href="https://en.m.wikipedia.org/w/index.php?title=FOAF&mobileaction=toggle_view_mobile">Mobile view</a>
<a href="https://wikimediafoundation.org/"></a>
<a href="https://www.mediawiki.org/"></a></p>
<h1>FOAF Vocabulary Specification 0.99</h1>
<h2>Namespace Document 14 January 2014 - Paddington Edition</h2>
<p><a href="http://xmlns.com/foaf/spec/20140114.html">http://xmlns.com/foaf/spec/20140114.html</a>
<a href="http://xmlns.com/foaf/spec/20140114.rdf">rdf</a>
<a href="http://xmlns.com/foaf/spec/">http://xmlns.com/foaf/spec/</a>
<a href="http://xmlns.com/foaf/spec/index.rdf">rdf</a>
<a href="http://xmlns.com/foaf/spec/20100809.html">http://xmlns.com/foaf/spec/20100809.html</a>
<a href="http://xmlns.com/foaf/spec/20100809.rdf">rdf</a>
<a href="mailto:danbri@danbri.org">Dan Brickley</a>
<a href="mailto:libby@nicecupoftea.org">Libby Miller</a>
<a href="http://lists.foaf-project.org/">foaf-dev@lists.foaf-project.org</a>
<a href="http://www.w3.org/2001/sw/interest/">RDF
    and Semantic Web developer community</a>
<a href="http://creativecommons.org/licenses/by/1.0/"></a>
<a href="http://creativecommons.org/licenses/by/1.0/">Creative Commons Attribution License</a>
<a href="http://www.w3.org/RDF/">RDF</a></p>
<h2>Abstract</h2>
<h2>Status of This Document</h2>
<p><a href="http://www.foaf-project.org/">FOAF project</a>
<a href="http://xmlns.com/foaf/spec/index.rdf">RDFS/OWL</a>
<a href="http://xmlns.com/foaf/doc/">per-term</a>
<a href="http://svn.foaf-project.org/foaftown/foaf18n/">multilingual translations</a>
<a href="http://xmlns.com/foaf/spec/index.rdf">direct link</a>
<a href="http://en.wikipedia.org/wiki/Content_negotiation">content negotiation</a>
<a href="http://xmlns.com/foaf/0.1/">namespace URI</a>
<a href="mailto:foaf-dev@lists.foaf-project.org">foaf-dev@lists.foaf-project.org</a>
<a href="http://lists.foaf-project.org">public archives</a>
<a href="mailto:foaf-dev@lists.foaf-project.org">FOAF mailing list</a>
<a href="http://www.foaf-project.org/">FOAF website</a></p>
<h3>Changes in version 0.99</h3>
<h2>Table of Contents</h2>
<h2>FOAF at a glance</h2>
<p><a href="http://www.dublincore.org/">Dublin Core</a>
<a href="http://www.w3.org/2004/02/skos/">SKOS</a>
<a href="http://trac.usefulinc.com/doap">DOAP</a>
<a href="http://sioc-project.org/">SIOC</a>
<a href="http://www.epimorphics.com/public/vocabulary/org.html">Org vocabulary</a>
<a href="http://vocab.org/bio/0.1/.html">Bio vocabulary</a>
<a href="http://portablecontacts.net/">Portable Contacts</a>
<a href="http://www.w3.org/2005/Incubator/socialweb/">W3C Social Web group</a></p>
<h3>FOAF Core</h3>
<h3>Social Web</h3>
<h3>A-Z of FOAF terms (current and archaic)</h3>
<h2>Example</h2>
<h2>1 Introduction: FOAF Basics</h2>
<h3>The Semantic Web</h3>
<p><a href="http://www.w3.org/Talks/WWW94Tim/">W3 future directions</a>
<a href="http://dig.csail.mit.edu/breadcrumbs/node/215">Giant Global Graph</a>
<a href="http://www.w3.org/People/Berners-Lee/card">foaf</a></p>
<h3>FOAF and the Semantic Web</h3>
<p><a href="http://www.w3.org/2001/sw/">Semantic Web</a>
<a href="http://www.w3.org/TR/rdf-sparql-query/">SPARQL</a>
<a href="http://www.w3.org/2004/02/skos/">SKOS</a>
<a href="http://www.w3.org/2001/sw/grddl-wg/">GRDDL</a>
<a href="http://www.w3.org/TR/xhtml-rdfa-primer/">RDFa</a>
<a href="http://www.w3.org/DesignIssues/LinkedData.html">Linked
  Data</a></p>
<h3>The Basic Idea</h3>
<p><a href="http://xmlns.com/foaf/0.1/">FOAF namespace
  document</a></p>
<h2>What&#39;s FOAF for?</h2>
<p><a href="http://www-106.ibm.com/developerworks/xml/library/x-foaf.html">XML
  Watch: Finding friends with XML and RDF</a>
<a href="http://rdfweb.org/2002/01/photo/">with image metadata</a>
<a href="http://rdfweb.org/2002/01/photo/">co-depiction</a>
<a href="http://www.ldodds.com/foaf/foaf-a-matic.html">FOAF-a-matic</a>
<a href="http://www.foaf-project.org">FOAF project home page</a></p>
<h2>Background</h2>
<p><a href="http://www.urbanlegends.com/">alt.folklore.urban archive</a>
<a href="http://www.snopes.com/">snopes.com</a></p>
<h2>FOAF and Standards</h2>
<p><a href="http://www.iso.ch/iso/en/ISOOnline.openerpage">ISO
  Standardisation</a>
<a href="http://www.w3.org/">W3C</a>
<a href="http://www.w3.org/Consortium/Process/">Process</a>
<a href="http://www.opensource.org/">Open Source</a>
<a href="http://www.gnu.org/philosophy/free-sw.html">Free Software</a>
<a href="http://www.jabber.org/jeps/jep-0001.html">Jabber
  JEPs</a>
<a href="http://www.w3.org/RDF/">Resource Description Framework</a></p>
<h2>The FOAF Vocabulary Description</h2>
<p><a href="http://www.w3.org/RDF/">RDF</a>
<a href="http://www.w3.org/2001/sw/">Semantic Web</a>
<a href="http://www.w3.org/2001/sw/">Semantic Web</a></p>
<h3>Evolution and Extension of FOAF</h3>
<p><a href="http://dublincore.org/">Dublin Core</a></p>
<h2>FOAF Auto-Discovery: Publishing and Linking FOAF files</h2>
<p><a href="http://www.ldodds.com/foaf/foaf-a-matic.html">foaf-a-matic</a>
<a href="http://web.archive.org/web/20040416181630/rdfweb.org/mt/foaflog/archives/000041.html">FOAF
  autodiscovery</a></p>
<h2>FOAF cross-reference: Listing FOAF Classes and</h2>
<p>  Properties</p>
<p><a href="http://xmlns.com/foaf/spec/index.rdf">RDF/XML</a></p>
<h3>Classes and Properties (full detail)</h3>
<h2>Classes</h2>
<h3>Class: foaf:Agent</h3>
<h3>Class: foaf:Document</h3>
<h3>Class: foaf:Group</h3>
<p><a href="http://wiki.foaf-project.org/w/IssueTracker">issue tracker</a>
<a href="http://www.w3.org/2001/sw/WebOnt">OWL</a></p>
<h3>Class: foaf:Image</h3>
<h3>Class: foaf:Organization</h3>
<h3>Class: foaf:Person</h3>
<h3>Class: foaf:OnlineAccount</h3>
<h3>Class: foaf:PersonalProfileDocument</h3>
<p><a href="http://www.w3.org/2004/01/rdxh/spec">GRDDL</a></p>
<h3>Class: foaf:Project</h3>
<h3>Class: foaf:LabelProperty</h3>
<h3>Class: foaf:OnlineChatAccount</h3>
<p><a href="http://www.jabber.org/">Jabber</a>
<a href="http://www.aim.com/">AIM</a>
<a href="http://chat.msn.com/">MSN</a>
<a href="http://web.icq.com/icqchat/">ICQ</a>
<a href="http://chat.yahoo.com/">Yahoo!</a>
<a href="http://chat.msn.com/">MSN</a>
<a href="http://www.freenode.net/">Freenode</a></p>
<h3>Class: foaf:OnlineEcommerceAccount</h3>
<p><a href="http://www.amazon.com/">Amazon</a>
<a href="http://www.ebay.com/">eBay</a>
<a href="http://www.paypal.com/">PayPal</a>
<a href="http://www.thinkgeek.com/">thinkgeek</a></p>
<h3>Class: foaf:OnlineGamingAccount</h3>
<p><a href="http://everquest.station.sony.com/">EverQuest</a>
<a href="http://www.xbox.com/live/">Xbox live</a>
<a href="http://nwn.bioware.com/">Neverwinter Nights</a></p>
<h2>Properties</h2>
<h3>Property: foaf:homepage</h3>
<h3>Property: foaf:isPrimaryTopicOf</h3>
<h3>Property: foaf:knows</h3>
<p><a href="http://www.perceive.net/schemas/20021119/relationship/">Relationship module</a>
<a href="http://wiki.foaf-project.org/w/ScutterSpec">scutters</a></p>
<h3>Property: foaf:made</h3>
<h3>Property: foaf:maker</h3>
<p><a href="http://wiki.foaf-project.org/w/UsingDublinCoreCreator">UsingDublinCoreCreator</a></p>
<h3>Property: foaf:mbox</h3>
<p><a href="http://ftp.ics.uci.edu/pub/ietf/uri/rfc2368.txt">RFC 2368</a></p>
<h3>Property: foaf:member</h3>
<h3>Property: foaf:page</h3>
<h3>Property: foaf:primaryTopic</h3>
<p><a href="http://www.wikipedia.org/">Wikipedia</a>
<a href="http://www.nndb.com/">NNDB</a></p>
<h3>Property: foaf:weblog</h3>
<h3>Property: foaf:account</h3>
<h3>Property: foaf:accountName</h3>
<h3>Property: foaf:accountServiceHomepage</h3>
<h3>Property: foaf:aimChatID</h3>
<p><a href="http://www.aim.com/">AIM</a>
<a href="http://www.apple.com/macosx/what-is-macosx/ichat.html">iChat</a>
<a href="http://www.apple.com/">Apple</a></p>
<h3>Property: foaf:based_near</h3>
<p><a href="http://www.w3.org/2003/01/geo/wgs84_pos#">geo-positioning vocabulary</a>
<a href="http://esw.w3.org/topic/GeoInfo">GeoInfo</a>
<a href="http://esw.w3.org/topic/GeoOnion">GeoOnion vocab</a>
<a href="http://wiki.foaf-project.org/w/UsingContactNearestAirport">UsingContactNearestAirport</a></p>
<h3>Property: foaf:currentProject</h3>
<h3>Property: foaf:depiction</h3>
<p><a href="http://rdfweb.org/2002/01/photo/">Co-Depiction</a>
<a href="http://www.jibbering.com/svg/AnnotateImage.html">&#39;Annotating Images With SVG&#39;</a></p>
<h3>Property: foaf:depicts</h3>
<h3>Property: foaf:familyName</h3>
<p><a href="http://wiki.foaf-project.org/w/NameVocabIssue">issue tracker</a></p>
<h3>Property: foaf:firstName</h3>
<p><a href="http://wiki.foaf-project.org/w/NameVocabIssue">issue tracker</a></p>
<h3>Property: foaf:focus</h3>
<p><a href="http://www.w3.org/2004/02/skos/">SKOS</a>
<a href="http://www.w3.org/TR/2005/WD-swbp-skos-core-guide-20050510/#secmodellingrdf">In SKOS</a>
<a href="http://www.w3.org/TR/2005/WD-swbp-skos-core-guide-20051102/#secopen">2005 discussion</a>
<a href="http://larry.masinter.net/duri.html">TDB URI scheme</a>
<a href="http://www.foaf-project.org/original-intro">original goals</a></p>
<h3>Property: foaf:gender</h3>
<p><a href="http://lists.foaf-project.org/mailman/listinfo/foaf-dev">foaf-dev</a></p>
<h3>Property: foaf:givenName</h3>
<p><a href="http://wiki.foaf-project.org/w/NameVocabIssue">issue tracker</a></p>
<h3>Property: foaf:icqChatID</h3>
<p><a href="http://web.icq.com/icqchat/">icq chat</a>
<a href="http://www.icq.com/products/whatisicq.html">What is ICQ?</a>
<a href="http://company.icq.com/info/">About Us</a></p>
<h3>Property: foaf:img</h3>
<h3>Property: foaf:interest</h3>
<p><a href="http://www.w3.org/RDF/">RDF</a>
<a href="http://www.cpan.org/">CPAN</a></p>
<h3>Property: foaf:jabberID</h3>
<p><a href="http://www.jabber.org/">Jabber</a>
<a href="http://www.jabber.org/">Jabber</a></p>
<h3>Property: foaf:lastName</h3>
<p><a href="http://wiki.foaf-project.org/w/NameVocabIssue">issue tracker</a></p>
<h3>Property: foaf:logo</h3>
<h3>Property: foaf:mbox_sha1sum</h3>
<p><a href="http://usefulinc.com/foaf/">Edd Dumbill&#39;s
documentation</a>
<a href="http://www.w3.org/2001/12/rubyrdf/util/foafwhite/intro.html">FOAF-based whitelists</a>
<a href="http://www.intertwingly.net/blog/1545.html">in Sam Ruby&#39;s
weblog entry</a></p>
<h3>Property: foaf:msnChatID</h3>
<p><a href="http://en.wikipedia.org/wiki/Windows_Live_Messenger">Windows Live Messenger</a>
<a href="http://download.live.com/messenger">Microsoft mesenger</a>
<a href="http://en.wikipedia.org/wiki/Windows_Live_ID">Windows Live ID</a></p>
<h3>Property: foaf:myersBriggs</h3>
<p><a href="http://www.teamtechnology.co.uk/tt/t-articl/mb-simpl.htm">this article</a>
<a href="http://webspace.webring.com/people/cl/lifexplore/mbintro.htm">Cory Caplinger&#39;s summary table</a>
<a href="http://web.archive.org/web/20080802184922/http://rdfweb.org/mt/foaflog/archives/000004.html">FOAF Myers Briggs addition</a></p>
<h3>Property: foaf:name</h3>
<p><a href="http://wiki.foaf-project.org/w/IssueTracker">issue tracker</a></p>
<h3>Property: foaf:nick</h3>
<h3>Property: foaf:openid</h3>
<p><a href="http://www.w3.org/TR/webarch/#indirect-identification">indirect identifier</a>
<a href="http://openid.net/specs/openid-authentication-1_1.html">OpenID</a>
<a href="http://openid.net/specs/openid-authentication-1_1.html#delegating_authentication">delegation model</a>
<a href="http://xmlns.com/foaf/spec/#sec-autodesc">technique</a></p>
<h3>Property: foaf:pastProject</h3>
<h3>Property: foaf:phone</h3>
<h3>Property: foaf:plan</h3>
<p><a href="http://www.rajivshah.com/Case_Studies/Finger/Finger.htm">History of the
Finger Protocol</a></p>
<h3>Property: foaf:publications</h3>
<h3>Property: foaf:schoolHomepage</h3>
<h3>Property: foaf:skypeID</h3>
<h3>Property: foaf:thumbnail</h3>
<h3>Property: foaf:tipjar</h3>
<p><a href="http://rdfweb.org/mt/foaflog/archives/2004/02/12/20.07.32/">discussions</a>
<a href="http://www.paypal.com/">PayPal</a></p>
<h3>Property: foaf:title</h3>
<p><a href="http://wiki.foaf-project.org/w/IssueTracker">FOAF Issue Tracker</a></p>
<h3>Property: foaf:topic</h3>
<h3>Property: foaf:topic_interest</h3>
<h3>Property: foaf:workInfoHomepage</h3>
<h3>Property: foaf:workplaceHomepage</h3>
<h3>Property: foaf:yahooChatID</h3>
<p><a href="http://chat.yahoo.com/">Yahoo! Chat</a>
<a href="http://www.yahoogroups.com/">Yahoo! Groups</a></p>
<h3>Property: foaf:age</h3>
<h3>Property: foaf:birthday</h3>
<p><a href="http://wiki.foaf-project.org/w/BirthdayIssue">BirthdayIssue</a></p>
<h3>Property: foaf:membershipClass</h3>
<h3>Property: foaf:sha1</h3>
<h3>Property: foaf:status</h3>
<h3>Property: foaf:dnaChecksum</h3>
<h3>Property: foaf:family_name</h3>
<h3>Property: foaf:fundedBy</h3>
<h3>Property: foaf:geekcode</h3>
<p><a href="http://en.wikipedia.org/wiki/Geek_Code">Wikipedia entry</a></p>
<h3>Property: foaf:givenname</h3>
<p><a href="http://wiki.foaf-project.org/w/NameVocabIssue">issue tracker</a></p>
<h3>Property: foaf:holdsAccount</h3>
<h3>Property: foaf:surname</h3>
<p><a href="http://wiki.foaf-project.org/w/IssueTracker">issue
tracker</a></p>
<h3>Property: foaf:theme</h3>
<h2>External Vocabulary References</h2>
<h3>Status Vocabulary</h3>
<p><a href="http://www.w3.org/2003/06/sw-vocab-status/note">SemWeb Vocab Status Ontology</a></p>
<h3>W3C Basic Geo (WGS84 lat/long) Vocabulary</h3>
<p><a href="http://www.w3.org/2003/01/geo/">W3CBasic Geo Vocabulary</a></p>
<h3>RDF Vocabulary Description - core concepts</h3>
<p><a href="http://www.w3.org/2001/sw/">W3C&#39;s site</a>
<a href="http://www.w3.org/TR/webarch/#identification">more background on URIs</a>
<a href="http://www.w3.org/DesignIssues/LinkedData">linked data</a>
<a href="http://www.w3.org/2004/02/skos/">SKOS</a></p>
<h3>Dublin Core terms</h3>
<p><a href="http://dublincore.org/documents/dcmi-terms/">Dublin Core terms</a>
<a href="http://dublincore.org/documents/dcmi-terms/#classes-Agent">dct:Agent</a>
<a href="http://dublincore.org/documents/dcmi-terms/#terms-creator">dct:creator</a></p>
<h3>Wordnet terms</h3>
<p><a href="http://www.w3.org/TR/wordnet-rdf/">recent</a></p>
<h3>SIOC terms</h3>
<p><a href="http://rdfs.org/sioc/ns#">SIOC</a>
<a href="http://www.sioc-project.org/">SIOC</a></p>
<h3>Acknowledgments</h3>
<p><a href="http://rdfweb.org/pipermail/rdfweb-dev/">rdfweb-dev</a>
<a href="http://rdfweb.org/irc/">#foaf</a>
<a href="http://xml.mfd-consult.dk/foaf/explorer/">FoafExplorer</a>
<a href="http://eikeon.com/foaf/">Web View</a>
<a href="http://www.ldodds.com/foaf/foaf-a-matic.html">foaf-a-matic</a>
<a href="http://www.ecademy.com/">Ecademy</a>
<a href="http://www.typepad.com/">TypePad</a>
<a href="http://conferences.oreillynet.com/cs/et2003/view/e_sess/3633">many</a>
<a href="http://hackdiary.com/">explaining</a>
<a href="http://kanzaki.com/docs/sw/foaf.html">in Japanese</a>
<a href="http://f14web.com.ar/inkel/2003/01/27/foaf.html">Spanish</a>
<a href="http://crschmidt.net/">Chris Schmidt</a>
<a href="http://xmlns.com/foaf/0.1/specgen.py">spec generation</a>
<a href="http://crschmidt.net/semweb/">cool hacks</a>
<a href="http://iandavis.com/2006/foaf-icons/">FOAF Logo</a>
<a href="http://www.w3.org/History/1989/proposal.html">years ago</a></p>
<h2>Recent Changes</h2>
<h3>Changes in version 0.99 (2014-01-14)</h3>
<p><a href="http://schema.org/">schema.org</a>
<a href="http://schema.org/Person">Person</a>
<a href="http://schema.org/ImageObject">ImageObject</a>
<a href="http://schema.org/CreativeWork">CreativeWork</a></p>
<h3>2010-08-09</h3>
<p><a href="http://vocab.org/bio/0.1/.html">Bio vocabulary</a></p>
<h3>Changes from version 0.97 and 0.96</h3>
<p><a href="http://xmlns.com/foaf/spec/20100101.html">0.97</a>
<a href="http://xmlns.com/foaf/spec/20091215.html">0.96</a>
<a href="http://portablecontacts.net/">Portable Contacts</a></p>
<h3>2009-12-15</h3>
<h3>2007-11-02</h3>
<h3>2007-05-24</h3>

================
File: applications/link-lister/data/links.md
================
[Main page](https://en.wikipedia.org/wiki/Main_Page)
[Contents](https://en.wikipedia.org/wiki/Wikipedia:Contents)
[Current events](https://en.wikipedia.org/wiki/Portal:Current_events)
[Random article](https://en.wikipedia.org/wiki/Special:Random)
[About Wikipedia](https://en.wikipedia.org/wiki/Wikipedia:About)
[Contact us](https://en.wikipedia.org/wiki/Wikipedia:Contact_us)
[Donate](https://donate.wikimedia.org/wiki/Special:FundraiserRedirector?utm_source=donate&utm_medium=sidebar&utm_campaign=C13_en.wikipedia.org&uselang=en)
[Help](https://en.wikipedia.org/wiki/Help:Contents)
[Learn to edit](https://en.wikipedia.org/wiki/Help:Introduction)
[Community portal](https://en.wikipedia.org/wiki/Wikipedia:Community_portal)
[Recent changes](https://en.wikipedia.org/wiki/Special:RecentChanges)
[Upload file](https://en.wikipedia.org/wiki/Wikipedia:File_upload_wizard)
[
	
	
		
		
	
](https://en.wikipedia.org/wiki/Main_Page)
[

Search
	](https://en.wikipedia.org/wiki/Special:Search)
[Create account](https://en.wikipedia.org/w/index.php?title=Special:CreateAccount&returnto=FOAF)
[Log in](https://en.wikipedia.org/w/index.php?title=Special:UserLogin&returnto=FOAF)
[ Create account](https://en.wikipedia.org/w/index.php?title=Special:CreateAccount&returnto=FOAF)
[ Log in](https://en.wikipedia.org/w/index.php?title=Special:UserLogin&returnto=FOAF)
[learn more](https://en.wikipedia.org/wiki/Help:Introduction)
[Contributions](https://en.wikipedia.org/wiki/Special:MyContributions)
[Talk](https://en.wikipedia.org/wiki/Special:MyTalk)

## Contents


# FOAF

[Català](https://ca.wikipedia.org/wiki/FOAF)
[Deutsch](https://de.wikipedia.org/wiki/FOAF)
[Español](https://es.wikipedia.org/wiki/FOAF)
[فارسی](https://fa.wikipedia.org/wiki/%D8%A7%D9%81%E2%80%8C%D8%A7%D9%88%D8%A7%DB%8C%E2%80%8C%D8%A7%D9%81_(%D9%87%D8%B3%D8%AA%DB%8C%E2%80%8C%D8%B4%D9%86%D8%A7%D8%B3%DB%8C))
[Français](https://fr.wikipedia.org/wiki/FOAF)
[Italiano](https://it.wikipedia.org/wiki/FOAF)
[Latviešu](https://lv.wikipedia.org/wiki/FOAF)
[Nederlands](https://nl.wikipedia.org/wiki/FOAF)
[日本語](https://ja.wikipedia.org/wiki/Friend_of_a_Friend)
[Norsk bokmål](https://no.wikipedia.org/wiki/FOAF)
[Polski](https://pl.wikipedia.org/wiki/FOAF_(format))
[Português](https://pt.wikipedia.org/wiki/FOAF)
[Русский](https://ru.wikipedia.org/wiki/FOAF)
[Українська](https://uk.wikipedia.org/wiki/FOAF)
[Edit links](https://www.wikidata.org/wiki/Special:EntityPage/Q1389366#sitelinks-wikipedia)
[Article](https://en.wikipedia.org/wiki/FOAF)
[Talk](https://en.wikipedia.org/wiki/Talk:FOAF)
[Read](https://en.wikipedia.org/wiki/FOAF)
[Edit](https://en.wikipedia.org/w/index.php?title=FOAF&action=edit)
[View history](https://en.wikipedia.org/w/index.php?title=FOAF&action=history)
[Read](https://en.wikipedia.org/wiki/FOAF)
[Edit](https://en.wikipedia.org/w/index.php?title=FOAF&action=edit)
[View history](https://en.wikipedia.org/w/index.php?title=FOAF&action=history)
[What links here](https://en.wikipedia.org/wiki/Special:WhatLinksHere/FOAF)
[Related changes](https://en.wikipedia.org/wiki/Special:RecentChangesLinked/FOAF)
[Upload file](https://en.wikipedia.org/wiki/Wikipedia:File_Upload_Wizard)
[Special pages](https://en.wikipedia.org/wiki/Special:SpecialPages)
[Permanent link](https://en.wikipedia.org/w/index.php?title=FOAF&oldid=1165941964)
[Page information](https://en.wikipedia.org/w/index.php?title=FOAF&action=info)
[Cite this page](https://en.wikipedia.org/w/index.php?title=Special:CiteThisPage&page=FOAF&id=1165941964&wpFormIdentifier=titleform)
[Get shortened URL](https://en.wikipedia.org/w/index.php?title=Special:UrlShortener&url=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FFOAF)
[Download QR code](https://en.wikipedia.org/w/index.php?title=Special:QrCode&url=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FFOAF)
[Wikidata item](https://www.wikidata.org/wiki/Special:EntityPage/Q1389366)
[Download as PDF](https://en.wikipedia.org/w/index.php?title=Special:DownloadAsPdf&page=FOAF&action=show-download-screen)
[Printable version](https://en.wikipedia.org/w/index.php?title=FOAF&printable=yes)
[Wikimedia Commons](https://commons.wikimedia.org/wiki/Category:FOAF)
[friend of a friend](https://en.wikipedia.org/wiki/Friend_of_a_friend)
[Friend of a Friend (disambiguation)](https://en.wikipedia.org/wiki/Friend_of_a_Friend_(disambiguation))
[](https://en.wikipedia.org/wiki/File:FoafLogo.svg)
[RDF](https://en.wikipedia.org/wiki/Resource_Description_Framework)
[OWL](https://en.wikipedia.org/wiki/Web_Ontology_Language)
[Semantic Web](https://en.wikipedia.org/wiki/Semantic_Web)
[CC BY 1.0](https://en.wikipedia.org/wiki/Creative_Commons_license)
[xmlns.com/foaf/spec/](http://xmlns.com/foaf/spec/)
[friend of a friend](https://en.wikipedia.org/wiki/Friend_of_a_friend)
[machine-readable](https://en.wikipedia.org/wiki/Machine-readable_data)
[ontology](https://en.wikipedia.org/wiki/Ontology_(information_science))
[persons](https://en.wikipedia.org/wiki/Person)
[social networks](https://en.wikipedia.org/wiki/Social_networks)
[Resource Description Framework](https://en.wikipedia.org/wiki/Resource_Description_Framework)
[Web Ontology Language](https://en.wikipedia.org/wiki/Web_Ontology_Language)
[e-mail addresses](https://en.wikipedia.org/wiki/E-mail_address)
[telephone number](https://en.wikipedia.org/wiki/Telephone_number)
[Facebook](https://en.wikipedia.org/wiki/Facebook)
[Jabber ID](https://en.wikipedia.org/wiki/Extensible_Messaging_and_Presence_Protocol)
[URI](https://en.wikipedia.org/wiki/Uniform_Resource_Identifier)
[Social Semantic Web](https://en.wikipedia.org/wiki/Social_Semantic_Web)
[citation needed](https://en.wikipedia.org/wiki/Wikipedia:Citation_needed)
[RDF](https://en.wikipedia.org/wiki/Resource_Description_Framework)
[social web](https://en.wikipedia.org/wiki/Social_web)
[clarification needed](https://en.wikipedia.org/wiki/Wikipedia:Please_clarify)
[Tim Berners-Lee](https://en.wikipedia.org/wiki/Tim_Berners-Lee)
[semantic web](https://en.wikipedia.org/wiki/Semantic_web)
[Giant Global Graph](https://en.wikipedia.org/wiki/Giant_Global_Graph)
[Internet](https://en.wikipedia.org/wiki/Internet)
[World Wide Web](https://en.wikipedia.org/wiki/World_Wide_Web)

## WebID[edit]

[edit](https://en.wikipedia.org/w/index.php?title=FOAF&action=edit&section=1)
[WebID](https://en.wikipedia.org/wiki/WebID)

## Deployment[edit]

[edit](https://en.wikipedia.org/w/index.php?title=FOAF&action=edit&section=2)
[Live Journal](https://en.wikipedia.org/wiki/Live_Journal)
[DeadJournal](https://en.wikipedia.org/wiki/DeadJournal)
[My Opera](https://en.wikipedia.org/wiki/My_Opera)
[Identi.ca](https://en.wikipedia.org/wiki/Identi.ca)
[FriendFeed](https://en.wikipedia.org/wiki/FriendFeed)
[WordPress](https://en.wikipedia.org/wiki/WordPress)
[TypePad](https://en.wikipedia.org/wiki/TypePad)
[Yandex](https://en.wikipedia.org/wiki/Yandex)
[Safari](https://en.wikipedia.org/wiki/Safari_(web_browser))
[Firefox](https://en.wikipedia.org/wiki/Firefox_(web_browser))
[Semantic MediaWiki](https://en.wikipedia.org/wiki/Semantic_MediaWiki)
[semantic annotation](https://en.wikipedia.org/wiki/Semantic_annotation)
[linked data](https://en.wikipedia.org/wiki/Linked_data)
[MediaWiki](https://en.wikipedia.org/wiki/MediaWiki)
[content management systems](https://en.wikipedia.org/wiki/Content_management_systems)

## Example[edit]

[edit](https://en.wikipedia.org/w/index.php?title=FOAF&action=edit&section=3)
[Turtle](https://en.wikipedia.org/wiki/Turtle_(syntax))
[web resources](https://en.wikipedia.org/wiki/Web_resource)

## History[edit]

[edit](https://en.wikipedia.org/w/index.php?title=FOAF&action=edit&section=4)

### Versions[edit]

[edit](https://en.wikipedia.org/w/index.php?title=FOAF&action=edit&section=5)
[http://xmlns.com/foaf/0.1/](http://xmlns.com/foaf/0.1/)
[http://xmlns.com/foaf/0.1/](http://xmlns.com/foaf/0.1/)

## See also[edit]

[edit](https://en.wikipedia.org/w/index.php?title=FOAF&action=edit&section=6)
[Resource Description Framework](https://en.wikipedia.org/wiki/Resource_Description_Framework)
[Web Ontology Language](https://en.wikipedia.org/wiki/Web_Ontology_Language)
[Social web](https://en.wikipedia.org/wiki/Social_web)
[Semantic Web](https://en.wikipedia.org/wiki/Semantic_Web)
[Description of a Career](https://en.wiktionary.org/wiki/DOAC)
[Description of a Project](https://en.wikipedia.org/wiki/DOAP)
[Semantically-Interlinked Online Communities](https://en.wikipedia.org/wiki/Semantically-Interlinked_Online_Communities)
[hCard](https://en.wikipedia.org/wiki/HCard)
[vCard](https://en.wikipedia.org/wiki/VCard)
[XHTML Friends Network](https://en.wikipedia.org/wiki/XHTML_Friends_Network)

## References[edit]

[edit](https://en.wikipedia.org/w/index.php?title=FOAF&action=edit&section=7)
[XML Watch: Finding friends with XML and RDF](https://web.archive.org/web/20091223003446/http://www.ibm.com/developerworks/xml/library/x-foaf.html)
[IBM DeveloperWorks](https://en.wikipedia.org/wiki/IBM_DeveloperWorks)
[XML Watch: Support online communities with FOAF](https://web.archive.org/web/20100307223814/http://www.ibm.com/developerworks/xml/library/x-foaf2.html)
[IBM DeveloperWorks](https://en.wikipedia.org/wiki/IBM_DeveloperWorks)
["Giant Global Graph"](https://web.archive.org/web/20160713021037/http://dig.csail.mit.edu/breadcrumbs/node/215)
[the original](http://dig.csail.mit.edu/breadcrumbs/node/215)
["LiveJournal FOAF"](https://web.archive.org/web/20100118151037/http://community.livejournal.com/ljfoaf)
[the original](http://community.livejournal.com/ljfoaf)
["Known FOAF data providers"](https://web.archive.org/web/20100226072731/http://wiki.foaf-project.org/w/DataSources)
[the original](http://wiki.foaf-project.org/w/DataSources)
["press release on the social networking support"](http://company.yandex.com/press_center/press_releases/2008/2008-08-15.xml)
["FOAF Support in Safari RSS"](http://ejohn.org/blog/foaf-support-in-safari-rss/)
["Semantic Radar plugin for the Firefox browser"](https://web.archive.org/web/20140108014347/https://addons.mozilla.org/en-US/firefox/addon/semantic-radar/)
[the original](https://addons.mozilla.org/en-US/firefox/addon/semantic-radar/)
["FOAF support module for Perl"](https://metacpan.org/pod/XML::FOAF)
["FOAF+SSL authentication support for Perl"](https://metacpan.org/pod/Web::ID)
[http://drupal.org/project/foaf](https://drupal.org/project/foaf)
[Drupal](https://en.wikipedia.org/wiki/Drupal)
["FOAF Vocabulary Specification 0.99"](http://xmlns.com/foaf/spec/20140114.html)
[Archived](https://web.archive.org/web/20220303180551/http://xmlns.com/foaf/spec/20140114.html)

## External links[edit]

[edit](https://en.wikipedia.org/w/index.php?title=FOAF&action=edit&section=8)
[Official website](http://www.foaf-project.org)
[Archived](https://web.archive.org/web/20211023122305/http://www.foaf-project.org/)
[Wayback Machine](https://en.wikipedia.org/wiki/Wayback_Machine)
[FOAF dataset](http://ebiquity.umbc.edu/resource/html/id/82/)
[FOAF-search - a search engine for FOAF data](https://web.archive.org/web/20181130195340/https://www.foaf-search.net/)
[Wayback Machine](https://en.wikipedia.org/wiki/Wayback_Machine)
[v](https://en.wikipedia.org/wiki/Template:Semantic_Web)
[t](https://en.wikipedia.org/wiki/Template_talk:Semantic_Web)
[e](https://en.wikipedia.org/wiki/Special:EditPage/Template:Semantic_Web)
[Semantic Web](https://en.wikipedia.org/wiki/Semantic_Web)
[Databases](https://en.wikipedia.org/wiki/Database)
[Hypertext](https://en.wikipedia.org/wiki/Hypertext)
[Internet](https://en.wikipedia.org/wiki/Internet)
[Ontologies](https://en.wikipedia.org/wiki/Ontology_(computer_science))
[Semantics](https://en.wikipedia.org/wiki/Semantics_(computer_science))
[Semantic networks](https://en.wikipedia.org/wiki/Semantic_network)
[World Wide Web](https://en.wikipedia.org/wiki/World_Wide_Web)
[Dataspaces](https://en.wikipedia.org/wiki/Dataspaces)
[Hyperdata](https://en.wikipedia.org/wiki/Hyperdata)
[Linked data](https://en.wikipedia.org/wiki/Linked_data)
[Rule-based systems](https://en.wikipedia.org/wiki/Rule-based_system)
[Semantic analytics](https://en.wikipedia.org/wiki/Semantic_analytics)
[Semantic broker](https://en.wikipedia.org/wiki/Semantic_broker)
[Semantic computing](https://en.wikipedia.org/wiki/Semantic_computing)
[Semantic mapper](https://en.wikipedia.org/wiki/Semantic_mapper)
[Semantic matching](https://en.wikipedia.org/wiki/Semantic_matching)
[Semantic publishing](https://en.wikipedia.org/wiki/Semantic_publishing)
[Semantic reasoner](https://en.wikipedia.org/wiki/Semantic_reasoner)
[Semantic search](https://en.wikipedia.org/wiki/Semantic_search)
[Semantic service-oriented architecture](https://en.wikipedia.org/wiki/Semantic_service-oriented_architecture)
[Semantic wiki](https://en.wikipedia.org/wiki/Semantic_wiki)
[Solid](https://en.wikipedia.org/wiki/Solid_(web_decentralization_project))
[Collective intelligence](https://en.wikipedia.org/wiki/Collective_intelligence)
[Description logic](https://en.wikipedia.org/wiki/Description_logic)
[Folksonomy](https://en.wikipedia.org/wiki/Folksonomy)
[Geotagging](https://en.wikipedia.org/wiki/Geotagging)
[Information architecture](https://en.wikipedia.org/wiki/Information_architecture)
[Knowledge extraction](https://en.wikipedia.org/wiki/Knowledge_extraction)
[Knowledge management](https://en.wikipedia.org/wiki/Knowledge_management)
[Knowledge representation and reasoning](https://en.wikipedia.org/wiki/Knowledge_representation_and_reasoning)
[Library 2.0](https://en.wikipedia.org/wiki/Library_2.0)
[Digital library](https://en.wikipedia.org/wiki/Digital_library)
[Digital humanities](https://en.wikipedia.org/wiki/Digital_humanities)
[Metadata](https://en.wikipedia.org/wiki/Metadata)
[References](https://en.wikipedia.org/wiki/Reference_(computer_science))
[Topic map](https://en.wikipedia.org/wiki/Topic_map)
[Web 2.0](https://en.wikipedia.org/wiki/Web_2.0)
[Web engineering](https://en.wikipedia.org/wiki/Web_engineering)
[Web Science Trust](https://en.wikipedia.org/wiki/Web_Science_Trust)
[HTTP](https://en.wikipedia.org/wiki/HTTP)
[IRI](https://en.wikipedia.org/wiki/Internationalized_Resource_Identifier)
[URI](https://en.wikipedia.org/wiki/Uniform_Resource_Identifier)
[RDF](https://en.wikipedia.org/wiki/Resource_Description_Framework)
[triples](https://en.wikipedia.org/wiki/Semantic_triple)
[RDF/XML](https://en.wikipedia.org/wiki/RDF/XML)
[JSON-LD](https://en.wikipedia.org/wiki/JSON-LD)
[Turtle](https://en.wikipedia.org/wiki/Turtle_(syntax))
[TriG](https://en.wikipedia.org/wiki/TriG_(syntax))
[Notation3](https://en.wikipedia.org/wiki/Notation3)
[N-Triples](https://en.wikipedia.org/wiki/N-Triples)
[TriX](https://en.wikipedia.org/wiki/TriX_(serialization_format))
[RRID](https://en.wikipedia.org/wiki/Research_Resource_Identifier)
[SPARQL](https://en.wikipedia.org/wiki/SPARQL)
[XML](https://en.wikipedia.org/wiki/XML)
[Semantic HTML](https://en.wikipedia.org/wiki/Semantic_HTML)
[Common Logic](https://en.wikipedia.org/wiki/Common_Logic)
[OWL](https://en.wikipedia.org/wiki/Web_Ontology_Language)
[RDFS](https://en.wikipedia.org/wiki/RDF_Schema)
[Rule Interchange Format](https://en.wikipedia.org/wiki/Rule_Interchange_Format)
[Semantic Web Rule Language](https://en.wikipedia.org/wiki/Semantic_Web_Rule_Language)
[ALPS](https://en.wikipedia.org/w/index.php?title=Application-Level_Profile_Semantics_(ALPS)&action=edit&redlink=1)
[SHACL](https://en.wikipedia.org/wiki/SHACL)
[eRDF](https://en.wikipedia.org/wiki/Embedded_RDF)
[GRDDL](https://en.wikipedia.org/wiki/GRDDL)
[Microdata](https://en.wikipedia.org/wiki/Microdata_(HTML))
[Microformats](https://en.wikipedia.org/wiki/Microformat)
[RDFa](https://en.wikipedia.org/wiki/RDFa)
[SAWSDL](https://en.wikipedia.org/wiki/SAWSDL)
[Facebook Platform](https://en.wikipedia.org/wiki/Facebook_Platform)
[DOAP](https://en.wikipedia.org/wiki/DOAP)
[Dublin Core](https://en.wikipedia.org/wiki/Dublin_Core)
[Schema.org](https://en.wikipedia.org/wiki/Schema.org)
[SIOC](https://en.wikipedia.org/wiki/Semantically_Interlinked_Online_Communities)
[SKOS](https://en.wikipedia.org/wiki/Simple_Knowledge_Organization_System)
[hAtom](https://en.wikipedia.org/wiki/HAtom)
[hCalendar](https://en.wikipedia.org/wiki/HCalendar)
[hCard](https://en.wikipedia.org/wiki/HCard)
[hProduct](https://en.wikipedia.org/wiki/HProduct)
[hRecipe](https://en.wikipedia.org/wiki/HRecipe)
[hReview](https://en.wikipedia.org/wiki/HReview)
[v](https://en.wikipedia.org/wiki/Template:Social_networking)
[t](https://en.wikipedia.org/wiki/Template_talk:Social_networking)
[e](https://en.wikipedia.org/wiki/Special:EditPage/Template:Social_networking)
[Social networks](https://en.wikipedia.org/wiki/Social_network)
[social media](https://en.wikipedia.org/wiki/Social_media)
[Personal](https://en.wikipedia.org/wiki/Personal_network)
[Professional](https://en.wikipedia.org/wiki/Professional_network_service)
[Sexual](https://en.wikipedia.org/wiki/Sexual_network)
[Value](https://en.wikipedia.org/wiki/Value_network)
[Clique](https://en.wikipedia.org/wiki/Clique)
[Adolescent](https://en.wikipedia.org/wiki/Adolescent_clique)
[Corporate social media](https://en.wikipedia.org/wiki/Corporate_social_media)
[Distributed social network](https://en.wikipedia.org/wiki/Distributed_social_network)
[list](https://en.wikipedia.org/wiki/Comparison_of_software_and_protocols_for_distributed_social_networking)
[Enterprise social networking](https://en.wikipedia.org/wiki/Enterprise_social_networking)
[Enterprise social software](https://en.wikipedia.org/wiki/Enterprise_social_software)
[Mobile social network](https://en.wikipedia.org/wiki/Mobile_social_network)
[Personal knowledge networking](https://en.wikipedia.org/wiki/Personal_knowledge_networking)
[Services](https://en.wikipedia.org/wiki/Social_networking_service)
[List of social networking services](https://en.wikipedia.org/wiki/List_of_social_networking_services)
[List of virtual communities with more than 1 million users](https://en.wikipedia.org/wiki/List_of_virtual_communities_with_more_than_1_million_users)
[Ambient awareness](https://en.wikipedia.org/wiki/Ambient_awareness)
[Assortative mixing](https://en.wikipedia.org/wiki/Assortative_mixing)
[Attention inequality](https://en.wikipedia.org/wiki/Attention_inequality)
[Interpersonal bridge](https://en.wikipedia.org/wiki/Bridge_(interpersonal))
[Organizational network analysis](https://en.wikipedia.org/wiki/Organizational_network_analysis)
[Small-world experiment](https://en.wikipedia.org/wiki/Small-world_experiment)
[Social aspects of television](https://en.wikipedia.org/wiki/Social_aspects_of_television)
[Social capital](https://en.wikipedia.org/wiki/Social_capital)
[Social data revolution](https://en.wikipedia.org/wiki/Social_data_revolution)
[Social exchange theory](https://en.wikipedia.org/wiki/Social_exchange_theory)
[Social identity theory](https://en.wikipedia.org/wiki/Social_identity_theory)
[Social media and psychology](https://en.wikipedia.org/wiki/Social_media_and_psychology)
[Social media intelligence](https://en.wikipedia.org/wiki/Social_media_intelligence)
[Social media mining](https://en.wikipedia.org/wiki/Social_media_mining)
[Social media optimization](https://en.wikipedia.org/wiki/Social_media_optimization)
[Social network analysis](https://en.wikipedia.org/wiki/Social_network_analysis)
[Social web](https://en.wikipedia.org/wiki/Social_web)
[Structural endogamy](https://en.wikipedia.org/wiki/Structural_endogamy)
[Virtual collective consciousness](https://en.wikipedia.org/wiki/Virtual_collective_consciousness)
[Account verification](https://en.wikipedia.org/wiki/Account_verification)
[Aggregation](https://en.wikipedia.org/wiki/Social_network_aggregation)
[Change detection](https://en.wikipedia.org/wiki/Social_network_change_detection)
[Blockmodeling](https://en.wikipedia.org/wiki/Blockmodeling)
[Collaboration graph](https://en.wikipedia.org/wiki/Collaboration_graph)
[Collaborative consumption](https://en.wikipedia.org/wiki/Collaborative_consumption)
[Giant Global Graph](https://en.wikipedia.org/wiki/Giant_Global_Graph)
[Lateral communication](https://en.wikipedia.org/wiki/Lateral_communication)
[Reputation system](https://en.wikipedia.org/wiki/Reputation_system)
[Social bot](https://en.wikipedia.org/wiki/Social_bot)
[Social graph](https://en.wikipedia.org/wiki/Social_graph)
[Social media analytics](https://en.wikipedia.org/wiki/Social_media_analytics)
[Social network analysis software](https://en.wikipedia.org/wiki/Social_network_analysis_software)
[Social networking potential](https://en.wikipedia.org/wiki/Social_networking_potential)
[Social television](https://en.wikipedia.org/wiki/Social_television)
[Structural cohesion](https://en.wikipedia.org/wiki/Structural_cohesion)
[Affinity fraud](https://en.wikipedia.org/wiki/Affinity_fraud)
[Attention economy](https://en.wikipedia.org/wiki/Attention_economy)
[Collaborative finance](https://en.wikipedia.org/wiki/Collaborative_finance)
[Creator economy](https://en.wikipedia.org/wiki/Creator_economy)
[Influencer marketing](https://en.wikipedia.org/wiki/Influencer_marketing)
[Narrowcasting](https://en.wikipedia.org/wiki/Narrowcasting)
[Sharing economy](https://en.wikipedia.org/wiki/Sharing_economy)
[Social commerce](https://en.wikipedia.org/wiki/Social_commerce)
[Social sorting](https://en.wikipedia.org/wiki/Social_sorting)
[Viral marketing](https://en.wikipedia.org/wiki/Viral_marketing)
[Algorithmic radicalization](https://en.wikipedia.org/wiki/Algorithmic_radicalization)
[Community recognition](https://en.wikipedia.org/wiki/Community_recognition)
[Complex contagion](https://en.wikipedia.org/wiki/Complex_contagion)
[Computer addiction](https://en.wikipedia.org/wiki/Computer_addiction)
[Consequential strangers](https://en.wikipedia.org/wiki/Consequential_strangers)
[Friend of a friend](https://en.wikipedia.org/wiki/Friend_of_a_friend)
[Friending and following](https://en.wikipedia.org/wiki/Friending_and_following)
[Friendship paradox](https://en.wikipedia.org/wiki/Friendship_paradox)
[Influence-for-hire](https://en.wikipedia.org/wiki/Influence-for-hire)
[Internet addiction](https://en.wikipedia.org/wiki/Internet_addiction)
[Information overload](https://en.wikipedia.org/wiki/Information_overload)
[Overchoice](https://en.wikipedia.org/wiki/Overchoice)
[Six degrees of separation](https://en.wikipedia.org/wiki/Six_degrees_of_separation)
[Social media addiction](https://en.wikipedia.org/wiki/Social_media_addiction)
[Social media and suicide](https://en.wikipedia.org/wiki/Social_media_and_suicide)
[Social invisibility](https://en.wikipedia.org/wiki/Social_invisibility)
[Social network game](https://en.wikipedia.org/wiki/Social_network_game)
[Suicide and the Internet](https://en.wikipedia.org/wiki/Suicide_and_the_Internet)
[Tribe](https://en.wikipedia.org/wiki/Tribe_(internet))
[Viral phenomenon](https://en.wikipedia.org/wiki/Viral_phenomenon)
[Friendship recession](https://en.wikipedia.org/wiki/Friendship_recession)
[Peer pressure](https://en.wikipedia.org/wiki/Peer_pressure)
[Researchers](https://en.wikipedia.org/wiki/List_of_social_network_researchers)
[User profile](https://en.wikipedia.org/wiki/User_profile)
[Online identity](https://en.wikipedia.org/wiki/Online_identity)
[Persona](https://en.wikipedia.org/wiki/Persona_(user_experience))
[Social profiling](https://en.wikipedia.org/wiki/Social_profiling)
[Viral messages](https://en.wikipedia.org/wiki/Viral_messages)
[Virtual community](https://en.wikipedia.org/wiki/Virtual_community)
[https://en.wikipedia.org/w/index.php?title=FOAF&oldid=1165941964](https://en.wikipedia.org/w/index.php?title=FOAF&oldid=1165941964)
[Categories](https://en.wikipedia.org/wiki/Help:Category)
[Ontology (information science)](https://en.wikipedia.org/wiki/Category:Ontology_(information_science))
[Semantic Web](https://en.wikipedia.org/wiki/Category:Semantic_Web)
[2000 software](https://en.wikipedia.org/wiki/Category:2000_software)
[Articles with short description](https://en.wikipedia.org/wiki/Category:Articles_with_short_description)
[Short description matches Wikidata](https://en.wikipedia.org/wiki/Category:Short_description_matches_Wikidata)
[All articles with unsourced statements](https://en.wikipedia.org/wiki/Category:All_articles_with_unsourced_statements)
[Articles with unsourced statements from April 2017](https://en.wikipedia.org/wiki/Category:Articles_with_unsourced_statements_from_April_2017)
[Wikipedia articles needing clarification from April 2017](https://en.wikipedia.org/wiki/Category:Wikipedia_articles_needing_clarification_from_April_2017)
[Webarchive template wayback links](https://en.wikipedia.org/wiki/Category:Webarchive_template_wayback_links)
[Creative Commons Attribution-ShareAlike License 4.0](https://en.wikipedia.org/wiki/Wikipedia:Text_of_the_Creative_Commons_Attribution-ShareAlike_4.0_International_License)
[](https://en.wikipedia.org/wiki/Wikipedia:Text_of_the_Creative_Commons_Attribution-ShareAlike_4.0_International_License)
[Terms of Use](https://foundation.wikimedia.org/wiki/Special:MyLanguage/Policy:Terms_of_Use)
[Privacy Policy](https://foundation.wikimedia.org/wiki/Special:MyLanguage/Policy:Privacy_policy)
[Wikimedia Foundation, Inc.](https://www.wikimediafoundation.org/)
[Privacy policy](https://foundation.wikimedia.org/wiki/Special:MyLanguage/Policy:Privacy_policy)
[About Wikipedia](https://en.wikipedia.org/wiki/Wikipedia:About)
[Disclaimers](https://en.wikipedia.org/wiki/Wikipedia:General_disclaimer)
[Contact Wikipedia](https://en.wikipedia.org/wiki/Wikipedia:Contact_us)
[Code of Conduct](https://foundation.wikimedia.org/wiki/Special:MyLanguage/Policy:Universal_Code_of_Conduct)
[Developers](https://developer.wikimedia.org)
[Statistics](https://stats.wikimedia.org/#/en.wikipedia.org)
[Cookie statement](https://foundation.wikimedia.org/wiki/Special:MyLanguage/Policy:Cookie_statement)
[Mobile view](https://en.m.wikipedia.org/w/index.php?title=FOAF&mobileaction=toggle_view_mobile)
[](https://wikimediafoundation.org/)
[](https://www.mediawiki.org/)

# FOAF Vocabulary Specification 0.99


## Namespace Document 14 January 2014 - Paddington Edition

[http://xmlns.com/foaf/spec/20140114.html](http://xmlns.com/foaf/spec/20140114.html)
[rdf](http://xmlns.com/foaf/spec/20140114.rdf)
[http://xmlns.com/foaf/spec/](http://xmlns.com/foaf/spec/)
[rdf](http://xmlns.com/foaf/spec/index.rdf)
[http://xmlns.com/foaf/spec/20100809.html](http://xmlns.com/foaf/spec/20100809.html)
[rdf](http://xmlns.com/foaf/spec/20100809.rdf)
[Dan Brickley](mailto:danbri@danbri.org)
[Libby Miller](mailto:libby@nicecupoftea.org)
[foaf-dev@lists.foaf-project.org](http://lists.foaf-project.org/)
[RDF
    and Semantic Web developer community](http://www.w3.org/2001/sw/interest/)
[](http://creativecommons.org/licenses/by/1.0/)
[Creative Commons Attribution License](http://creativecommons.org/licenses/by/1.0/)
[RDF](http://www.w3.org/RDF/)

## Abstract


## Status of This Document

[FOAF project](http://www.foaf-project.org/)
[RDFS/OWL](http://xmlns.com/foaf/spec/index.rdf)
[per-term](http://xmlns.com/foaf/doc/)
[multilingual translations](http://svn.foaf-project.org/foaftown/foaf18n/)
[direct link](http://xmlns.com/foaf/spec/index.rdf)
[content negotiation](http://en.wikipedia.org/wiki/Content_negotiation)
[namespace URI](http://xmlns.com/foaf/0.1/)
[foaf-dev@lists.foaf-project.org](mailto:foaf-dev@lists.foaf-project.org)
[public archives](http://lists.foaf-project.org)
[FOAF mailing list](mailto:foaf-dev@lists.foaf-project.org)
[FOAF website](http://www.foaf-project.org/)

### Changes in version 0.99


## Table of Contents


## FOAF at a glance

[Dublin Core](http://www.dublincore.org/)
[SKOS](http://www.w3.org/2004/02/skos/)
[DOAP](http://trac.usefulinc.com/doap)
[SIOC](http://sioc-project.org/)
[Org vocabulary](http://www.epimorphics.com/public/vocabulary/org.html)
[Bio vocabulary](http://vocab.org/bio/0.1/.html)
[Portable Contacts](http://portablecontacts.net/)
[W3C Social Web group](http://www.w3.org/2005/Incubator/socialweb/)

### FOAF Core


### Social Web


### A-Z of FOAF terms (current and archaic)


## Example


## 1 Introduction: FOAF Basics


### The Semantic Web

[W3 future directions](http://www.w3.org/Talks/WWW94Tim/)
[Giant Global Graph](http://dig.csail.mit.edu/breadcrumbs/node/215)
[foaf](http://www.w3.org/People/Berners-Lee/card)

### FOAF and the Semantic Web

[Semantic Web](http://www.w3.org/2001/sw/)
[SPARQL](http://www.w3.org/TR/rdf-sparql-query/)
[SKOS](http://www.w3.org/2004/02/skos/)
[GRDDL](http://www.w3.org/2001/sw/grddl-wg/)
[RDFa](http://www.w3.org/TR/xhtml-rdfa-primer/)
[Linked 
  Data](http://www.w3.org/DesignIssues/LinkedData.html)

### The Basic Idea

[FOAF namespace
  document](http://xmlns.com/foaf/0.1/)

## What's FOAF for?

[XML
  Watch: Finding friends with XML and RDF](http://www-106.ibm.com/developerworks/xml/library/x-foaf.html)
[with image metadata](http://rdfweb.org/2002/01/photo/)
[co-depiction](http://rdfweb.org/2002/01/photo/)
[FOAF-a-matic](http://www.ldodds.com/foaf/foaf-a-matic.html)
[FOAF project home page](http://www.foaf-project.org)

## Background

[alt.folklore.urban archive](http://www.urbanlegends.com/)
[snopes.com](http://www.snopes.com/)

## FOAF and Standards

[ISO
  Standardisation](http://www.iso.ch/iso/en/ISOOnline.openerpage)
[W3C](http://www.w3.org/)
[Process](http://www.w3.org/Consortium/Process/)
[Open Source](http://www.opensource.org/)
[Free Software](http://www.gnu.org/philosophy/free-sw.html)
[Jabber
  JEPs](http://www.jabber.org/jeps/jep-0001.html)
[Resource Description Framework](http://www.w3.org/RDF/)

## The FOAF Vocabulary Description

[RDF](http://www.w3.org/RDF/)
[Semantic Web](http://www.w3.org/2001/sw/)
[Semantic Web](http://www.w3.org/2001/sw/)

### Evolution and Extension of FOAF

[Dublin Core](http://dublincore.org/)

## FOAF Auto-Discovery: Publishing and Linking FOAF files

[foaf-a-matic](http://www.ldodds.com/foaf/foaf-a-matic.html)
[FOAF
  autodiscovery](http://web.archive.org/web/20040416181630/rdfweb.org/mt/foaflog/archives/000041.html)

## FOAF cross-reference: Listing FOAF Classes and
  Properties

[RDF/XML](http://xmlns.com/foaf/spec/index.rdf)

### Classes and Properties (full detail)


## Classes


### Class: foaf:Agent


### Class: foaf:Document


### Class: foaf:Group

[issue tracker](http://wiki.foaf-project.org/w/IssueTracker)
[OWL](http://www.w3.org/2001/sw/WebOnt)

### Class: foaf:Image


### Class: foaf:Organization


### Class: foaf:Person


### Class: foaf:OnlineAccount


### Class: foaf:PersonalProfileDocument

[GRDDL](http://www.w3.org/2004/01/rdxh/spec)

### Class: foaf:Project


### Class: foaf:LabelProperty


### Class: foaf:OnlineChatAccount

[Jabber](http://www.jabber.org/)
[AIM](http://www.aim.com/)
[MSN](http://chat.msn.com/)
[ICQ](http://web.icq.com/icqchat/)
[Yahoo!](http://chat.yahoo.com/)
[MSN](http://chat.msn.com/)
[Freenode](http://www.freenode.net/)

### Class: foaf:OnlineEcommerceAccount

[Amazon](http://www.amazon.com/)
[eBay](http://www.ebay.com/)
[PayPal](http://www.paypal.com/)
[thinkgeek](http://www.thinkgeek.com/)

### Class: foaf:OnlineGamingAccount

[EverQuest](http://everquest.station.sony.com/)
[Xbox live](http://www.xbox.com/live/)
[Neverwinter Nights](http://nwn.bioware.com/)

## Properties


### Property: foaf:homepage


### Property: foaf:isPrimaryTopicOf


### Property: foaf:knows

[Relationship module](http://www.perceive.net/schemas/20021119/relationship/)
[scutters](http://wiki.foaf-project.org/w/ScutterSpec)

### Property: foaf:made


### Property: foaf:maker

[UsingDublinCoreCreator](http://wiki.foaf-project.org/w/UsingDublinCoreCreator)

### Property: foaf:mbox

[RFC 2368](http://ftp.ics.uci.edu/pub/ietf/uri/rfc2368.txt)

### Property: foaf:member


### Property: foaf:page


### Property: foaf:primaryTopic

[Wikipedia](http://www.wikipedia.org/)
[NNDB](http://www.nndb.com/)

### Property: foaf:weblog


### Property: foaf:account


### Property: foaf:accountName


### Property: foaf:accountServiceHomepage


### Property: foaf:aimChatID

[AIM](http://www.aim.com/)
[iChat](http://www.apple.com/macosx/what-is-macosx/ichat.html)
[Apple](http://www.apple.com/)

### Property: foaf:based_near

[geo-positioning vocabulary](http://www.w3.org/2003/01/geo/wgs84_pos#)
[GeoInfo](http://esw.w3.org/topic/GeoInfo)
[GeoOnion vocab](http://esw.w3.org/topic/GeoOnion)
[UsingContactNearestAirport](http://wiki.foaf-project.org/w/UsingContactNearestAirport)

### Property: foaf:currentProject


### Property: foaf:depiction

[Co-Depiction](http://rdfweb.org/2002/01/photo/)
['Annotating Images With SVG'](http://www.jibbering.com/svg/AnnotateImage.html)

### Property: foaf:depicts


### Property: foaf:familyName

[issue tracker](http://wiki.foaf-project.org/w/NameVocabIssue)

### Property: foaf:firstName

[issue tracker](http://wiki.foaf-project.org/w/NameVocabIssue)

### Property: foaf:focus

[SKOS](http://www.w3.org/2004/02/skos/)
[In SKOS](http://www.w3.org/TR/2005/WD-swbp-skos-core-guide-20050510/#secmodellingrdf)
[2005 discussion](http://www.w3.org/TR/2005/WD-swbp-skos-core-guide-20051102/#secopen)
[TDB URI scheme](http://larry.masinter.net/duri.html)
[original goals](http://www.foaf-project.org/original-intro)

### Property: foaf:gender

[foaf-dev](http://lists.foaf-project.org/mailman/listinfo/foaf-dev)

### Property: foaf:givenName

[issue tracker](http://wiki.foaf-project.org/w/NameVocabIssue)

### Property: foaf:icqChatID

[icq chat](http://web.icq.com/icqchat/)
[What is ICQ?](http://www.icq.com/products/whatisicq.html)
[About Us](http://company.icq.com/info/)

### Property: foaf:img


### Property: foaf:interest

[RDF](http://www.w3.org/RDF/)
[CPAN](http://www.cpan.org/)

### Property: foaf:jabberID

[Jabber](http://www.jabber.org/)
[Jabber](http://www.jabber.org/)

### Property: foaf:lastName

[issue tracker](http://wiki.foaf-project.org/w/NameVocabIssue)

### Property: foaf:logo


### Property: foaf:mbox_sha1sum

[Edd Dumbill's 
documentation](http://usefulinc.com/foaf/)
[FOAF-based whitelists](http://www.w3.org/2001/12/rubyrdf/util/foafwhite/intro.html)
[in Sam Ruby's 
weblog entry](http://www.intertwingly.net/blog/1545.html)

### Property: foaf:msnChatID

[Windows Live Messenger](http://en.wikipedia.org/wiki/Windows_Live_Messenger)
[Microsoft mesenger](http://download.live.com/messenger)
[Windows Live ID](http://en.wikipedia.org/wiki/Windows_Live_ID)

### Property: foaf:myersBriggs

[this article](http://www.teamtechnology.co.uk/tt/t-articl/mb-simpl.htm)
[Cory Caplinger's summary table](http://webspace.webring.com/people/cl/lifexplore/mbintro.htm)
[FOAF Myers Briggs addition](http://web.archive.org/web/20080802184922/http://rdfweb.org/mt/foaflog/archives/000004.html)

### Property: foaf:name

[issue tracker](http://wiki.foaf-project.org/w/IssueTracker)

### Property: foaf:nick


### Property: foaf:openid

[indirect identifier](http://www.w3.org/TR/webarch/#indirect-identification)
[OpenID](http://openid.net/specs/openid-authentication-1_1.html)
[delegation model](http://openid.net/specs/openid-authentication-1_1.html#delegating_authentication)
[technique](http://xmlns.com/foaf/spec/#sec-autodesc)

### Property: foaf:pastProject


### Property: foaf:phone


### Property: foaf:plan

[History of the 
Finger Protocol](http://www.rajivshah.com/Case_Studies/Finger/Finger.htm)

### Property: foaf:publications


### Property: foaf:schoolHomepage


### Property: foaf:skypeID


### Property: foaf:thumbnail


### Property: foaf:tipjar

[discussions](http://rdfweb.org/mt/foaflog/archives/2004/02/12/20.07.32/)
[PayPal](http://www.paypal.com/)

### Property: foaf:title

[FOAF Issue Tracker](http://wiki.foaf-project.org/w/IssueTracker)

### Property: foaf:topic


### Property: foaf:topic_interest


### Property: foaf:workInfoHomepage


### Property: foaf:workplaceHomepage


### Property: foaf:yahooChatID

[Yahoo! Chat](http://chat.yahoo.com/)
[Yahoo! Groups](http://www.yahoogroups.com/)

### Property: foaf:age


### Property: foaf:birthday

[BirthdayIssue](http://wiki.foaf-project.org/w/BirthdayIssue)

### Property: foaf:membershipClass


### Property: foaf:sha1


### Property: foaf:status


### Property: foaf:dnaChecksum


### Property: foaf:family_name


### Property: foaf:fundedBy


### Property: foaf:geekcode

[Wikipedia entry](http://en.wikipedia.org/wiki/Geek_Code)

### Property: foaf:givenname

[issue tracker](http://wiki.foaf-project.org/w/NameVocabIssue)

### Property: foaf:holdsAccount


### Property: foaf:surname

[issue 
tracker](http://wiki.foaf-project.org/w/IssueTracker)

### Property: foaf:theme


## External Vocabulary References


### Status Vocabulary

[SemWeb Vocab Status Ontology](http://www.w3.org/2003/06/sw-vocab-status/note)

### W3C Basic Geo (WGS84 lat/long) Vocabulary

[W3CBasic Geo Vocabulary](http://www.w3.org/2003/01/geo/)

### RDF Vocabulary Description - core concepts

[W3C's site](http://www.w3.org/2001/sw/)
[more background on URIs](http://www.w3.org/TR/webarch/#identification)
[linked data](http://www.w3.org/DesignIssues/LinkedData)
[SKOS](http://www.w3.org/2004/02/skos/)

### Dublin Core terms

[Dublin Core terms](http://dublincore.org/documents/dcmi-terms/)
[dct:Agent](http://dublincore.org/documents/dcmi-terms/#classes-Agent)
[dct:creator](http://dublincore.org/documents/dcmi-terms/#terms-creator)

### Wordnet terms

[recent](http://www.w3.org/TR/wordnet-rdf/)

### SIOC terms

[SIOC](http://rdfs.org/sioc/ns#)
[SIOC](http://www.sioc-project.org/)

### Acknowledgments

[rdfweb-dev](http://rdfweb.org/pipermail/rdfweb-dev/)
[#foaf](http://rdfweb.org/irc/)
[FoafExplorer](http://xml.mfd-consult.dk/foaf/explorer/)
[Web View](http://eikeon.com/foaf/)
[foaf-a-matic](http://www.ldodds.com/foaf/foaf-a-matic.html)
[Ecademy](http://www.ecademy.com/)
[TypePad](http://www.typepad.com/)
[many](http://conferences.oreillynet.com/cs/et2003/view/e_sess/3633)
[explaining](http://hackdiary.com/)
[in Japanese](http://kanzaki.com/docs/sw/foaf.html)
[Spanish](http://f14web.com.ar/inkel/2003/01/27/foaf.html)
[Chris Schmidt](http://crschmidt.net/)
[spec generation](http://xmlns.com/foaf/0.1/specgen.py)
[cool hacks](http://crschmidt.net/semweb/)
[FOAF Logo](http://iandavis.com/2006/foaf-icons/)
[years ago](http://www.w3.org/History/1989/proposal.html)

## Recent Changes


### Changes in version 0.99 (2014-01-14)

[schema.org](http://schema.org/)
[Person](http://schema.org/Person)
[ImageObject](http://schema.org/ImageObject)
[CreativeWork](http://schema.org/CreativeWork)

### 2010-08-09

[Bio vocabulary](http://vocab.org/bio/0.1/.html)

### Changes from version 0.97 and 0.96

[0.97](http://xmlns.com/foaf/spec/20100101.html)
[0.96](http://xmlns.com/foaf/spec/20091215.html)
[Portable Contacts](http://portablecontacts.net/)

### 2009-12-15


### 2007-11-02


### 2007-05-24

================
File: applications/link-lister/data/starter-links.md
================
https://en.wikipedia.org/wiki/FOAF

# https://en.wikipedia.org/wiki/WebID

# https://en.wikipedia.org/wiki/Resource_Description_Framework

http://xmlns.com/foaf/spec/

================
File: applications/link-lister/processors-config.ttl
================
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix trm: <http://purl.org/stuff/transmission/> .
# @prefix fs: <http://purl.org/stuff/filesystem/> .
@prefix t: <http://hyperdata.it/transmissions/> . # for custom terms & instances

t:linklister trm:hasDataMap t:llSourceMap .
t:linklister trm:hasDataMap t:llGotMap .
t:linklister trm:hasDataMap t:llLinkMap .

t:llSourceMap a trm:DataMap ;
    trm:key t:sourceFile ;
    trm:value "starter-links.md" .

t:llGotMap a trm:DataMap ;
    trm:key t:gotFile ;
    trm:value "got.html" .

t:llLinkMap a trm:DataMap ;
    trm:key t:linkFile ;
    trm:value "links.md" .

t:htmlMap a trm:DataMap ;
    trm:key t:htmlFile ;
    trm:value "links.html" .

================
File: applications/link-lister/transmissions.ttl
================
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix trm: <http://purl.org/stuff/transmission/> .
@prefix : <http://hyperdata.it/transmissions/> . # for custom terms & instances

:linklister a trm:Pipeline ;
    trm:pipe (:s1 :s2 :s3 :s4 :s5 :s6 :s7 :s8) .

:s1 a :FileReader ;
    trm:configKey :sourceFile .
:s2 a :LineReader .
:s3 a :HttpGet .

:s4 a :LinkFinder .

:s5 a :StringMerger .

:s6 a :FileWriter ;
    trm:configKey :linkFile .
# :s6 a :NOP .
:s7 a :MarkdownToHTML .

:s8 a :FileWriter ;
    trm:configKey :htmlFile .

#:s8 a :StringFilter .
#:s9 a :StringMerger .
#:s10 a :FileWriter 
#        trm:configKey :linkFile .
# :s4 a :NOP .
# :s4 a :FileWriter ;
#     trm:configKey :gotFile .

# :s5 a :NOP .

================
File: applications/nop-test/about.md
================
# nop

## Description

minimal for comparing with simple runner

---

- Goal : a tool to recursively read local filesystem directories, checking for files with the `.md` extension to identify collections of such
- Goal : documentation of the app creation process
- Implementation : a #Transmissions application
- SoftGoal : reusability
- _non-goal_ - efficiency

================
File: applications/nop-test/processors-config.ttl
================
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix trm: <http://purl.org/stuff/transmission/> .
# @prefix fs: <http://purl.org/stuff/filesystem/> .
@prefix t: <http://hyperdata.it/transmissions/> . # for custom terms & instances

t:walkPrep a trm:ReMap ;
    trm:rename (t:pp1 t:pp2) . # consider using blank nodes
    t:pp1   trm:pre     "content" ;
            trm:post    "template"  .
    t:pp2   trm:pre     "entryContentMeta.sourceDir" ;
            trm:post    "sourceDir" .

================
File: applications/nop-test/transmissions.ttl
================
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix trm: <http://purl.org/stuff/transmission/> .
@prefix : <http://hyperdata.it/transmissions/> . # for custom terms & instances

#############################################################
# insert into pipe for debugging
:DE a :DeadEnd . # ends the current pipe quietly
:H  a :Halt . # kills everything 
:SC a :ShowConfig . # verbose report, continues pipe
:SM a :ShowMessage . # verbose report, continues pipe
:N  a :NOP . # no operation (except for showing stage in pipe)
:UF a :Unfork . # collapses all pipes but one 
#############################################################

:nope a trm:Pipeline ;
    trm:pipe (:N :SC :SM) .

================
File: applications/postcraft/processors-config.ttl
================
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix trm: <http://purl.org/stuff/transmission/> .
# @prefix fs: <http://purl.org/stuff/filesystem/> .
@prefix t: <http://hyperdata.it/transmissions/> . # for custom terms & instances
@prefix pc: <http://purl.org/stuff/postcraft/> .

### ConfigMap
t:PostcraftMap a trm:ServiceConfig ;
    trm:key t:postcraftMap ;
    trm:group pc:ContentGroup .

### clean 

t:cacheRemove a trm:ServiceConfig ;
    trm:key t:removeCache ;
    trm:target "cache/" .

t:articlesRemove a trm:ServiceConfig ;
    trm:key t:removeArticles ;
    trm:target "public/home/articles" .

t:entriesRemove a trm:ServiceConfig ;
    trm:key t:removeEntries ;
    trm:target "public/home/entries" .

t:journalRemove a trm:ServiceConfig ;
    trm:key t:removeJournal ;
    trm:target "public/home/journal" .

t:todoRemove a trm:ServiceConfig ;
    trm:key t:removeTodo ;
    trm:target "public/home/todo" .

t:indexRemove a trm:ServiceConfig ;
    trm:key t:removeIndex ;
    trm:target "public/home/index.html" .

### copy #####################################

t:copyStatic a trm:ServiceConfig ;
    trm:key t:staticCopy ;
    trm:source "content-static" ;
    trm:destination "public/home/static" .


t:copyMedia a trm:ServiceConfig ;
    trm:key t:mediaCopy ;
    trm:source "media" ;
    trm:destination "public/home/media" .
    
t:copyCSS a trm:ServiceConfig ;
    trm:key t:cssCopy ;
    trm:source "layouts/mediocre/css" ;
    trm:destination "public/home/css" .

t:copyFonts a trm:ServiceConfig ;
    trm:key t:fontsCopy ;
    trm:source "layouts/mediocre/fonts" ;
    trm:destination "public/home/fonts" .

t:copyJS a trm:ServiceConfig ;
    trm:key t:jsCopy ;
    trm:source "layouts/mediocre/js" ;
    trm:destination "public/home/js" .

### render ##################################

trm:Describe  a trm:ServiceConfig ; 
 trm:key trm:describe .

t:phaseOne a trm:ServiceConfig ; 
    trm:key t:markdownToRawPosts ;
    trm:marker "Phase One" .

# TODO IS COPY, not rename!!

t:walkPrep a trm:ReMap ;
    trm:rename (t:pp1 t:pp2) . # consider using blank nodes
    t:pp1   trm:pre     "content" ;
            trm:post    "template"  .
    t:pp2   trm:pre     "entryContentMeta.sourceDir" ;
            trm:post    "sourceDir" .
  #  t:pp2   trm:pre     "filename" ;
   #         trm:post    "filename"  .
 
t:entryRawPrep a trm:ReMap ;
    trm:rename (t:er1 t:er3) . 
   t:er1   trm:pre     "targetFilename" ;
            trm:post    "filepath" . 
    t:er3   trm:pre     "content" ;
            trm:post    "contentBlocks.content" .

t:entryPagePrep a trm:ReMap ;
    trm:rename (t:ppp1) . 
    t:ppp1   trm:pre     "content" ;
            trm:post    "contentBlocks.content" .

================
File: applications/postcraft/transmissions.ttl
================
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .

@prefix trm: <http://purl.org/stuff/transmission/> . # TODO make plural
@prefix : <http://hyperdata.it/transmissions/> . # for custom terms & instances - TODO make one @services s: 
@prefix pc: <http://purl.org/stuff/postcraft/> .

#############################################################
# insert into pipe for debugging - one instance only like this
:DE a :DeadEnd . # ends the current pipe quietly
:H  a :Halt . # kills everything 
:SC a :ShowConfig . # verbose report, continues pipe
:SM a :ShowMessage . # verbose report, continues pipe
:SM2 a :ShowMessage . # verbose report, continues pipe
:N  a :NOP . # no operation (except for showing stage in pipe) 
:UF a :Unfork . # collapses all pipes but one 
#############################################################


## POSTCRAFT.CLEAN ##########################################

:clean a trm:Pipeline ;
    rdfs:label "clean" ;
    rdfs:comment "directory cleaner" ;
    trm:pipe (:r10 :r20 :r30 :r40 :r50 :r60) .

:r10 a :FileRemove ;
    trm:configKey :removeCache .

:r20 a :FileRemove ;
    trm:configKey  :removeArticles .

:r30 a :FileRemove ;
    trm:configKey  :removeJournal .

:r40 a :FileRemove ;
    trm:configKey  :removeEntries .

:r50 a :FileRemove ;
    trm:configKey  :removeTodo .

:r60 a :FileRemove ;
    trm:configKey  :removeIndex .

## POSTCRAFT.COPY ##################################################################

:copy a trm:Pipeline ;
    rdfs:label "copy" ;
    rdfs:comment "dir/file copier" ;
    trm:pipe (:cp10 :cp20 :cp30 :cp40 :cp50) .

### static dirs
:cp10 a :FileCopy ;
    trm:configKey :staticCopy .

### media dirs
:cp20 a :FileCopy ;
    trm:configKey :mediaCopy .
    
### layout dirs
:cp30 a :FileCopy ;
    trm:configKey :cssCopy .

:cp40 a :FileCopy ;
    trm:configKey :jsCopy .

:cp50 a :FileCopy ;
    trm:configKey :fontsCopy .

#####################


## POSTCRAFT.RENDER ###############################################################

:render a trm:Pipeline ;
    rdfs:label "render" ;
    rdfs:comment "render the pages" ;
   trm:pipe (:s10 :s20 :s30 :s40  :s50 :s60 :s70 :s80 :s90 :s100 
              :s110 :s120 :s130 :s140 :s150  :s160 :s170 :s180) .
 #  trm:pipe (:s10 :SM :s20 :SM2 :DE  :s30 :s40  :s50 :s60 :s70 :s80 :s90 :s100 
  #               :s110 :s120 :s130 :s140 :s150  :s160 :s170 :s180) .

:s10 a :DatasetReader . # read the manifest
# trm:configKey trm:describe .

:s20 a :ConfigMap ;
    trm:configKey :postcraftMap .

:s30 a :FileReader ; # the template for raw entry content
    trm:describe trm:all .

:s40 a :RemapContext ;
    trm:configKey :walkPrep .

:s50 a :DirWalker . # automatically forks

:s60 a :FileReader . # the markdown content

:s70 a :PostcraftPrep . # set up title, filenames etc

:s80 a :MarkdownToHTML . 

:s90 a :RemapContext ;
   trm:configKey :entryRawPrep .

 :s100 a :Templater .

:s110 a :FileWriter .

############### entryContentToEntryPage
:s120 a :EntryContentToPagePrep .
#:s12 a :RemapContext ;
 #  trm:configKey :entryPagePrep .

:s130 a :Templater .

:s140 a :FileWriter .

#######################
:s150  a :Unfork .

:s160 a :FrontPagePrep . 

:s170 a :Templater .

:s180 a :FileWriter .

================
File: applications/postcraft-init/about.md
================
./run postcraft-init /home/danny/absolute/path

================
File: applications/postcraft-init/processors-config.ttl
================
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix trm: <http://purl.org/stuff/transmission/> .
@prefix : <http://hyperdata.it/transmissions/> .

:copyTemplateToDestination a trm:ServiceConfig ;
    trm:key :copyTemplateToDestination ;
    trm:source "/home/danny/HKMS/postcraft/postcraft-template/" ;
    trm:destination "{{destinationPath}}" .

================
File: applications/postcraft-init/transmissions.ttl
================
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix trm: <http://purl.org/stuff/transmission/> .
@prefix : <http://hyperdata.it/transmissions/> .

#############################################################
# insert into pipe for debugging
:DE a :DeadEnd . # ends the current pipe quietly
:H  a :Halt . # kills everything 
:SM a :ShowMessage . # verbose report, continues pipe
:N  a :NOP . # no operation (except for showing stage in pipe)
:UF a :Unfork . # collapses all pipes but one 
#############################################################


:postcraft_init a trm:Pipeline ;
    trm:pipe (:s1) .

:s1 a :FileCopy ;
    trm:configKey :copyTemplateToDestination .

================
File: applications/postcraft-previous/processors.ttl
================
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix trm: <http://purl.org/stuff/transmission/> .
# @prefix fs: <http://purl.org/stuff/filesystem/> .
@prefix t: <http://hyperdata.it/transmissions/> . # for custom terms & instances

trm:Describe  a trm:ServiceConfig ; 
 trm:key trm:describe .

t:phaseOne a trm:ServiceConfig ; 
    trm:key t:markdownToRawPosts ;
    trm:marker "Phase One" .

t:copyMedia a trm:ServiceConfig ;
    trm:key t:mediaCopy ;
    trm:source "media" ;
    trm:destination "public/home/media" .
    
t:copyCSS a trm:ServiceConfig ;
    trm:key t:cssCopy ;
    trm:source "layouts/mediocre/css" ;
    trm:destination "public/home/css" .

t:copyFonts a trm:ServiceConfig ;
    trm:key t:fontsCopy ;
    trm:source "layouts/mediocre/fonts" ;
    trm:destination "public/home/fonts" .

t:copyJS a trm:ServiceConfig ;
    trm:key t:jsCopy ;
    trm:source "layouts/mediocre/fonts" ;
    trm:destination "public/home/fonts" .

# TODO IS COPY, not rename!!

t:walkPrep a trm:ReMap ;
    trm:rename (t:pp1 t:pp2) . # consider using blank nodes
    t:pp1   trm:pre     "content" ;
            trm:post    "template"  .
    t:pp2   trm:pre     "entryContentMeta.sourceDir" ;
            trm:post    "sourceDir" .
  #  t:pp2   trm:pre     "filename" ;
   #         trm:post    "filename"  .
 
t:entryRawPrep a trm:ReMap ;
    trm:rename (t:er1 t:er3) . 
   t:er1   trm:pre     "targetFilename" ;
            trm:post    "filepath" . 
    t:er3   trm:pre     "content" ;
            trm:post    "contentBlocks.content" .

t:entryPagePrep a trm:ReMap ;
    trm:rename (t:ppp1) . 
    t:ppp1   trm:pre     "content" ;
            trm:post    "contentBlocks.content" .

================
File: applications/postcraft-previous/transmission.ttl
================
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix trm: <http://purl.org/stuff/transmission/> . # TODO make plural
@prefix : <http://hyperdata.it/transmissions/> . # for custom terms & instances - TODO make one @services s: 

#############################################################
# insert into pipe for debugging
:DE a :DeadEnd . # ends the current pipe quietly
:H  a :Halt . # kills everything 
:SM a :ShowMessage . # verbose report, continues pipe
:N  a :NOP . # no operation (except for showing stage in pipe)
:UF a :Unfork . # collapses all pipes but one 
#############################################################

:postTemplating a trm:Pipeline ;
    trm:pipe (:s00 :s05 :s10 :s11 :s12 :s20  :s30 :s40  :s50 :s60 :s70 :s80 :s90 :s100 
                :s110 :s120 :s130 :s140 :s150  :s160 :s170 :s180) .

:s00 a :DatasetReader . # read the manifest
# trm:configKey trm:describe .

### Copy media dirs
:s05 a :FileCopy ;
    trm:configKey :mediaCopy .
    
### Copy layout dirs
:s10 a :FileCopy ;
    trm:configKey :cssCopy .

:s11 a :FileCopy ;
    trm:configKey :jsCopy .

:s12 a :FileCopy ;
    trm:configKey :fontsCopy .
#####################

:s20 a :ConfigMap ; ### use services.ttl? - defer to RemapContext as possible
    trm:configKey :markdownToRawPosts .

:s30 a :FileReader ; # the template for raw entry content
    trm:describe trm:all .

:s40 a :RemapContext ;
    trm:configKey :walkPrep .

:s50 a :DirWalker . # automatically forks

:s60 a :FileReader . # the markdown content

:s70 a :PostcraftPrep . # set up title, filenames etc

:s80 a :MarkdownToHTML . 

:s90 a :RemapContext ;
   trm:configKey :entryRawPrep .

 :s100 a :Templater .

:s110 a :FileWriter .

############### entryContentToEntryPage
:s120 a :EntryContentToPagePrep .
#:s12 a :RemapContext ;
 #  trm:configKey :entryPagePrep .

:s130 a :Templater .

:s140 a :FileWriter .

#######################
:s150  a :Unfork .

:s160 a :FrontPagePrep . 

:s170 a :Templater .

:s180 a :FileWriter .

================
File: applications/string-pipeline/processors-config.ttl
================
### NOT USED

@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix dc: <http://purl.org/dc/terms/> .
@prefix trm: <http://purl.org/stuff/transmission/> .
@prefix : <http://hyperdata.it/transmissions/> . # for custom terms & instances

:StringPipeline dc:title "Hello" .

================
File: applications/string-pipeline/transmissions.ttl
================
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix trm: <http://purl.org/stuff/transmission/> .
@prefix : <http://hyperdata.it/transmissions/> . # for custom terms & instances

:stringpipe a trm:Pipeline ;
    trm:pipe (:s1 :s2 :s3 :s4) .

:s1 a :StringSource .
:s2 a :AppendProcess .
:s3 a :AppendProcess .
:s4 a :StringSink .

================
File: applications/test_fork/about.md
================
# Test Fork/Unfork

```
./run test_fork | grep 's2 a NOP'
```

should show the number of forks + 1 (for `message.done`)

```
./run test_fork | grep s1.s2.s10.s11.s12.s13
```

should show just one

================
File: applications/test_fork/processors-config.ttl
================
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix trm: <http://purl.org/stuff/transmission/> .
# @prefix fs: <http://purl.org/stuff/filesystem/> .
@prefix t: <http://hyperdata.it/transmissions/> . # for custom terms & instances

t:dirWalkerPosts a trm:ServiceConfig ;
    trm:key t:files .

t:postTemplateMap a trm:ReMap ;
   trm:rename (t:rn1) . # consider using blank nodes
     t:rn1    trm:pre     "content" ;
            trm:post    "template"  .

t:postSaver a trm:ReMap ;
    trm:rename (t:rn2) . 
    t:rn2   trm:pre     "targetFilename" ;
            trm:post    "filename" .

================
File: applications/test_fork/transmissions.ttl
================
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix trm: <http://purl.org/stuff/transmission/> . # TODO make plural
@prefix : <http://hyperdata.it/transmissions/> . # for custom terms & instances - TODO make one @services s: 

#############################################################
# insert into pipe for debugging
:DE a :DeadEnd . # ends the current pipe quietly
:H  a :Halt . # kills everything 
:SC a :ShowConfig . # verbose report, continues pipe
:SM a :ShowMessage . # verbose report, continues pipe
:N  a :NOP . # no operation (except for showing stage in pipe)
:UF a :Unfork . # collapses all pipes but one 
#############################################################

:test_fork a :Transmission ;
   trm:contains :pipeA .

:pipeA a trm:Pipeline ;
trm:pipe (:p10 :SM ) .

:p10 a :Fork .

# :s10 a :Unfork .
:s11 a :NOP .

================
File: applications/test_multi-pipe/processors-config.ttl
================
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix trm: <http://purl.org/stuff/transmission/> .
# @prefix fs: <http://purl.org/stuff/filesystem/> .
@prefix t: <http://hyperdata.it/transmissions/> . # for custom terms & instances

t:dirWalkerPosts a trm:ServiceConfig ;
    trm:key t:files .

t:postTemplateMap a trm:ReMap ;
   trm:rename (t:rn1) . # consider using blank nodes
     t:rn1    trm:pre     "content" ;
            trm:post    "template"  .

t:postSaver a trm:ReMap ;
    trm:rename (t:rn2) . 
    t:rn2   trm:pre     "targetFilename" ;
            trm:post    "filename" .

================
File: applications/test_multi-pipe/transmissions.ttl
================
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix trm: <http://purl.org/stuff/transmission/> . # TODO make plural
@prefix : <http://hyperdata.it/transmissions/> . # for custom terms & instances - TODO make one @services s: 

:test_multi-pipes a :Transmission ;
   trm:contains :pipeA, :pipeB, :pipeC .

:pipeA a trm:Pipeline ;
trm:pipe (:s1 :s2 :s3 ) .

:pipeB  a trm:Pipeline ;
 trm:pipe (:s3 :s104 :s105) .

:pipeC a trm:Pipeline ;
trm:pipe (:s3 :s204 :s205) .

# :postcraft a trm:Pipeline ;

:s1 a :NOP .
:s2 a :NOP .
:s3 a :NOP .

:s104 a :NOP .
:s105 a :NOP .

:s204 a :NOP .
:s205 a :ShowTransmission .

================
File: applications/two-transmissions/processors-config.ttl
================
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix trm: <http://purl.org/stuff/transmission/> .
@prefix t: <http://hyperdata.it/transmissions/> .

#t:copyOneToSingleEmpty a trm:ServiceConfig ;
 #   trm:key t:copyOneToSingleEmpty ;
  #  trm:source "data/start/one.txt" ;
   # trm:destination "data/single-empty/one.txt" .

t:copyOneToSingleEmpty a trm:ServiceConfig ;
    trm:key t:copyOneToSingleEmpty ;
    trm:source "data/start/one.txt" ;
    trm:destination "data/single-empty/one.txt" .

t:copySingleEmptyToSingleFull a trm:ServiceConfig ;
    trm:key t:copySingleEmptyToSingleFull ;
    trm:source "data/single-empty/one.txt" ;
    trm:destination "data/single-full/one.txt" .

t:removeSingleEmpty a trm:ServiceConfig ;
    trm:key t:removeSingleEmpty ;
    trm:target "data/single-empty/one.txt" .

t:copyStartToSeveralEmpty a trm:ServiceConfig ;
    trm:key t:copyStartToSeveralEmpty ;
    trm:source "data/start" ;
    trm:destination "data/several-empty" .

t:copySeveralEmptyToSeveralFull a trm:ServiceConfig ;
    trm:key t:copySeveralEmptyToSeveralFull ;
    trm:source "data/several-empty" ;
    trm:destination "data/several-full" .

t:removeSeveralEmpty a trm:ServiceConfig ;
    trm:key t:removeSeveralEmpty ;
    trm:target "data/several-empty" .

================
File: applications/two-transmissions/transmissions.ttl
================
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix trm: <http://purl.org/stuff/transmission/> .
@prefix : <http://hyperdata.it/transmissions/> .

#############################################################
# insert into pipe for debugging
:DE a :DeadEnd . # ends the current pipe quietly
:H  a :Halt . # kills everything 
:SM a :ShowMessage . # verbose report, continues pipe
:N  a :NOP . # no operation (except for showing stage in pipe)
:UF a :Unfork . # collapses all pipes but one 
#############################################################

:transmission_one a trm:Pipeline ;
    trm:pipe (:a1 :a2) .

:a1 a :NOP .

:a2 a :NOP .

:transmission_two a trm:Pipeline ;
    trm:pipe (:b1 :b2 :b3) .

:b1 a :NOP .

:b2 a :NOP .

:b3 a :NOP .

================
File: engine/AbstractProcessorFactory.js
================
import logger from '../utils/Logger.js'
import ns from '../utils/ns.js'
import SystemProcessorsFactory from '../processors/system/SystemProcessorsFactory.js'
import TestProcessorsFactory from '../processors/test/TestProcessorsFactory.js'
import FsProcessorsFactory from '../processors/fs/FsProcessorsFactory.js'
import MarkupProcessorsFactory from '../processors/markup/MarkupProcessorsFactory.js'
import UtilProcessorsFactory from '../processors/util/UtilProcessorsFactory.js'
import TextProcessorsFactory from '../processors/text/TextProcessorsFactory.js'
import ProtocolsProcessorsFactory from '../processors/protocols/ProtocolsProcessorsFactory.js'
import RDFProcessorsFactory from '../processors/rdf/RDFProcessorsFactory.js'
import PostcraftProcessorsFactory from '../processors/postcraft/PostcraftProcessorsFactory.js'
class AbstractProcessorFactory {
    static createProcessor(type, config) {
        var processor = TestProcessorsFactory.createProcessor(type, config)
        if (processor) return processor
        var processor = UtilProcessorsFactory.createProcessor(type, config)
        if (processor) return processor
        processor = FsProcessorsFactory.createProcessor(type, config)
        if (processor) return processor
        processor = MarkupProcessorsFactory.createProcessor(type, config)
        if (processor) return processor
        processor = TextProcessorsFactory.createProcessor(type, config)
        if (processor) return processor
        processor = ProtocolsProcessorsFactory.createProcessor(type, config)
        if (processor) return processor
        processor = RDFProcessorsFactory.createProcessor(type, config)
        if (processor) return processor
        processor = PostcraftProcessorsFactory.createProcessor(type, config)
        if (processor) return processor
        processor = SystemProcessorsFactory.createProcessor(type, config)
        if (processor) return processor
        throw new Error("Unknown processor type: " + type.value)
    }
}
export default AbstractProcessorFactory

================
File: engine/Connector.js
================
import { EventEmitter } from 'events'
import logger from '../utils/Logger.js'
import footpath from '../utils/footpath.js'
class Connector extends EventEmitter {
    constructor(fromName, toName) {
        super();
        this.fromName = fromName
        this.toName = toName
    }
    connect(processors) {
        let fromProcessor = processors[this.fromName]
        let toProcessor = processors[this.toName]
        fromProcessor.on('message', (message) => {
            var tags = ''
            //     if (toProcessor.message) {
            tags = ' (' + fromProcessor.message.tags + ') '
            toProcessor.tags = tags
            const thisTag = footpath.urlLastPart(this.toName)
            logger.log("| Running : " + tags + thisTag + " a " + toProcessor.constructor.name)
            toProcessor.receive(message)
        })
    }
}
export default Connector

================
File: engine/Transmission.js
================
import logger from '../utils/Logger.js'
import Connector from './Connector.js'
class Transmission {
  constructor() {
    this.processors = {}
    this.connectors = []
  }
  register(processorName, instance) {
    this.processors[processorName] = instance
  }
  get(processorName) {
    return this.processors[processorName]
  }
  connect(fromProcessorName, toProcessorName) {
    let connector = new Connector(fromProcessorName, toProcessorName)
    this.connectors.push(connector)
    connector.connect(this.processors)
  }
  async execute(message) {
    logger.log('\n+ ***** Execute Transmission : ' + this.label + ' <' + this.id + '>')
    const processorName = this.connectors[0]?.fromName || Object.keys(this.processors)[0]
    let processor = this.get(processorName)
    if (processor) {
      logger.log("| Running : " + processorName + " a " + processor.constructor.name)
      await processor.receive(message)
    } else {
      logger.error("No valid processor found to execute")
    }
  }
  toString() {
    let description = 'Transmission Structure:\n';
    description += 'Processors:\n';
    Object.keys(this.processors).forEach(processorName => {
      description += `  - ${processorName}\n`;
    });
    description += 'Connectors:\n';
    this.connectors.forEach((connector, index) => {
      description += `  - Connector ${index + 1}: ${connector.fromName} -> ${connector.toName}\n`;
    })
    return description
  }
}
export default Transmission

================
File: engine/TransmissionBuilder.js
================
import path from 'path';
import { fileURLToPath } from 'url';
import rdf from 'rdf-ext'
import grapoi from 'grapoi'
import { fromFile, toFile } from 'rdf-utils-fs'
import ns from '../utils/ns.js'
import GrapoiHelpers from '../utils/GrapoiHelpers.js'
import logger from '../utils/Logger.js'
import AbstractProcessorFactory from "./AbstractProcessorFactory.js";
import Transmission from './Transmission.js'
class TransmissionBuilder {
  static async build(transmissionConfigFile, processorsConfigFile) {
    logger.info('\n+ ***** Load Config ******')
    logger.info('[Transmission : ' + transmissionConfigFile + ']')
    const transmissionConfig = await TransmissionBuilder.readDataset(transmissionConfigFile)
    logger.info('[Processors Config : ' + processorsConfigFile + ']')
    const processorsConfig = await TransmissionBuilder.readDataset(processorsConfigFile)
    const poi = grapoi({ dataset: transmissionConfig })
    const transmissions = []
    for (const q of poi.out(ns.rdf.type).quads()) {
      if (q.object.equals(ns.trm.Pipeline)) {
        const pipelineID = q.subject
        logger.debug('\n+ ' + pipelineID.value)
        transmissions.push(TransmissionBuilder.constructTransmission(transmissionConfig, pipelineID, processorsConfig))
      }
    }
    return transmissions
  }
  static constructTransmission(transmissionConfig, pipelineID, processorsConfig) {
    processorsConfig.whiteboard = {}
    const transmission = new Transmission()
    transmission.id = pipelineID.value
    transmission.label = ''
    const transPoi = grapoi({ dataset: transmissionConfig, term: pipelineID })
    // TODO has grapoi got a first/single property method?
    for (const quad of transPoi.out(ns.rdfs.label).quads()) {
      transmission.label = quad.object.value
    }
    logger.log('\n+ ***** Construct Transmission : ' + transmission.label + ' <' + transmission.id + '>')
    let previousName = "nothing"
    // grapoi probably has a built-in for all this
    const pipenodes = GrapoiHelpers.listToArray(transmissionConfig, pipelineID, ns.trm.pipe)
    this.createNodes(transmission, pipenodes, transmissionConfig, processorsConfig)
    this.connectNodes(transmission, pipenodes)
    return transmission
  }
  static createNodes(transmission, pipenodes, transmissionConfig, processorsConfig) {
    for (let i = 0; i < pipenodes.length; i++) {
      let node = pipenodes[i]
      let processorName = node.value
      if (!transmission.get(processorName)) { // may have been created in earlier pipeline
        let np = rdf.grapoi({ dataset: transmissionConfig, term: node })
        let processorType = np.out(ns.rdf.type).term
        let processorConfig = np.out(ns.trm.configKey).term
        try {
          let name = ns.getShortname(processorName)
          let type = ns.getShortname(processorType.value)
          logger.log("| Create processor :" + name + " of type :" + type)
          //  logger.log("| Create processor <" + processorName + "> of type <" + processorType.value + ">")
        } catch (err) {
          logger.error('-> Can\'t resolve ' + processorName + ' (check transmission.ttl for typos!)\n')
        }
        let processor = AbstractProcessorFactory.createProcessor(processorType, processorsConfig)
        processor.id = processorName
        processor.type = processorType
        processor.transmission = transmission
        if (processorConfig) {
          processor.configKey = processorConfig
        }
        transmission.register(processorName, processor)
      }
    }
  }
  static connectNodes(transmission, pipenodes) {
    for (let i = 0; i < pipenodes.length - 1; i++) {
      let leftNode = pipenodes[i]
      let leftProcessorName = leftNode.value
      let rightNode = pipenodes[i + 1]
      let rightProcessorName = rightNode.value
      logger.log("  > Connect #" + i + " [" + ns.getShortname(leftProcessorName) + "] => [" + ns.getShortname(rightProcessorName) + "]")
      transmission.connect(leftProcessorName, rightProcessorName)
    }
  }
  static async readDataset(filename) {
    const stream = fromFile(filename)
    const dataset = await rdf.dataset().import(stream)
    return dataset
  }
  static async writeDataset(dataset, filename) {
    await toFile(dataset.toStream(), filename)
  }
}
export default TransmissionBuilder

================
File: engine/WorkerPool.js
================
import { Worker } from 'worker_threads'
class WorkerPool {
    constructor(module, size) {
        this.workers = [];
        this.queue = [];
        for (let i = 0; i < size; i++) {
            const worker = new Worker(module);
            worker.on('message', () => {
                this.markWorkerIdle(worker);
            });
            this.workers.push({ worker, busy: false });
        }
    }
    enqueueMessage(message) {
        this.queue.push(message);
        this.dispatch();
    }
    dispatch() {
        const idleWorkerWrapper = this.workers.find(wrapper => !wrapper.busy);
        if (idleWorkerWrapper && this.queue.length) {
            const message = this.queue.shift();
            idleWorkerWrapper.busy = true;
            idleWorkerWrapper.worker.postMessage(message);
        }
    }
    markWorkerIdle(workerWrapper) {
        workerWrapper.busy = false;
        this.dispatch();
    }
}

================
File: processors/base/ProcessProcessor.js
================
import logger from '../../utils/Logger.js'
import Processor from './Processor.js'
class ProcessProcessor extends Processor {
    constructor(config) {
        super(config)
    }
    async execute(message) {
        this.emit('message', message)
    }
}
export default ProcessProcessor

================
File: processors/base/Processor.js
================
import logger from '../../utils/Logger.js'
import { EventEmitter } from 'events'
import rdf from 'rdf-ext'
import grapoi from 'grapoi'
import ns from '../../utils/ns.js'
import footpath from '../../utils/footpath.js'
class Processor extends EventEmitter {
    constructor(config) {
        super()
        this.config = config
        this.messageQueue = []
        this.processing = false
        this.done = false
    }
    preProcess(message) {
        return
        const processorPoi = rdf.grapoi({ dataset: this.config, term: this.configKey })
        logger.log('this.configKey = ' + this.configKey.value)
        logger.poi(processorPoi)
        logger.log('describe Desc')
        if (this.configKey.value === ns.trm.describe.value) {
            this.describe()
        }
    }
    describe() {
        logger.log('describe')
        const inputs = this.getInputKeys()
        const outputs = this.getOutputKeys()
        for (var input of inputs) {
            logger.log('input = ' + input)
            logger.log(this.message[input] + ' = ' + this.message[input])
        }
        for (var output of outputs) {
            logger.log('output = ' + output)
            logger.log(this.message[output] + ' = ' + this.message[output])
        }
    }
    getMyConfigNode() {
        const dataset = this.config
        const configNode = grapoi({ dataset, term: this.configKey }).in()
        return configNode.term
    }
    getMyPoi() {
        const dataset = this.config
        const myConfigNode = this.getMyConfigNode()
        const poi = grapoi({ dataset: dataset, term: myConfigNode })
        return poi
    }
    async addPropertyToMyConfig(predicate, value) {
        logger.log('addPropertyToMyConfig predicate = ' + predicate)
        logger.log('addPropertyToMyConfig value = ' + value)
        const myConfigNode = this.getMyConfigNode()
        const s = myConfigNode.value
        logger.log('addPropertyToMyConfig  myConfigNode.value = ' + myConfigNode.value)
        const dataset = this.config
        dataset.add(myConfigNode, predicate, value)
        this.config = dataset
    }
    showMyConfig() {
        const poi = this.getMyPoi()
        logger.log('POI = ')
        logger.poi(poi)
    }
    getPropertyFromMyConfig(property) {
        const poi = this.getMyPoi()
        try {
            return poi.out(property).term.value
        } catch (err) {
            logger.debug('property not defined : ' + property)
            return rdf.literal('undefined')
        }
    }
    async deletePropertyFromMyConfig(predicate, value) {
        const myConfigNode = this.getMyConfigNode()
        const s = myConfigNode.value
        logger.log('DELETING FROM ' + s)
        const dataset = this.config
        dataset.delete(myConfigNode, predicate, value)
        this.config = dataset
    }
    async receive(message) {
        await this.enqueue(message)
    }
    async enqueue(message) {
        this.messageQueue.push({ message })
        if (!this.processing) {
            this.executeQueue()
        }
    }
    async handle(message) {
        this.emit('message', message)
        return message
    }
    async executeQueue() {
        this.processing = true
        while (this.messageQueue.length > 0) {
            let { message } = this.messageQueue.shift()
            message = structuredClone(message)
            this.message = message
            this.addTag(message)
            await this.execute(message)
        }
        this.processing = false
    }
    addTag(message) {
        const tag = this.getTag()
        if (!message.tags) {
            message.tags = tag
            return
        }
        message.tags = message.tags + '.' + tag
    }
    getTag() {
        if (!this.id) {
            return 'no id'
        }
        return footpath.urlLastPart(this.id)
    }
    async execute(message) {
        throw new Error('execute method not implemented')
    }
    async doEmit(message) {
        this.emit(message)
    }
}
export default Processor

================
File: processors/base/SinkProcessor.js
================
import Processor from './Processor.js'
class SinkProcessor extends Processor {
    constructor(config) {
        super(config)
    }
    async execute(message) {
    }
}
export default SinkProcessor

================
File: processors/base/SourceProcessor.js
================
import Processor from './Processor.js'
class SourceProcessor extends Processor {
    constructor(config) {
        super(config);
    }
}
export default SourceProcessor

================
File: processors/fs/DirWalker.js
================
import { readdir } from 'fs/promises'
import { join, extname } from 'path'
import grapoi from 'grapoi'
import logger from '../../utils/Logger.js'
import SourceProcessor from '../base/SourceProcessor.js'
class DirWalker extends SourceProcessor {
    constructor(config) {
        super(config)
        const dataset = this.config
        const poi = grapoi({ dataset })
        this.includeExtensions = ['.md']
        this.excludePrefixes = ['_']
    }
    async execute(message) {
        logger.setLogLevel('info')
        logger.debug('DirWalker.execute')
        await this.emitThem(message)
        message.done = true
        this.emit('message', message)
    }
    async emitThem(message) {
        message.counter = 0
        message.slugs = []
        message.done = false
        const dirPath = join(message.rootDir, message.sourceDir)
        logger.debug('DirWalker, dirPath = ' + dirPath)
        const entries = await readdir(dirPath, { withFileTypes: true })
        for (const entry of entries) {
            const fullPath = join(dirPath, entry.name)
            if (entry.isDirectory()) {
                await this.execute(entry.name, message)
            } else {
                logger.debug('DirWalker, entry.name = ' + entry.name)
                const includeExtension = this.includeExtensions.includes(extname(entry.name))
                const prefix = entry.name.charAt(0)
                const excludePrefix = this.excludePrefixes.includes(prefix)
                if (!excludePrefix && includeExtension) {
                    message.filename = entry.name
                    message.filepath = message.sourceDir + '/' + entry.name
                    const slug = this.extractSlug(message.filename)
                    message.slugs.push(slug)
                    message.done = false
                    message.counter = message.counter + 1
                    const messageClone = structuredClone(message)
                    this.emit('message', messageClone)
                }
            }
        }
    }
    extractSlug(filepath) {
        var slug = filepath
        if (slug.includes('.')) {
            slug = slug.substr(0, slug.lastIndexOf("."))
        }
        return slug
    }
}
export default DirWalker

================
File: processors/fs/FileCopy.js
================

import { copyFile, mkdir, readdir, stat } from 'node:fs/promises'
import path from 'path'
import logger from '../../utils/Logger.js'
import ns from '../../utils/ns.js'
import Processor from '../base/Processor.js'
class FileCopy extends Processor {
    constructor(config) {
        super(config)
    }
    async execute(message) {
        if (message.rootDir == "") {
            message.rootDir = message.applicationRootDir
        }
        logger.debug("message.rootDir = " + message.rootDir)
        var source, destination
        if (this.configKey === 'undefined') {
            logger.debug('FileCopy: using message.source and message.destination')
            source = message.source
            destination = message.destination
        } else {
            logger.debug(`FileCopy: using configKey ${this.configKey.value}`)
            source = this.getPropertyFromMyConfig(ns.trm.source)
            destination = this.getPropertyFromMyConfig(ns.trm.destination)
            source = path.join(message.rootDir, source)
            destination = path.join(message.rootDir, destination)
        }
        logger.debug(`Source: ${source}`)
        logger.debug(`Destination: ${destination}`)
        try {
            await this.ensureDirectoryExists(path.dirname(destination))
            const sourceStat = await stat(source)
            if (sourceStat.isFile()) {
                logger.debug(`Copying file from ${source} to ${destination}`)
                await copyFile(source, destination)
            } else if (sourceStat.isDirectory()) {
                logger.debug(`Copying directory from ${source} to ${destination}`)
                await this.copyDirectory(source, destination)
            }
        } catch (err) {
            logger.error(`Error in FileCopy: ${err.message}`)
            logger.error(`Source: ${source}`)
            logger.error(`Destination: ${destination}`)
        }
        this.emit('message', message)
    }
    async ensureDirectoryExists(dirPath) {
        logger.debug(`Ensuring directory exists: ${dirPath}`)
        try {
            await mkdir(dirPath, { recursive: true })
            logger.debug(`Directory created/ensured: ${dirPath}`)
        } catch (err) {
            logger.debug(`Error creating directory ${dirPath}: ${err.message}`)
            throw err
        }
    }
    async copyDirectory(source, destination) {
        logger.debug(`Copying directory: ${source} to ${destination}`)
        try {
            await this.ensureDirectoryExists(destination)
            const entries = await readdir(source, { withFileTypes: true })
            for (const entry of entries) {
                const srcPath = path.join(source, entry.name)
                const destPath = path.join(destination, entry.name)
                logger.debug(`Processing: ${srcPath} to ${destPath}`)
                if (entry.isDirectory()) {
                    await this.copyDirectory(srcPath, destPath)
                } else {
                    await copyFile(srcPath, destPath)
                    logger.debug(`File copied: ${srcPath} to ${destPath}`)
                }
            }
        } catch (err) {
            logger.debug(`Error in copyDirectory: ${err.message}`)
            throw err
        }
    }
}
export default FileCopy

================
File: processors/fs/FileReader.js
================
import { readFile } from 'node:fs/promises'
import path from 'path'
import logger from '../../utils/Logger.js'
import ns from '../../utils/ns.js'
import SourceProcessor from '../base/SourceProcessor.js'
class FileReader extends SourceProcessor {
    constructor(config) {
        super(config)
    }
    async execute(message) {
        this.preProcess(message)
        var filepath = message.filepath
        if (!filepath) {
            logger.debug(`FileReader: using configKey ${this.configKey.value}`)
            filepath = this.getPropertyFromMyConfig(ns.trm.messageFile)
            logger.log(' - filepath from config : ' + filepath)
        }
        logger.log(' - FileReader reading filepath : ' + filepath)
        var f = path.join(message.dataDir, filepath)
        if (message.rootDir) {
            f = path.join(message.rootDir, filepath)
        }
        const mediaType = this.getPropertyFromMyConfig(ns.trm.mediaType)
        logger.debug('in FileReader, mediaType = ' + mediaType)
        try {
            message.content = (await readFile(f)).toString()
            if (mediaType === 'application/json') {
                message.fromfile = JSON.parse(message.content)
            }
            this.emit('message', message)
        } catch (err) {
            logger.error("FileReader.execute error : " + err.message)
        }
    }
}
export default FileReader

================
File: processors/fs/FileRemove.js
================

import { unlink, readdir, stat, rm } from 'node:fs/promises'
import path from 'path'
import ns from '../../utils/ns.js'
import logger from '../../utils/Logger.js'
import Processor from '../base/Processor.js'
class FileRemove extends Processor {
    constructor(config) {
        super(config)
    }
    async execute(message) {
        logger.setLogLevel('info')
        this.ignoreDotfiles = true
        var target
        if (this.configKey === 'undefined') {
            logger.debug('FileRemove no configKey from transmission, using message.target')
            target = message.target
        } else {
            logger.debug('FileRemove this.configKey = ' + this.configKey.value)
            target = this.getPropertyFromMyConfig(ns.trm.target)
            target = path.join(message.rootDir, target)
        }
        logger.debug('FileRemove, target = ' + target)
        try {
            const removeStat = await stat(target)
            if (removeStat.isFile()) {
                await this.removeFile(target)
            } else if (removeStat.isDirectory()) {
                await this.removeDirectoryContents(target)
            }
        } catch (err) {
            logger.debug('FileRemove, target stat caused err : ' + target)
        }
        this.emit('message', message)
    }
    async removeFile(filePath) {
        await unlink(filePath)
    }
    async removeDirectoryContents(dirPath) {
        logger.debug('FileRemove, dirPath = ' + dirPath)
        const entries = await readdir(dirPath, { withFileTypes: true })
        for (const entry of entries) {
            if (this.ignoreDotfiles && (entry.name.charAt(0) === ".")) {
                continue
            }
            const entryPath = path.join(dirPath, entry.name)
            if (entry.isDirectory()) {
                await this.removeDirectoryContents(entryPath)
            } else {
                await unlink(entryPath)
            }
        }
    }
}
export default FileRemove

================
File: processors/fs/FileWriter.js
================
import { writeFile } from 'node:fs/promises'
import { dirname, join } from 'node:path'
import { mkdir, mkdirSync } from 'node:fs'
import logger from '../../utils/Logger.js'
import SinkProcessor from '../base/SinkProcessor.js'
class FileWriter extends SinkProcessor {
    constructor(config) {
        super(config)
    }
    getInputKeys() {
        return ['filepath, content']
    }
    async execute(message) {
        this.preProcess()
        var filepath = message.filepath
        const content = message.content
        logger.debug("Filewriter.targetFile = " + filepath)
        const dirName = dirname(filepath)
        try {
            await this.mkdirs(dirName)
            logger.log(' - FileWriter writing : ' + filepath)
            await writeFile(filepath, content)
        } catch (err) {
            logger.error("FileWriter.execute error : " + err.message)
        }
        this.emit('message', message)
    }
    async mkdirs(dir) {
        if (!dir) return;
        try {
            mkdir(dir, { recursive: true }, (error) => { })
        } catch (error) {
            console.error(error);
        }
    }
}
export default FileWriter

================
File: processors/fs/FsProcessorsFactory.js
================
import logger from '../../utils/Logger.js'
import ns from '../../utils/ns.js'
import DirWalker from './DirWalker.js'
import FileReader from './FileReader.js'
import FileWriter from './FileWriter.js'
import FileCopy from './FileCopy.js'
import FileRemove from './FileRemove.js'
class FsProcessorsFactory {
    static createProcessor(type, config) {
        if (type.equals(ns.t.DirWalker)) {
            return new DirWalker(config)
        }
        if (type.equals(ns.t.FileReader)) {
            return new FileReader(config)
        }
        if (type.equals(ns.t.FileWriter)) {
            return new FileWriter(config)
        }
        if (type.equals(ns.t.FileCopy)) {
            return new FileCopy(config)
        }
        if (type.equals(ns.t.FileRemove)) {
            return new FileRemove(config)
        }
        return false
    }
}
export default FsProcessorsFactory

================
File: processors/markup/LinkFinder.js
================
import * as cheerio from 'cheerio'
import logger from '../../utils/Logger.js'
import ProcessProcessor from '../base/ProcessProcessor.js'
class LinkFinder extends ProcessProcessor {
    async execute(message) {
        await this.extractLinks(message)
        if (data === '~~done~~') {
            logger.log('LF DONE*****************')
            this.emitLocal('message', '~~done~~', message)
            return
        }
    }
    relocate(filename, extension) {
        const split = filename.split('.').slice(0, -1)
        return split.join('.') + extension
    }
    async extractLinks(htmlContent, message) {
        const $ = cheerio.load(htmlContent)
        let label = ''
        $('a, h1, h2, h3, h4, h5, h6').each((_, element) => {
            const tagName = element.tagName.toLowerCase()
            if (tagName.startsWith('h')) {
                const level = tagName.substring(1)
                const headerText = $(element).text()
                label = `\n\n${'#'.repeat(parseInt(level))} ${headerText}\n`;
            } else if (tagName === 'a') {
                const linkText = $(element).text()
                let href = $(element).attr('href')
                if (!href || href.startsWith('#')) return
                if (href && !href.includes('://')) {
                    const baseURL = message.sourceURL
                    href = new URL(href, baseURL).toString();
                }
                label = `\n[${linkText}](${href})`
            }
            message.label = label
            this.emit('message', message)
        })
    }
}
export default LinkFinder

================
File: processors/markup/MarkdownToHTML.js
================
import logger from '../../utils/Logger.js'
import ProcessProcessor from '../base/ProcessProcessor.js'
import { marked } from 'marked'
import markedFootnote from 'marked-footnote'
import markedCodeFormat from 'marked-code-format'
class MarkdownToHTML extends ProcessProcessor {
    async execute(message) {
        const input = message.content
        message.content = await
            marked
                .use(markedFootnote())
                .use(
                    markedCodeFormat({
                    })
                )
                .parse(input.toString())
        this.emit('message', message)
    }
}
export default MarkdownToHTML

================
File: processors/markup/MarkupProcessorsFactory.js
================
import logger from '../../utils/Logger.js'
import ns from '../../utils/ns.js'
import MetadataExtractor from './MetadataExtractor.js'
import LinkFinder from './LinkFinder.js'
import MarkdownToHTML from './MarkdownToHTML.js'
class MarkupProcessorsFactory {
    static createProcessor(type, config) {
        if (type.equals(ns.t.MetadataExtractor)) {
            return new MetadataExtractor(config)
        }
        if (type.equals(ns.t.MarkdownToHTML)) {
            return new MarkdownToHTML(config)
        }
        if (type.equals(ns.t.LinkFinder)) {
            return new LinkFinder(config)
        }
        return false
    }
}
export default MarkupProcessorsFactory

================
File: processors/markup/MetadataExtractor.js
================
import * as cheerio from 'cheerio'
import logger from '../../utils/Logger.js'
import ProcessProcessor from '../base/ProcessProcessor.js'
class MetadataExtractor extends ProcessProcessor {
    async execute(message) {
        const filename = data.filename
        const content = data.content
        logger.debug("MetadataExtractor input file : " + filename)
        const targetFilename = this.relocate(filename)
        logger.debug("MetadataExtractor outputfile : " + targetFilename)
        const jsonData = this.convertEmailToJSON(content)
        const jsonString = JSON.stringify(jsonData)
        const output = { filename: targetFilename, content: jsonString }
        this.emit('message', output, message)
    }
    relocate(filename) {
        const split = filename.split('.').slice(0, -1)
        var newFileName = split.join('.') + '.json'
        return newFileName
    }
    convertEmailToJSON(htmlContent) {
        const $ = cheerio.load(htmlContent);
        var subjectLine = $('H1').text().trim()
        var fromName = $('B').first().text().trim()
        var nextMessageLink = $('LINK[REL="Next"]').attr('HREF')
        var previousMessageLink = $('LINK[REL="Previous"]').attr('HREF')
        var messageText = $('PRE').text().trim()
        messageText = this.pruneContent(messageText)
        const jsonResult = {
            subjectLine: subjectLine,
            fromName: fromName,
            nextMessageLink: nextMessageLink,
            previousMessageLink: previousMessageLink,
            messageText: messageText
        }
        return jsonResult;
    }
    pruneContent(content) {
        const regex1 = /(^|\n).*?:\n>/s
        content = content.replace(regex1, '$1')
        const regex2 = /\n>.*?\n/g;
        content = content.replace(regex2, '\n')
        return content
    }
}
export default MetadataExtractor

================
File: processors/postcraft/EntryContentToPagePrep.js
================
import ns from '../../utils/ns.js'
import rdf from 'rdf-ext'
import grapoi from 'grapoi'
import footpath from '../../utils/footpath.js'
import logger from '../../utils/Logger.js'
import ProcessProcessor from '../base/ProcessProcessor.js'
class EntryContentToPagePrep extends ProcessProcessor {
  constructor(config) {
    super(config)
  }
  async execute(message) {
    if (message.done) {
      this.emit('message', message)
      return
    }
    message.templateFilename = message.rootDir + '/' + message.entryContentToPage.templateFilename
    message.template = false
    message.contentBlocks.content = message.content
    message.filepath = message.rootDir + '/' + message.entryContentToPage.targetDir + '/' + message.slug + '.html'
    this.emit('message', message)
  }
}
export default EntryContentToPagePrep

================
File: processors/postcraft/FrontPagePrep copy.js
================
import ns from '../../utils/ns.js'
import rdf from 'rdf-ext'
import grapoi from 'grapoi'
import footpath from '../../utils/footpath.js'
import logger from '../../utils/Logger.js'
import ProcessProcessor from '../base/ProcessProcessor.js'
import { readFile } from 'node:fs/promises'
class FrontPagePrep extends ProcessProcessor {
  constructor(config) {
    super(config)
  }
  async execute(message) {
    logger.setLogLevel('debug')
    try {
      message.templateFilename = message.rootDir + '/' + message.indexPage.templateFilename
      logger.debug('Template = ' + message.templateFilename)
      const rawEntryPaths = this.resolveRawEntryPaths(message)
      message.content = ''
      // TODO move this out to template and/or separate processors
      //   for (var f of rawEntryPaths) {
      //   const n = rawEntryPaths.length
      const entryCount = 5
      //    for (var i = entryCount - 1; i >= 0; i--) {
      for (var i = 0; i < entryCount; i++) {
        const rawEntryPath = rawEntryPaths.pop()
        logger.debug('rawEntryPath = ' + rawEntryPath)
        message.content += (await readFile(rawEntryPath)).toString()
      }
      // needed?
      message.contentBlocks.content = message.content
      //  "indexPage": {
      //  "filepath": "public/blog/index.html",
      message.filepath = message.rootDir + '/' + message.indexPage.filepath
      // message.rootDir + '/' + message.entryContentToPage.targetDir + '/' + message.slug + '.html'
      this.emit('message', message)
    } catch (err) {
      logger.error('Error in FrontPagePrep')
      logger.error(err)
    }
  }
  resolveRawEntryPaths(message) {
    var paths = []
    const slugs = message.slugs
    const entryCount = slugs.length
    var path
    for (let i = 0; i < entryCount; i++) {
      var path = slugs[i]
      if (!path) break
      path = message.rootDir + '/' + message.entryContentMeta.targetDir + '/' + path + '.html'
      paths.push(path)
    }
    return paths
  }
}
export default FrontPagePrep

================
File: processors/postcraft/FrontPagePrep.js
================

import path from 'path'
import { readFile } from 'node:fs/promises'
import logger from '../../utils/Logger.js'
import ProcessProcessor from '../base/ProcessProcessor.js'
class FrontPagePrep extends ProcessProcessor {
  constructor(config) {
    super(config)
  }
  async execute(message) {
    try {
      message.templateFilename = message.rootDir + '/' + message.indexPage.templateFilename
      logger.debug('Template = ' + message.templateFilename)
      const rawEntryPaths = this.resolveRawEntryPaths(message)
      message.content = ''
      // TODO tidy up
      const entryCount = Math.min(5, rawEntryPaths.length) // Limit to 5 entries or less
      logger.debug('FrontPagePrep, entryCount = ' + entryCount)
      const rangeStart = rawEntryPaths.length - entryCount
      const rangeEnd = rawEntryPaths.length - 1
      //     for (let i = 0; i < entryCount; i++) {
      for (let i = rangeEnd; i >= rangeStart; i--) {
        logger.debug('FrontPagePrep, i = ' + entryCount)
        const rawEntryPath = rawEntryPaths[i]
        if (rawEntryPath) {
          message.content += await readFile(rawEntryPath, 'utf8')
        } else {
          logger.warn(`Skipping undefined entry path at index ${i}`)
        }
      }
      message.contentBlocks.content = message.content
      message.filepath = message.rootDir + '/' + message.indexPage.filepath
      this.emit('message', message)
    } catch (err) {
      logger.error('Error in FrontPagePrep')
      logger.error(err)
    }
  }
  resolveRawEntryPaths(message) {
    const paths = []
    const slugs = message.slugs || []
    const entryCount = slugs.length
    for (let i = 0; i < entryCount; i++) {
      const slug = slugs[i]
      if (slug) {
        const filePath = path.join(message.rootDir, message.entryContentMeta.targetDir, slug + '.html')
        paths.push(filePath)
      }
    }
    return paths
  }
}
export default FrontPagePrep

================
File: processors/postcraft/PostcraftDispatcher.js
================

import ns from '../../utils/ns.js'
import rdf from 'rdf-ext'
import grapoi from 'grapoi'
import footpath from '../../utils/footpath.js'
import logger from '../../utils/Logger.js'
import ProcessProcessor from '../base/ProcessProcessor.js'
class PostcraftDispatcher extends ProcessProcessor {
  constructor(config) {
    super(config)
  }
  async execute(message) {
    const postcraftConfig = message.dataset
    message.template = data.toString()
    logger.log('PostcraftDispatcherPostcraftDispatcherPostcraftDispatcher ' + data)
    const poi = grapoi({ dataset: postcraftConfig })
    for (const q of poi.out(ns.rdf.type).quads()) {
      if (q.object.equals(ns.pc.ContentGroup)) {
        await this.processContentGroup(message, q.subject)
      }
    }
  }
  async processContentGroup(message, contentGroupID) {
    const postcraftConfig = message.dataset
    const groupPoi = rdf.grapoi({ dataset: postcraftConfig, term: contentGroupID })
    const sourceDir = groupPoi.out(ns.fs.sourceDirectory).term.value
    const targetDir = groupPoi.out(ns.fs.targetDirectory).term.value
    const templateFilename = groupPoi.out(ns.pc.template).term.value
    message.sourceDir = sourceDir
    message.targetDir = targetDir
    message.templateFilename = templateFilename
    message.loadContext = 'template'
    this.emit('message', sourceDir, message)
  }
}
export default PostcraftDispatcher

================
File: processors/postcraft/PostcraftPrep.js
================
import path from 'path'
import logger from '../../utils/Logger.js';
import ProcessProcessor from '../base/ProcessProcessor.js'
class PostcraftPrep extends ProcessProcessor {
  constructor(config) {
    super(config)
  }
  async execute(message) {
    message.slug = this.extractSlug(message)
    message.targetFilename = this.extractTargetFilename(message)
    message.contentBlocks = {}
    message.contentBlocks.relURL = this.extractRelURL(message)
    message.contentBlocks.link = 'entries/' + message.contentBlocks.relURL
    message.contentBlocks.title = this.extractTitle(message)
    const { created, updated } = this.extractDates(message)
    message.contentBlocks.created = created
    message.contentBlocks.updated = updated
    this.emit('message', message)
  }
  extractSlug(message) {
    var slug = message.filename
    if (slug.includes('.')) {
      slug = slug.substr(0, slug.lastIndexOf("."))
    }
    return slug
  }
  extractTargetFilename(message) {
    return path.join(message.rootDir, message.entryContentMeta.targetDir, this.extractSlug(message) + '.html')
  }
  extractRelURL(message) {
    return this.extractSlug(message) + '.html'
  }
  extractDates(message) {
    const today = (new Date()).toISOString().split('T')[0]
    const dates = { created: today, updated: today }
    const nonExt = message.filename.split('.').slice(0, -1).join()
    const shreds = nonExt.split('_')
    if (Date.parse(shreds[0])) {
      dates.created = shreds[0]
    }
    return dates
  }
  extractTitle(message) {
    let title = 'Title'
    let match = message.content.toString().match(/^#(.*)$/m)
    let contentTitle = match ? match[1].trim() : null
    if (contentTitle) {
      title = contentTitle.replaceAll('#', '') // TODO make nicer
      return title
    }
    // derive from filename
    // eg. 2024-04-19_hello-postcraft.md
    try {
      const nonExt = message.filename.split('.').slice(0, -1).join()
      const shreds = nonExt.split('_')
      title = shreds[1].split('-')
        .map(word => word.charAt(0).toUpperCase() + word.slice(1))
        .join(' ');
    } catch (err) {
      title = message.filename
    }
    return title
  }
}
export default PostcraftPrep

================
File: processors/postcraft/PostcraftProcessorsFactory.js
================
import logger from '../../utils/Logger.js'
import ns from '../../utils/ns.js'
import PostcraftDispatcher from './PostcraftDispatcher.js'
import PostcraftPrep from './PostcraftPrep.js'
import EntryContentToPagePrep from './EntryContentToPagePrep.js'
import FrontPagePrep from './FrontPagePrep.js'
class PostcraftProcessorsFactory {
    static createProcessor(type, config) {
        if (type.equals(ns.t.PostcraftDispatcher)) {
            return new PostcraftDispatcher(config)
        }
        if (type.equals(ns.t.PostcraftPrep)) {
            return new PostcraftPrep(config)
        }
        if (type.equals(ns.t.EntryContentToPagePrep)) {
            return new EntryContentToPagePrep(config)
        }
        if (type.equals(ns.t.FrontPagePrep)) {
            return new FrontPagePrep(config)
        }
        return false
    }
}
export default PostcraftProcessorsFactory

================
File: processors/protocols/HttpGet.js
================
import axios from 'axios'
import grapoi from 'grapoi'
import ns from '../../utils/ns.js'
import footpath from '../../utils/footpath.js'
import logger from '../../utils/Logger.js'
import ProcessProcessor from '../base/ProcessProcessor.js'
class HttpGet extends ProcessProcessor {
    constructor(config) {
        super(config)
    }
    async execute(url, message) {
        if (url === '~~done~~') {
            logger.log('HG DONE*****************')
            this.emit('message', url, message)
            return
        }
        try {
            logger.log('HG GETTING*****************')
            const response = await axios.get(url)
            const content = response.data
            message.sourceURL = url
            this.emit('message', content, message)
        } catch (error) {
            logger.error("HttpGet.execute error\n" + error)
        }
    }
}
export default HttpGet

================
File: processors/protocols/ProtocolsProcessorsFactory.js
================
import logger from '../../utils/Logger.js'
import ns from '../../utils/ns.js'
import HttpGet from './HttpGet.js'
class ProtocolsProcessorsFactory {
    static createProcessor(type, config) {
        if (type.equals(ns.t.HttpGet)) {
            return new HttpGet(config)
        }
        return false
    }
}
export default ProtocolsProcessorsFactory

================
File: processors/rdf/ConfigMap.js
================

import ns from '../../utils/ns.js'
import rdf from 'rdf-ext'
import grapoi from 'grapoi'
import logger from '../../utils/Logger.js'
import ProcessProcessor from '../base/ProcessProcessor.js'
class ConfigMap extends ProcessProcessor {
  constructor(config) {
    super(config)
  }
  async execute(message) {
    logger.setLogLevel('debug')
    logger.debug(`ConfigMap, Using configKey ${this.configKey.value}`)
    const group = this.getPropertyFromMyConfig(ns.trm.group)
    const targetGroup = rdf.namedNode(group)
    logger.debug(`ConfigMap, group =  ${targetGroup}`)
    this.preProcess(message)
    const dataset = message.dataset
    const poi = grapoi({ dataset, factory: rdf })
    const quads = await poi.out(ns.rdf.type).quads()
    for (const q of quads) {
      const type = q.object
      if (type.equals(targetGroup)) {
        await this.processContentGroup(message, q.subject)
      }
    }
    this.emit('message', message)
  }
  async processContentGroup(message, contentGroupID) {
    logger.debug('contentGroupID = ' + contentGroupID.value)
    switch (contentGroupID.value) {
      case ns.t.PostContent.value:
        await this.markdownToEntryContent(message, contentGroupID)
        break
      case ns.t.PostPages.value:
        await this.entryContentToPostPage(message, contentGroupID)
        break
      case ns.t.IndexPage.value:
        await this.indexPage(message, contentGroupID)
        break
      default:
        logger.log('Group not found in dataset: ' + contentGroupID.value)
    }
  }
  async markdownToEntryContent(message, contentGroupID) {
    const postcraftConfig = message.dataset
    const groupPoi = rdf.grapoi({ dataset: postcraftConfig, term: contentGroupID })
    message.filepath = groupPoi.out(ns.pc.template).term.value
    message.template = '§§§ placeholer for debugging §§§'
    message.entryContentMeta = {
      sourceDir: groupPoi.out(ns.fs.sourceDirectory).term.value,
      targetDir: groupPoi.out(ns.fs.targetDirectory).term.value,
      templateFilename: groupPoi.out(ns.pc.template).term.value
    }
  }
  async entryContentToPostPage(message, contentGroupID) {
    const postcraftConfig = message.dataset
    const groupPoi = rdf.grapoi({ dataset: postcraftConfig, term: contentGroupID })
    message.entryContentToPage = {
      targetDir: groupPoi.out(ns.fs.targetDirectory).term.value,
      templateFilename: groupPoi.out(ns.pc.template).term.value
    }
  }
  async indexPage(message, contentGroupID) {
    const postcraftConfig = message.dataset
    const groupPoi = rdf.grapoi({ dataset: postcraftConfig, term: contentGroupID })
    message.indexPage = {
      filepath: groupPoi.out(ns.fs.filepath).term.value,
      templateFilename: groupPoi.out(ns.pc.template).term.value
    }
  }
}
export default ConfigMap

================
File: processors/rdf/DatasetReader.js
================

import rdf from 'rdf-ext'
import { fromFile } from 'rdf-utils-fs'
import SourceProcessor from '../base/SourceProcessor.js'
import logger from '../../utils/Logger.js'
class DatasetReader extends SourceProcessor {
    constructor(config) {
        super(config)
    }
    getInputKeys() {
        return ['sdfsdf']
    }
    getOutputKeys() {
        return ['sdfsdfsdfdataset']
    }
    async execute(message) {
        this.preProcess(message)
        var datasetName = 'dataset'
        var datasetFilename = message.rootDir + '/manifest.ttl'
        if (message.datasetFilename) {
            datasetFilename = message.datasetFilename
        }
        if (message.datasetName) {
            datasetName = message.datasetName
        }
        const stream = fromFile(datasetFilename)
        message[datasetName] = await rdf.dataset().import(stream)
        this.emit('message', message)
    }
}
export default DatasetReader

================
File: processors/rdf/RDFProcessorsFactory.js
================
import ns from '../../utils/ns.js'
import DatasetReader from './DatasetReader.js'
import ConfigMap from './ConfigMap.js'
class RDFProcessorsFactory {
    static createProcessor(type, config) {
        if (type.equals(ns.t.DatasetReader)) {
            return new DatasetReader(config)
        }
        if (type.equals(ns.t.ConfigMap)) {
            return new ConfigMap(config)
        }
        return false
    }
}
export default RDFProcessorsFactory

================
File: processors/system/EnvLoader.js
================
import 'dotenv/config'
import logger from '../../utils/Logger.js'
import Processor from '../base/Processor.js'
class EnvLoader extends Processor {
    constructor(config) {
        super(config)
    }
    async execute(message) {
        logger.setLogLevel('debug')
        this.config.whiteboard.env = process.env
        return super.handle(message)
    } catch(err) {
        logger.error("EnvLoader.execute error : " + err.message)
    }
}
export default EnvLoader

================
File: processors/system/SystemProcessorsFactory.js
================
import logger from '../../utils/Logger.js'
import ns from '../../utils/ns.js'
import EnvLoader from './EnvLoader.js'
class SystemsProcessorsFactory {
    static createProcessor(type, config) {
        if (type.equals(ns.t.EnvLoader)) {
            return new EnvLoader(config)
        }
        return false
    }
}
export default SystemsProcessorsFactory

================
File: processors/templates/ProcessorTemplate.js
================
import { readFile } from 'node:fs/promises'
import logger from '../../utils/Logger.js'
import Processor from '../base/Processor.js'
class ProcessorExample extends Processor {
    constructor(config) {
        super(config)
    }
    async execute(message) {
        logger.setLogLevel('debug')
        this.emit('message', message)
    } catch(err) {
        logger.error("ProcessorExample.execute error : " + err.message)
    }
}
export default ProcessorExample

================
File: processors/templates/TemplateProcessorsFactory.js
================
import logger from '../../utils/Logger.js'
import ns from '../../utils/ns.js'
import Processors from './ProcessorsTemplate.js'
class TemplateProcessorsFactory {
    static createProcessor(type, config) {
        if (type.equals(ns.t.ProcessorsTemplate)) {
            return new ProcessorsTemplate(config)
        }
        return false
    }
}
export default TemplateProcessorsFactory

================
File: processors/test/AppendProcess.js
================
import logger from '../../utils/Logger.js'
import ProcessProcessor from '../base/ProcessProcessor.js'
class AppendProcess extends ProcessProcessor {
    async execute(message) {
        logger.debug("AppendProcess data : " + message.content)
        message.content = message.content + " world"
        this.emit('message', message)
    }
}
export default AppendProcess

================
File: processors/test/FileSink.js
================
import path from 'path'
import { fileURLToPath } from 'url'
import { writeFile } from 'node:fs/promises';
import footpath from '../../utils/footpath.js'
import grapoi from 'grapoi'
import ns from '../../utils/ns.js'
import logger from '../../utils/Logger.js'
import SinkProcessor from '../base/SinkProcessor.js'
class FileSink extends SinkProcessor {
    constructor(config) {
        super(config)
        const dataset = this.config
        const poi = grapoi({ dataset })
        this.destinationFile = poi.out(ns.trm.destinationFile).value
    }
    async execute(message) {
        const toRootDir = '../../../'
        const dataDir = path.join(toRootDir, message.dataDir)
        const df = footpath.resolve(import.meta.url, dataDir, this.destinationFile)
        logger.debug("FileSink to = " + df)
        await writeFile(df, message.content)
        this.emit('message', message)
    }
}
export default FileSink

================
File: processors/test/FileSource.js
================
import path from 'path'
import { fileURLToPath } from 'url'
import { readFile } from 'node:fs/promises'
import footpath from '../../utils/footpath.js'
import rdf from 'rdf-ext'
import grapoi from 'grapoi'
import ns from '../../utils/ns.js'
import logger from '../../utils/Logger.js'
import SourceProcessor from '../base/SourceProcessor.js'
class FileSource extends SourceProcessor {
    constructor(config) {
        super(config)
        const dataset = this.config
        const poi = grapoi({ dataset })
        this.sourceFile = poi.out(ns.trm.sourceFile).value
    }
    async execute(message) {
        try {
            const toRootDir = '../../../'
            const dataDir = toRootDir + message.dataDir
            const sf = footpath.resolve(import.meta.url, dataDir, this.sourceFile)
            logger.debug('FileSource file : ' + sf)
            const contents = await readFile(sf, { encoding: 'utf8' })
            logger.debug('FileSource data : ' + contents)
            this.emit('message', { content: contents, ...message })
        } catch (err) {
            logger.error("FileSource.execute error : " + err.message)
        }
    }
}
export default FileSource

================
File: processors/test/StringSink.js
================
import logger from '../../utils/Logger.js'
import SinkProcessor from '../base/SinkProcessor.js'
class StringSink extends SinkProcessor {
    execute(message) {
        logger.log("\n\nStringSink outputs : \"" + data + "\"\n\n")
    }
}
export default StringSink

================
File: processors/test/StringSource.js
================
import SourceProcessor from '../base/SourceProcessor.js'
class StringSource extends SourceProcessor {
    constructor(config) {
        super(config)
    }
    async execute(message) {
        console.log("message = " + message)
        console.log("data = " + data)
        this.emit('message', message)
    }
}
export default StringSource

================
File: processors/test/TestProcessorsFactory.js
================
import logger from '../../utils/Logger.js'
import ns from '../../utils/ns.js'
import StringSource from './StringSource.js'
import StringSink from './StringSink.js'
import AppendProcess from './AppendProcess.js'
import FileSource from './FileSource.js'
import FileSink from './FileSink.js'
class TestProcessorsFactory {
    static createProcessor(type, config) {
        if (type.equals(ns.t.StringSource)) {
            return new StringSource(config)
        }
        if (type.equals(ns.t.StringSink)) {
            return new StringSink(config)
        }
        if (type.equals(ns.t.AppendProcess)) {
            return new AppendProcess(config)
        }
        if (type.equals(ns.t.FileSource)) {
            return new FileSource(config)
        }
        if (type.equals(ns.t.FileSink)) {
            return new FileSink(config)
        }
        return false
    }
}
export default TestProcessorsFactory

================
File: processors/text/LineReader.js
================
import { readFile } from 'node:fs/promises'
import grapoi from 'grapoi'
import ns from '../../utils/ns.js'
import footpath from '../../utils/footpath.js'
import logger from '../../utils/Logger.js'
import ProcessProcessor from '../base/ProcessProcessor.js'
class LineReader extends ProcessProcessor {
    constructor(config) {
        super(config)
    }
    async execute(message) {
        const text = data.toString()
        const lines = text.split('\n')
        for await (let line of lines) {
            if (line.trim() && !line.startsWith('#')) {
                logger.debug('Line = [[[' + line + ']]]')
                this.emit('message', line, message)
            }
        }
        this.emit('message', '~~done~~', message)
    }
}
export default LineReader

================
File: processors/text/StringFilter.js
================

import logger from '../../utils/Logger.js';
import ProcessProcessor from '../base/ProcessProcessor.js';
class StringFilter extends ProcessProcessor {
    constructor(config) {
        super(config);
    }
    isAccepted(content, exclude, include) {
        if (content === undefined) {
            return false;
        }
        if ((!exclude || exclude.length === 0) && (!include || include.length === 0)) {
            return true;
        }
        if (this.isExcluded(content, exclude)) {
            return false;
        }
        if (include && include.length > 0) {
            return this.isIncluded(content, include);
        }
        return true;
    }
    isExcluded(content, exclude) {
        if (!exclude || exclude.length === 0) {
            return false;
        }
        const patterns = Array.isArray(exclude) ? exclude : [exclude];
        return patterns.some(pattern => this.matchPattern(content, pattern));
    }
    isIncluded(content, include) {
        if (!include || include.length === 0) {
            return true;
        }
        const patterns = Array.isArray(include) ? include : [include];
        return patterns.some(pattern => this.matchPattern(content, pattern));
    }
    matchPattern(content, pattern) {
        const regexPattern = pattern
            .replace(/\*/g, '.*')
            .replace(/\?/g, '.')
            .replace(/\[([^\]]+)\]/g, '[$1]');
        const regex = new RegExp(`^${regexPattern}$`);
        return regex.test(content);
    }
    async execute(message) {
        logger.debug('\nStringFilter Input : \nmessage.content = ' + message.content);
        logger.debug('message.exclude = ');
        logger.reveal(message.exclude);
        logger.debug('message.include = ');
        logger.reveal(message.include);
        const accepted = this.isAccepted(message.content, message.exclude, message.include);
        if (accepted) {
            logger.debug('\nOutput : \nmessage.content = ' + message.content);
            this.emit('message', message);
        } else {
            logger.debug('\nString filtered out');
        }
    }
}
export default StringFilter;

================
File: processors/text/StringMerger.js
================
import logger from '../../utils/Logger.js'
import ProcessProcessor from '../base/ProcessProcessor.js'
class StringMerger extends ProcessProcessor {
    constructor(config) {
        super(config)
        this.merged = ''
    }
    async execute(message) {
        logger.log('SMDATA*********************************\n' + data)
        if (data === '~~done~~') {
            logger.log('SM  DONE**********************************\n' + this.merged)
            this.emit('message', this.merged, message)
            return
        }
        this.merged = this.merged + data
    }
}
export default StringMerger

================
File: processors/text/StringReplace.js
================

import logger from '../../utils/Logger.js'
import ProcessProcessor from '../base/ProcessProcessor.js'
class StringReplace extends ProcessProcessor {
    constructor(config) {
        super(config)
    }
    async execute(message) {
        logger.debug('StringReplace input: ' + message.content)
        if (message.content && message.match && message.replace) {
            message.content = message.content.split(message.match).join(message.replace)
        } else {
            logger.warn('StringReplace: Missing required properties in message')
        }
        logger.debug('StringReplace output: ' + message.content)
        this.emit('message', message)
    }
}
export default StringReplace

================
File: processors/text/Templater.js
================

import ProcessProcessor from '../base/ProcessProcessor.js'
import nunjucks from 'nunjucks'
import logger from '../../utils/Logger.js'
class Templater extends ProcessProcessor {
    constructor(config) {
        super(config)
    }
    async execute(message) {
        if (message.templateFilename) {
            const path = message.templateFilename.substr(0, message.templateFilename.lastIndexOf("/"))
            const filename = message.templateFilename.substr(message.templateFilename.lastIndexOf("/") + 1)
            logger.debug('Templater, path = ' + path)
            logger.debug('Templater, filename = ' + filename)
            nunjucks.configure(path, { autoescape: false })
            message.content = nunjucks.render(filename, message.contentBlocks)
        } else {
            nunjucks.configure({ autoescape: false })
            message.content = nunjucks.renderString(message.template, message.contentBlocks)
        }
        this.emit('message', message)
    }
}
export default Templater

================
File: processors/text/TextProcessorsFactory.js
================
import ns from '../../utils/ns.js'
import LineReader from './LineReader.js'
import StringFilter from './StringFilter.js'
import StringMerger from './StringMerger.js'
import Templater from './Templater.js'
class TextProcessorsFactory {
    static createProcessor(type, config) {
        if (type.equals(ns.t.Templater)) {
            return new Templater(config)
        }
        if (type.equals(ns.t.LineReader)) {
            return new LineReader(config)
        }
        if (type.equals(ns.t.StringFilter)) {
            return new StringFilter(config)
        }
        if (type.equals(ns.t.StringMerger)) {
            return new StringMerger(config)
        }
        return false
    }
}
export default TextProcessorsFactory

================
File: processors/unsafe/chatgpt.md
================
User
What different ways of creating instances of classes in node js, including the esoteric ones?
ChatGPT
Creating instances of classes in Node.js primarily revolves around using the `new` operator with constructor functions or class definitions. However, there are several techniques, including some less commonly used (or esoteric) methods, to instantiate objects. Here's an overview:

### 1. Standard Instantiation with `new`

The most common method involves defining a class or constructor function and using the `new` keyword to create instances.

```javascript
class MyClass {
  constructor(name) {
    this.name = name;
  }
}

const instance = new MyClass("Example");
```

### 2. Factory Functions

Factory functions return a new object and can encapsulate the use of `new` internally or return object literals directly.

```javascript
function createInstance(name) {
  return new MyClass(name);
}
const instance = createInstance("Example");
```

### 3. Object.create()

`Object.create(proto[, propertiesObject])` creates a new object with the specified prototype object and properties.

```javascript
const prototype = {
  sayName() {
    console.log(this.name);
  },
};
const instance = Object.create(prototype);
instance.name = "Example";
```

### 4. Calling Constructor without `new` (Esoteric)

Using the constructor directly without `new` is not standard for creating instances and usually results in errors or unexpected behavior. However, some constructors might internally manage instantiation to allow this.

```javascript
function MyClass(name) {
  if (!(this instanceof MyClass)) {
    return new MyClass(name);
  }
  this.name = name;
}

const instance = MyClass("Example"); // Works due to internal handling
```

### 5. Clone Existing Instance

Creating a new instance by cloning an existing one, although not creating a fresh instance in the strictest sense, serves to produce a new object.

```javascript
const original = new MyClass("Original");
const clone = Object.assign(
  Object.create(Object.getPrototypeOf(original)),
  original
);
```

### 6. Deserialization

Creating an instance from a string representation, typically used in conjunction with serialization.

```javascript
const serialized = '{"name":"Example"}'; // Could be the result of JSON.stringify(instance)
const instance = Object.assign(new MyClass(), JSON.parse(serialized));
```

### 7. Function.prototype.bind()

You can set the `this` value in the constructor function, allowing for partial application or setting certain initial parameters ahead of time.

```javascript
function MyClass(name, message) {
  this.name = name;
  this.message = message;
}

const PreConfigured = MyClass.bind(null, "PreConfiguredName");
const instance = new PreConfigured("Hello World");
```

### 8. Proxy for Constructor (Esoteric)

Using a `Proxy` to intercept and customize the instantiation process.

```javascript
const MyClassProxy = new Proxy(MyClass, {
  construct(target, args) {
    console.log("MyClass instantiated with args:", args);
    return new target(...args);
  },
});

const instance = new MyClassProxy("Example");
```

These methods showcase the flexibility of object creation in JavaScript and Node.js, ranging from straightforward and common practices to more unusual and esoteric approaches. Each has its use cases, depending on the requirements for flexibility, pattern use, and object initialization specifics.
User
If all the object needs is a distinct name 'MyClass', the ability to set the value of a property 'config' in a constructor-like function where properties will be set, and a function execute(data) which returns a processed version of data, what is the minimum code necessary? Could these objects be create with something like a const instance = create('MyName') kind of function?
ChatGPT
For a minimal implementation that meets the specified requirements, you can use a factory function to create instances. Each instance needs a distinct name (`MyClass`), the ability to set the value of a `config` property in a constructor-like function, and an `execute(data)` method that returns a processed version of the data. Here's a concise way to accomplish this:

```javascript
function createInstance(name) {
  return {
    name: name,
    config: null,
    execute(data) {
      // Process and return the data
      // This example simply returns the data as-is; replace with actual processing logic
      return data;
    },
    setConfig(config) {
      this.config = config;
    },
  };
}

// Example usage:
const instance = createInstance("MyName");
instance.setConfig({ key: "value" }); // Setting the config
console.log(instance.execute("some data")); // Executing and processing data
```

This approach uses a simple object literal inside the `createInstance` factory function to define the necessary properties and methods. Each created instance will have its own `name`, `config`, and `execute` method, as per the requirements.

- `name` is assigned based on the argument passed to `createInstance`.
- `config` can be set using the `setConfig` method, which simulates constructor-like behavior for setting initial properties.
- `execute(data)` method is defined to process and return data. You can replace the placeholder logic with actual data processing as needed.

This solution provides a lightweight and flexible way to create instances with the desired functionality, following your example of a `create('MyName')` style function call.
User
Could the execute function be created from a string?
ChatGPT
Yes, the `execute` function can be created from a string using the `new Function()` constructor. This method allows you to dynamically create a function from a string of JavaScript code. Here's how you could modify the previous example to include an `execute` function created from a string:

```javascript
function createInstance(name, executeFunctionString) {
  return {
    name: name,
    config: null,
    execute: new Function("data", executeFunctionString),
    setConfig(config) {
      this.config = config;
    },
  };
}

// Example usage:
const executeCode = 'return data + " processed";'; // String of code for the execute function
const instance = createInstance("MyName", executeCode);
instance.setConfig({ key: "value" }); // Setting the config

console.log(instance.execute("some data")); // Outputs: "some data processed"
```

In this example, the `executeFunctionString` parameter is passed to `new Function('data', executeFunctionString)`, where `'data'` is the name of the argument that the function will receive, and `executeFunctionString` is the body of the function. This dynamically created function is then assigned to the `execute` property of the object returned by `createInstance`.

**Note of Caution:** Using `new Function()` to create functions from strings poses similar risks to `eval()` in terms of security and performance:

- **Security Risk:** If the string is derived from user input or an untrusted source, it could potentially introduce security vulnerabilities, such as code injection attacks.
- **Debugging Difficulty:** Debugging can be more challenging because the dynamically generated code may not be as readily traceable in debugging tools.
- **Performance:** The JavaScript engine can't optimize these functions as well as it can for statically declared functions.

Always validate and sanitize any input if you choose to use this approach, and consider whether the dynamic nature of function creation is necessary for your use case.
User
In RS6, can imports be done inside functions?
ChatGPT
In ES6 (ECMAScript 2015), the standard import syntax (`import ... from '...'`) cannot be used conditionally or inside functions, blocks, or any other statements that are not at the top level of a module. The ES6 `import` statements are static and must be at the top level of your JavaScript file or module, allowing for these imports to be statically analyzed by JavaScript engines and bundlers.

However, you can dynamically import modules using the `import()` function, which returns a promise. This feature is not part of ES6, but it was added later in the ES2020 (ECMAScript 11) specification. The `import()` function can be used inside functions, conditionals, loops, or anywhere you can execute a function. It is useful for lazy-loading modules only when they are needed, which can improve the performance of your application by reducing the initial load time.

Here's an example of how to use dynamic imports within a function:

```javascript
async function loadModuleDynamically() {
  const moduleName = "./myModule.js"; // The module path
  const module = await import(moduleName);
  module.myFunction(); // Use a function from the imported module
}

loadModuleDynamically().then(() => {
  console.log("Module loaded and function executed");
});
```

In this example, `import(moduleName)` dynamically imports the module specified by `moduleName`, and because `import()` returns a promise, you can use `await` within an async function to wait for the module to be loaded before using it.

This approach provides flexibility for loading modules based on conditions, user actions, or any logic that requires modules to be loaded dynamically at runtime.
User
How could you check at runtime to see if import() was supported?
ChatGPT
To check at runtime whether dynamic `import()` is supported, you can use a feature detection approach. This involves attempting to use `import()` with a data URI or a no-op (no operation) module and catching any errors if the feature is not supported. Since `import()` returns a promise, you can use a try-catch block within an asynchronous function to perform this check. Here's how you could implement it:

```javascript
async function supportsDynamicImport() {
  try {
    // Attempt to dynamically import a module using a no-op or data URI
    // For actual deployment, a more reliable check with a real module path may be preferable
    await new Function('return import("data:text/javascript;base64,Cg==")')();
    return true; // Dynamic import is supported
  } catch (error) {
    return false; // Dynamic import is not supported
  }
}

// Example usage
supportsDynamicImport().then((isSupported) => {
  if (isSupported) {
    console.log("Dynamic import is supported");
  } else {
    console.log("Dynamic import is not supported");
  }
});
```

This function works by dynamically creating a function that attempts to `import` a base64-encoded empty JavaScript module. If the browser or environment supports dynamic imports, this operation will succeed, and the function will return `true`. If not, the operation will throw an exception, and the function will return `false`.

Note: The use of `new Function()` allows this check to not cause a syntax error in environments that do not recognize `import()` syntax at all, as the `import()` call is within a string and not directly in the JavaScript code being parsed.

This method provides a straightforward way to determine the availability of dynamic imports, allowing you to conditionally implement fallback logic or alternative module loading strategies if necessary.
User
Can imports go in eval() strings?
ChatGPT
Using `import` statements directly within `eval()` strings in JavaScript does not work in the same way as using them at the top level of modules or through dynamic `import()` expressions. The static `import` statement is part of the module syntax and expected to be statically analyzable at the top level of module files, not dynamically executed within function bodies, `eval()`, or similar constructs.

However, dynamic imports using `import()` can be used within `eval()` because `import()` is a function that returns a promise. This allows for dynamically importing modules even in messages where static import statements are not syntactically valid. Here's an example:

```javascript
eval('import("./module.js").then(module => { console.log(module); })');
```

This uses `eval()` to dynamically execute a string that contains a dynamic import statement. Note that this approach does indeed work, but it combines two powerful and potentially risky features of JavaScript: `eval()` and dynamic imports. Both should be used cautiously because:

- `eval()` can execute arbitrary code, which poses significant security risks, especially with untrusted input. It's also generally slower and harder to debug compared to other methods of executing JavaScript.
- Dynamic imports can introduce complexity to your module loading strategy and potentially impact performance negatively if not used judyiciously.

Given these considerations, while you can use dynamic `import()` within `eval()` strings, it's essential to carefully assess whether this approach is necessary and ensure that the code being evaluated is from a trusted source to avoid security vulnerabilities.

================
File: processors/util/CaptureAll.js
================
import logger from '../../utils/Logger.js'
import Processor from '../base/Processor.js'
class CaptureAll extends Processor {
    constructor(config) {
        if (!config.whiteboard) {
            config.whiteboard = []
        }
        super(config)
        if (CaptureAll.singleInstance) {
            return CaptureAll.singleInstance
        }
        CaptureAll.singleInstance = this;
    }
    async execute(message) {
        logger.log('CaptureAll at (' + message.tags + ') ' + this.getTag())
        this.config.whiteboard.push(message)
        this.emit('message', message)
    }
}
export default CaptureAll

================
File: processors/util/DeadEnd.js
================
import logger from '../../utils/Logger.js'
import Processor from '../base/Processor.js'
class DeadEnd extends Processor {
    async execute(message) {
        logger.log('DeadEnd  at (' + message.tags + ') ' + this.getTag())
    }
}
export default DeadEnd

================
File: processors/util/Fork.js
================
import logger from '../../utils/Logger.js'
import Processor from '../base/Processor.js'
class Fork extends Processor {
    constructor(config) {
        super(config)
    }
    async execute(message) {
        var nForks = 2
        if (message.nForks) {
            nForks = message.nForks
        }
        for (let i = 0; i < nForks; i++) {
            var messageClone = structuredClone(message)
            messageClone.forkN = i
            logger.log('--- emit --- ' + i)
            this.emit('message', message)
        }
        message.done = true
        this.emit('message', message)
    }
}
export default Fork

================
File: processors/util/Halt.js
================
import logger from '../../utils/Logger.js'
import Processor from '../base/Processor.js'
class Halt extends Processor {
    execute(message) {
        logger.log('\n************************************************************************')
        logger.log('*** << Thou Hast Summoned HALT, the Mighty Stopper of All Things  >> ***')
        logger.log('*** <<                   ~~~ ALL IS GOOD ~~~                      >> ***')
        logger.log('*** <<                     Have a nice day!                       >> ***')
        logger.log('************************************************************************\n')
        logger.log('*** Pipeline was : ' + message.tags)
        logger.log('*** Context now : ')
        logger.reveal(message)
        process.exit()
    }
}
export default Halt

================
File: processors/util/NOP.js
================
import logger from '../../utils/Logger.js'
import Processor from '../base/Processor.js'
class NOP extends Processor {
    constructor(config) {
        super(config);
    }
    async execute(message) {
        logger.log('NOP at (' + message.tags + ') ' + this.getTag())
        return super.handle(message)
    }
}
export default NOP

================
File: processors/util/RemapContext.js
================
import logger from '../../utils/Logger.js'
import rdf from 'rdf-ext'
import ns from '../../utils/ns.js'
import GrapoiHelpers from '../../utils/GrapoiHelpers.js'
import Processor from '../base/Processor.js'
class RemapContext extends Processor {
    constructor(config) {
        super(config)
    }
    async execute(message) {
        if (this.preProcess(message)) {
            return
        }
        logger.debug('RemapContext this.configKey = ' + this.configKey.value)
        const renames = GrapoiHelpers.listToArray(this.config, this.configKey, ns.trm.rename)
        const dataset = this.config
        for (let i = 0; i < renames.length; i++) {
            let rename = renames[i]
            let poi = rdf.grapoi({ dataset: dataset, term: rename })
            let pre = poi.out(ns.trm.pre).value
            let post = poi.out(ns.trm.post).value
            var value
            if (pre.includes('.')) {
                const spre = pre.split('.')
                logger.log('pre- split = ' + spre)
                value = message[spre[0]][spre[1]]
            } else {
                value = message[pre]
            }
            value = value.toString()
            if (post.includes('.')) {
                const s = post.split('.')
                logger.log('post split = ' + s)
                message[s[0]][s[1]] = value
            } else {
                message[post] = value
            }
            logger.log(' - Rename : ' + pre + ' to ' + post)
        }
        this.emit('message', message)
    }
}
export default RemapContext

================
File: processors/util/ShowConfig.js
================
import logger from '../../utils/Logger.js'
import SinkProcessor from '../base/SinkProcessor.js'
class ShowConfig extends SinkProcessor {
    constructor(config) {
        super(config)
        this.verbose = false
    }
    async execute(message) {
        if (this.verbose) logger.log("\n***  Show Config ***")
        logger.log("***************************")
        logger.log("***  Config")
        logger.reveal(this.config)
        logger.log("***************************")
        this.emit('message', message)
    }
}
export default ShowConfig

================
File: processors/util/ShowMessage.js
================
import logger from '../../utils/Logger.js'
import SinkProcessor from '../base/SinkProcessor.js'
class ShowMessage extends SinkProcessor {
    constructor(config) {
        super(config)
        this.verbose = false
    }
    async execute(message) {
        if (this.verbose) logger.log("\n***  Show Message ***")
        logger.log("***************************")
        logger.log("***  Message")
        logger.reveal(message)
        logger.log("***************************")
        this.emit('message', message)
    }
}
export default ShowMessage

================
File: processors/util/ShowTransmission.js
================
import logger from '../../utils/Logger.js'
import Processor from '../base/Processor.js'
class ShowTransmission extends Processor {
    async execute(message) {
        logger.log(this.transmission.toString())
        this.emit('message', message)
    }
}
export default ShowTransmission

================
File: processors/util/Stash.js
================
import rdf from 'rdf-ext'
import { fromFile, toFile } from 'rdf-utils-fs'
import SourceProcessor from '../base/SourceProcessor.js'
class Stash extends SourceProcessor {
    constructor(config) {
        super(config)
    }
    async execute(message) {
        const manifestFilename = rootDir + '/manifest.ttl'
        const stream = fromFile(manifestFilename)
        message.rootDir = rootDir
        message.dataset = await rdf.dataset().import(stream)
        this.emit('message', message)
    }
}
export default Stash

================
File: processors/util/Unfork.js
================
import logger from '../../utils/Logger.js'
import Processor from '../base/Processor.js'
import ns from '../../utils/ns.js'
import rdf from 'rdf-ext'
import grapoi from 'grapoi'
import DeadEnd from './DeadEnd.js'
class Unfork extends Processor {
    constructor(config) {
        super(config)
    }
    async execute(message) {
        if (message.done) {
            logger.log(' - Unfork passing message')
            message.done = false
            this.emit('message', message)
        } else {
            logger.log(' - Unfork terminating pipe')
        }
    }
}
export default Unfork

================
File: processors/util/UtilProcessorsFactory.js
================
import logger from '../../utils/Logger.js'
import ns from '../../utils/ns.js'
import NOP from './NOP.js'
import DeadEnd from './DeadEnd.js'
import ShowMessage from './ShowMessage.js'
import Halt from './Halt.js'
import RemapContext from './RemapContext.js'
import Unfork from './Unfork.js'
import Fork from './Fork.js'
import ShowTransmission from './ShowTransmission.js'
import CaptureAll from './CaptureAll.js'
import ShowConfig from './ShowConfig.js'
import WhiteboardToMessage from './WhiteboardToMessage.js'
class UtilProcessorsFactory {
    static createProcessor(type, config) {
        if (type.equals(ns.t.NOP)) {
            return new NOP(config)
        }
        if (type.equals(ns.t.DeadEnd)) {
            return new DeadEnd(config)
        }
        if (type.equals(ns.t.ShowMessage)) {
            return new ShowMessage(config)
        }
        if (type.equals(ns.t.Halt)) {
            return new Halt(config)
        }
        if (type.equals(ns.t.RemapContext)) {
            return new RemapContext(config)
        }
        if (type.equals(ns.t.Fork)) {
            return new Fork(config)
        }
        if (type.equals(ns.t.Unfork)) {
            return new Unfork(config)
        }
        if (type.equals(ns.t.ShowTransmission)) {
            return new ShowTransmission(config)
        }
        if (type.equals(ns.t.CaptureAll)) {
            return new CaptureAll(config)
        }
        if (type.equals(ns.t.ShowConfig)) {
            return new ShowConfig(config)
        }
        if (type.equals(ns.t.WhiteboardToMessage)) {
            return new WhiteboardToMessage(config)
        }
        return false
    }
}
export default UtilProcessorsFactory

================
File: processors/util/WhiteboardToMessage.js
================
import logger from '../../utils/Logger.js'
import Processor from '../base/Processor.js'
class WhiteboardToMessage extends Processor {
    constructor(config) {
        super(config);
    }
    async execute(message) {
        logger.log('WhiteboardToMessage at (' + message.tags + ') ' + this.getTag())
        const originalArray = this.config.whiteboard
        message.whiteboard = Object.keys(originalArray).reduce((acc, key) => {
            const value = originalArray[key];
            if (value !== undefined && value !== null) {
                Object.keys(value).forEach((prop) => {
                    if (!acc[prop]) {
                        acc[prop] = [];
                    }
                    acc[prop].push(value[prop]);
                });
            }
            return acc;
        }, {});
        return super.handle(message)
    }
}
export default WhiteboardToMessage

================
File: simples/env-loader/about.md
================
node src/apps-simple/env-loader/env-loader.js

from:

:envy a trm:Pipeline ;

# trm:pipe (:SC :s10 :s20 :SM) .

trm:pipe (:p10 :p20 :SC) .
:p10 a :EnvLoader .
:p20 a :WhiteboardToMessage .

================
File: simples/env-loader/env-loader.js
================
import logger from '../../utils/Logger.js'
import EnvLoader from '../../processors/system/EnvLoader.js'
import WhiteboardToMessage from '../../processors/util/WhiteboardToMessage.js'
logger.log('EnvLoader simple')
const config = { whiteboard: [] }
const p10 = new EnvLoader(config)
p10.id = 'http://purls.org/stuff/#p10'
const p20 = new WhiteboardToMessage(config)
p10.id = 'http://purls.org/stuff/#p20'
var message = {
    "dataDir": "src/applications/env-loader-test/data",
    "rootDir": "[no key]",
    "tags": "SM"
}
const x = 3
message = await p10.execute(message)
logger.log('p10 output ' + p10.getTag() + message)
message = await p20.execute(message)
logger.log('p20 output ')
logger.reveal(message)

================
File: simples/nop/nop copy.js
================
import logger from '../../utils/Logger.js'
import NOP from '../../processors/util/NOP.js'
logger.log('NOP simple')
const config = {
    "runmode": "functions",
    whiteboard: []
}
const p10 = new NOP(config)
p10.id = 'http://purls.org/stuff/#p10'
var message = {
    "test": "test string",
    "dataDir": "src/applications/env-loader-test/data",
    "rootDir": "[no key]",
    "tags": "SM"
}
message = await p10.execute(message)
logger.log('p10 output ' + message)

================
File: simples/nop/nop.js
================

import NOP from '../../processors/util/NOP.js'
const config = {
    "runmode": "functions",
    whiteboard: []
}
const nop = new NOP(config)
var message = { 'value': '42' }
message = await nop.execute(message)
console.log('value = ' + message.value)

================
File: utils/CommandUtils.js
================

import yargs from 'yargs';
import { hideBin } from 'yargs/helpers';
import path from 'path'
import fs from 'fs/promises'
import TransmissionBuilder from '../engine/TransmissionBuilder.js'
import { fileURLToPath } from 'url';
import logger from './Logger.js'
var applicationsDir = '../applications'
const defaultTransmissionsFilename = 'transmissions.ttl'
const defaultProcessorsConfigFile = 'processors-config.ttl'
class CommandUtils {
    static async run(appsDir, application, target, message = {}) {
        logger.setLogLevel('debug')
        logger.debug('\nCommandUtils.run()')
        logger.debug('CommandUtils, appsDir =' + appsDir)
        logger.debug('CommandUtils, application =' + application)
        logger.debug('CommandUtils, target =' + target)
        const appSplit = CommandUtils.splitName(application)
        const appName = appSplit.first
        const subtask = appSplit.second
        logger.debug('appName = ' + appName)
        logger.debug('subtask  = ' + subtask)
        var transmissionsDir = path.join(appsDir, appName)
        logger.debug('transmissionsDir = ' + transmissionsDir)
        const transmissionsFile = path.join(transmissionsDir, defaultTransmissionsFilename)
        const processorsConfigFile = path.join(transmissionsDir, defaultProcessorsConfigFile)
        logger.debug("transmissionConfigFile = " + transmissionsFile)
        logger.debug("processorsConfigFile = " + processorsConfigFile)
        const defaultDataDir = path.join(transmissionsDir, '/data')
        message = { "dataDir": defaultDataDir }
        message.rootDir = target
        const transmissions = await TransmissionBuilder.build(transmissionsFile, processorsConfigFile)
        if (subtask) {
            for (var i = 0; i < transmissions.length; i++) {
                if (subtask === transmissions[i].label) {
                    transmissions[i].execute(message)
                }
            }
        }
        else {
            for (var i = 0; i < transmissions.length; i++) {
                transmissions[i].execute(message)
            }
        }
    }
    static async parseOrLoadContext(contextArg) {
        let message = ''
        try {
            message = JSON.parse(contextArg)
        } catch (err) {
            logger.log(err)
            // If it fails, assume it's a filename and try to load the file
            const filePath = path.resolve(contextArg);
            const fileContent = await fs.readFile(filePath, 'utf8');
            message = JSON.parse(fileContent)
            logger.log('message from file = ' + message)
        }
        return message
    }
    static async listSubdirectories(currentDirectory) {
        try {
            const entries = await fs.readdir(currentDirectory, { withFileTypes: true });
            const subdirChecks = entries.filter(dirent => dirent.isDirectory()).map(async (dirent) => {
                const subdirPath = path.join(currentDirectory, dirent.name);
                const files = await fs.readdir(subdirPath);
                return files.includes('about.md') ? dirent.name : null;
            })
            const subdirsContainingAboutMd = (await Promise.all(subdirChecks)).filter(name => name !== null);
            subdirsContainingAboutMd.forEach(dir => console.log(dir));
        } catch (err) {
            console.error('Error listing subdirectories:', err);
        }
    }
    static splitName(input) {
        if (input.includes('.')) {
            let parts = input.split('.');
            return {
                first: parts[0],
                second: parts[1]
            };
        } else {
            return {
                first: input,
                second: false
            };
        }
    }
}
export default CommandUtils

================
File: utils/GrapoiHelpers.js
================
import rdf from 'rdf-ext'
import grapoi from 'grapoi'
import { fromFile, toFile } from 'rdf-utils-fs'
import ns from './ns.js'
import logger from './Logger.js'
class GrapoiHelpers {
    static async readDataset(filename) {
        const stream = fromFile(filename)
        const dataset = await rdf.dataset().import(stream)
        return dataset
    }
    static async writeDataset(dataset, filename) {
        await toFile(dataset.toStream(), filename)
    }
    static listToArray(dataset, term, property) {
        const poi = rdf.grapoi({ dataset: dataset, term: term })
        const first = poi.out(property).term
        let p = rdf.grapoi({ dataset, term: first })
        let object = p.out(ns.rdf.first).term
        const result = [object]
        while (true) {
            let restHead = p.out(ns.rdf.rest).term
            let p2 = rdf.grapoi({ dataset, term: restHead })
            let object = p2.out(ns.rdf.first).term
            if (restHead.equals(ns.rdf.nil)) break
            result.push(object)
            p = rdf.grapoi({ dataset, term: restHead })
        }
        return result
    }
    static listObjects(dataset, subjectList, predicate) {
        const objects = []
        for (const subject of subjectList) {
            logger.log("subject = " + subject.value)
            let p = rdf.grapoi({ dataset, term: subject })
            let object = p.out(predicate).term
            logger.log("object = " + object.value)
            objects.push(object)
        }
        return objects
    }
}
export default GrapoiHelpers

================
File: utils/Logger.js
================

import fs from 'fs';
let logger = {};
logger.logfile = 'latest.log';
const LOG_LEVELS = [
    "debug",
    "info",
    "log",
    "warn",
    "error",
];
const logComponent = "api.logger";
logger.appendLogToFile = function (message) {
    if (logger.logfile) {
        fs.appendFileSync(logger.logfile, message + '\n', 'utf8');
    }
};
logger.setLogLevel = function (logLevel = "warn") {
    console[logLevel]('', logComponent, logLevel);
    logger.currentLogLevel = logLevel;
};
logger.timestampISO = function () {
    let now = new Date();
    return now.toISOString();
};
logger.log = function (msg, level = "log") {
    const currentLevelIndex = LOG_LEVELS.indexOf(logger.currentLogLevel);
    const messageLevelIndex = LOG_LEVELS.indexOf(level);
    if (messageLevelIndex >= currentLevelIndex) {
        console[level](msg);
        const logMessage = `[${logger.timestampISO()}] [${level.toUpperCase()}] - ${msg}`;
        logger.appendLogToFile(logMessage);
    }
};
logger.reveal = function (instance) {
    const serialized = {};
    for (const key in instance) {
        if (key === 'dataset') {
        } else {
            if (instance.hasOwnProperty(key)) {
                let kiki = instance[key];
                if (kiki) {
                    if (Buffer.isBuffer(kiki)) {
                        kiki = kiki.toString();
                    }
                    if (kiki.length > 100) {
                        kiki = kiki.substring(0, 100) + '...';
                    }
                    serialized[key] = kiki
                } else {
                    serialized[key] = '[no key]'
                }
            }
        }
    }
    const props = JSON.stringify(serialized, null, 2);
    logger.log(`Instance of ${instance.constructor.name} with properties - \n${props}`);
};
logger.debug = function (msg) {
    logger.log(msg, "debug");
};
logger.info = function (msg) {
    logger.log(msg, "info");
};
logger.warn = function (msg) {
    logger.log(msg, "warn");
};
logger.error = function (msg) {
    logger.log(msg, "error");
};
logger.poi = function exploreGrapoi(grapoi, predicates, objects, subjects) {
    console.log('Properties of the Grapoi object:');
    for (const prop in grapoi) {
        console.log(`\t${prop}: ${grapoi[prop]}`);
    }
    console.log('\nPath:');
    const path = grapoi.out(predicates, objects).in(predicates, subjects);
    for (const quad of path.quads()) {
        console.log(`\t${quad.predicate.value}: ${quad.object.value}`);
    }
};
function handleExit(options, exitCode) {
    if (options.cleanup) {
    }
    if (exitCode || exitCode === 0) console.log(exitCode);
    if (options.exit) process.exit();
}
process.on('exit', handleExit.bind(null, { cleanup: true }));
process.on('SIGINT', handleExit.bind(null, { exit: true }));
process.on('SIGUSR1', handleExit.bind(null, { exit: true }));
process.on('SIGUSR2', handleExit.bind(null, { exit: true }));
process.on('uncaughtException', handleExit.bind(null, { exit: true }));
export default logger;

================
File: utils/footpath.js
================
import path from 'path'
import { fileURLToPath } from 'url'
import logger from './Logger.js'
let footpath = {}
footpath.resolve = function footpath(here, relative, start) {
    const loggy = false
    if (loggy) {
        logger.debug("\n*** start footpath.resolve ***")
        logger.debug("process.cwd() = " + process.cwd())
        logger.debug("here = " + here)
        logger.debug("relative = " + relative)
        logger.debug("start = " + start)
    }
    const __filename = fileURLToPath(here)
    const __dirname = path.dirname(__filename)
    const rootDir = path.resolve(__dirname, relative)
    const filePath = path.join(rootDir, start)
    if (loggy) {
        logger.debug("__filename = " + __filename)
        logger.debug("__dirname = " + __dirname)
        logger.debug("rootDir = " + rootDir)
        logger.debug("filePath = " + filePath)
        logger.debug("*** end footpath.resolve ***\n")
    }
    return filePath
}
footpath.urlLastPart = function footpath(url) {
    const urlObj = new URL(url);
    const hash = urlObj.hash;
    const path = urlObj.pathname;
    const lastPart = hash ? hash.replace(/^#/, '') : path.split('/').pop();
    return lastPart;
}
export default footpath

================
File: utils/ns.js
================
import rdf from 'rdf-ext'
const ns = {
    rdf: rdf.namespace('http://www.w3.org/1999/02/22-rdf-syntax-ns#'),
    rdfs: rdf.namespace('http://www.w3.org/2000/01/rdf-schema#'),
    dc: rdf.namespace('http://purl.org/dc/terms/'),
    schema: rdf.namespace('http://schema.org/'),
    xsd: rdf.namespace('http://www.w3.org/2001/XMLSchema#'),
    trm: rdf.namespace('http://purl.org/stuff/transmission/'),
    t: rdf.namespace('http://hyperdata.it/transmissions/'),
    fs: rdf.namespace('http://purl.org/stuff/filesystem/'),
    pc: rdf.namespace('http://purl.org/stuff/postcraft/')
}
ns.getShortname = function (url) {
    if (!url) return
    const lastSlashIndex = url.lastIndexOf('/');
    const lastHashIndex = url.lastIndexOf('#');
    const path = url.slice(lastSlashIndex + 1);
    return path.split('#')[0].split('?')[0];
}
export default ns

================
File: utils/t2j.js
================

import { Readable } from 'readable-stream'
import rdf from '@rdfjs/data-model'
import SerializerJsonld from '@rdfjs/serializer-jsonld'
import Serializer from '@rdfjs/serializer-turtle'
import N3Parser from '@rdfjs/parser-n3'
import { fromFile } from 'rdf-utils-fs'
import { toFile } from 'rdf-utils-fs'
const testTurtle = `
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix trm: <http://purl.org/stuff/transmission/> .
@prefix : <https://hyperdata.it/transmissions/> . # for custom terms & instances
:simplepipe a trm:PipelineTransmission ;
    trm:pipe (:s1 :s2 :s3) .
:s1 a trm:StringSource .
:s2 a trm:AppendProcess .
:s3 a trm:StringSink .
`
export class Turtle2JSONLD {
    static async convert(turtle) {
        let parser = new N3Parser({ factory: rdf })
        const input = Readable.from(turtle)
        const output = parser.import(input)
        const serializerJsonld = new SerializerJsonld()
        const jsonStream = serializerJsonld.import(output)
        const outputJson = await Turtle2JSONLD.streamToString(jsonStream)
        return outputJson
    }
    static stringToStream(str) {
        const stream = new Readable();
        stream.push(str);
        stream.push(null);
        return stream;
    }
    static streamToString(stream) {
        const chunks = [];
        return new Promise((resolve, reject) => {
            stream.on('data', (chunk) => {
                chunks.push(Buffer.from(chunk))
                console.log('chunk:', chunk)
            }
            );
            stream.on('error', (err) => reject(err));
            stream.on('end', () => {
                const result = Buffer.concat(chunks).toString('utf8')
                resolve(result)
                console.log('****************** result:', result)
            });
        })
    }
}
const testJson = await Turtle2JSONLD.convert(testTurtle)
console.log('àààààààààààààààààààààà')
console.log(testJson)

================
File: utils/test_runner.js
================
import fs from 'fs';
import path from 'path';
const testFiles = fs.readdirSync(__dirname).filter(file => file.startsWith('test_'));
testFiles.forEach(testFile => {
    console.log(`Running ${testFile}`);
    require(path.join(__dirname, testFile));
});
