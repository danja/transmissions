This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-05-07T09:43:00.861Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Directory Structure
================================================================
.github/
  workflows/
    test.yaml
  dependabot.yaml
lib/
  BlankNode.js
  Dataset.js
  DefaultGraph.js
  fetch.browser.js
  fetch.js
  Literal.js
  NamedNode.js
  Quad.js
  Variable.js
.gitignore
CONTRIBUTING.md
DataFactory.js
DatasetFactory.js
FetchFactory.js
FormatsFactory.js
index.js
LICENSE.md
package.json
README.md

================================================================
Files
================================================================

================
File: .github/workflows/test.yaml
================
name: Test
on:
  - pull_request
  - push
jobs:
  test:
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        node:
          - '18'
          - '20'
          - '22'
          - '23'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
      - run: npm install
      - run: npm test
      - uses: coverallsapp/github-action@v2
        with:
          flag-name: run Node v${{ matrix.node }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          parallel: true
  finally:
    needs: test
    runs-on: ubuntu-24.04
    steps:
      - uses: coverallsapp/github-action@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          parallel-finished: true

================
File: .github/dependabot.yaml
================
version: 2
updates:
  - package-ecosystem: github-actions
    directory: /
    schedule:
      interval: daily
  - package-ecosystem: npm
    directory: /
    schedule:
      interval: daily
    versioning-strategy: increase-if-necessary

================
File: lib/BlankNode.js
================
import BlankNodeBase from '@rdfjs/data-model/lib/BlankNode.js'
import toNT from '@rdfjs/to-ntriples'

class BlankNode extends BlankNodeBase {
  toCanonical () {
    return toNT(this)
  }

  toString () {
    return this.toCanonical()
  }
}

export default BlankNode

================
File: lib/Dataset.js
================
import Dataset from '@rdfjs/dataset/DatasetCore.js'
import normalize from '@rdfjs/normalize'
import toNT from '@rdfjs/to-ntriples'
import { finished, Readable } from 'readable-stream'

function createDataset (obj, quads) {
  return new obj.constructor(quads)
}

class DatasetExt extends Dataset {
  addAll (quads) {
    for (const quad of quads) {
      this.add(quad)
    }

    return this
  }

  clone () {
    return createDataset(this, this)
  }

  deleteMatches (subject, predicate, object, graph) {
    for (const quad of this.match(subject, predicate, object, graph)) {
      this.delete(quad)
    }

    return this
  }

  difference (other) {
    return this.filter(quad => !other.has(quad))
  }

  equals (other) {
    return this.toCanonical() === other.toCanonical()
  }

  every (callback) {
    return Array.from(this).every(quad => callback(quad, this))
  }

  filter (callback) {
    return createDataset(this, Array.from(this).filter(quad => callback(quad, this)))
  }

  forEach (callback) {
    Array.from(this).forEach(quad => callback(quad, this))
  }

  import (stream) {
    stream.on('data', quad => this.add(quad))

    return new Promise((resolve, reject) => {
      finished(stream, err => {
        if (err) {
          reject(err)
        } else {
          resolve(this)
        }
      })
    })
  }

  intersection (other) {
    return this.filter(quad => other.has(quad))
  }

  map (callback) {
    return createDataset(this, Array.from(this).map(quad => callback(quad, this)))
  }

  merge (other) {
    return (this.clone()).addAll(other)
  }

  reduce (callback, initialValue) {
    return Array.from(this).reduce((value, quad, index) => callback(value, quad, index, this), initialValue)
  }

  some (callback) {
    return Array.from(this).some(quad => callback(quad, this))
  }

  toCanonical () {
    return normalize(this)
  }

  toStream () {
    return Readable.from(this)
  }

  toString () {
    return toNT(this)
  }
}

export default DatasetExt

================
File: lib/DefaultGraph.js
================
import DefaultGraphBase from '@rdfjs/data-model/lib/DefaultGraph.js'
import toNT from '@rdfjs/to-ntriples'

class DefaultGraph extends DefaultGraphBase {
  toCanonical () {
    return toNT(this)
  }

  toString () {
    return this.toCanonical()
  }
}

export default DefaultGraph

================
File: lib/fetch.browser.js
================
import httpFetch from 'nodeify-fetch'

export default httpFetch

================
File: lib/fetch.js
================
import rdfMediaTypes from '@rdfjs/io/mediaTypes.js'
import fileFetchFactory from 'file-fetch/factory.js'
import httpFetch from 'nodeify-fetch'
import protoFetch from 'proto-fetch'

const fileFetch = fileFetchFactory({
  contentType: ext => rdfMediaTypes.get(ext.slice(1))
})

const fetch = protoFetch({
  [null]: fileFetch,
  file: fileFetch,
  http: httpFetch,
  https: httpFetch
})

export default fetch

================
File: lib/Literal.js
================
import LiteralBase from '@rdfjs/data-model/lib/Literal.js'
import toNT from '@rdfjs/to-ntriples'

class Literal extends LiteralBase {
  toCanonical () {
    return toNT(this)
  }

  toString () {
    return this.value
  }
}

export default Literal

================
File: lib/NamedNode.js
================
import NamedNodeBase from '@rdfjs/data-model/lib/NamedNode.js'
import toNT from '@rdfjs/to-ntriples'

class NamedNode extends NamedNodeBase {
  toCanonical () {
    return toNT(this)
  }

  toString () {
    return this.value
  }

  toURL () {
    return new URL(this.value)
  }
}

export default NamedNode

================
File: lib/Quad.js
================
import QuadBase from '@rdfjs/data-model/lib/Quad.js'
import toNT from '@rdfjs/to-ntriples'

class Quad extends QuadBase {
  toCanonical () {
    return toNT(this)
  }

  toString () {
    return this.toCanonical()
  }
}

export default Quad

================
File: lib/Variable.js
================
import VariableBase from '@rdfjs/data-model/lib/Variable.js'
import toNT from '@rdfjs/to-ntriples'

class Variable extends VariableBase {
  toCanonical () {
    return toNT(this)
  }

  toString () {
    return this.toCanonical()
  }
}

export default Variable

================
File: .gitignore
================
coverage
node_modules
package-lock.json

================
File: CONTRIBUTING.md
================
# Contributing to a project of the RDF-Ext organization

We'd love for you to contribute to our source code and to make RDF-Ext even better than it is today!
Here are the guidelines we'd like you to follow:

## Discussions

The [discussions project](https://github.com/rdf-ext/discussions/issues) is the right place to talk about general RDF-Ext topics.
If you are not sure to which project your topic belongs, just open an issue in that project.

## Styleguide

All projects managed in the RDF-Ext organization use the [standard code style](http://standardjs.com/).
Standard is also configured in the `test` script in every `package.json` file.
So you can use `npm test` to check the style.

## Pull Requests

All developers, also members of the organization, must use forks and pull requests to submit contributions.

## Branches

Gitflow is used to manage branches and versions.
The workflow is described [here](http://nvie.com/posts/a-successful-git-branching-model/) and [here](https://de.atlassian.com/git/tutorials/comparing-workflows/feature-branch-workflow)

## Tests

All contributions should be covered by a mocha test.

================
File: DataFactory.js
================
import fromTerm from '@rdfjs/data-model/lib/fromTerm.js'
import BlankNode from './lib/BlankNode.js'
import DefaultGraph from './lib/DefaultGraph.js'
import Literal from './lib/Literal.js'
import NamedNode from './lib/NamedNode.js'
import Quad from './lib/Quad.js'
import Variable from './lib/Variable.js'

const langStringDatatype = new NamedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#langString')
const stringDatatype = new NamedNode('http://www.w3.org/2001/XMLSchema#string')

class DataFactory {
  init () {
    this._data = {
      blankNodeCounter: 0,
      defaultGraph: new DefaultGraph()
    }
  }

  namedNode (value) {
    if (typeof value !== 'string') {
      value = value.toString()
    }

    return new NamedNode(value)
  }

  blankNode (value) {
    value = value || ('b' + (++this._data.blankNodeCounter))

    return new BlankNode(value)
  }

  literal (value, languageOrDatatype) {
    if (typeof languageOrDatatype === 'string') {
      return new Literal(value, languageOrDatatype, langStringDatatype)
    } else {
      return new Literal(value, '', languageOrDatatype || stringDatatype)
    }
  }

  variable (value) {
    return new Variable(value)
  }

  defaultGraph () {
    return this._data.defaultGraph
  }

  quad (subject, predicate, object, graph = this.defaultGraph()) {
    return new Quad(subject, predicate, object, graph)
  }

  fromTerm (original) {
    return fromTerm(this, original)
  }

  fromQuad (original) {
    return fromTerm(this, original)
  }
}

DataFactory.exports = [
  'namedNode',
  'blankNode',
  'literal',
  'variable',
  'defaultGraph',
  'quad',
  'fromTerm',
  'fromQuad'
]

export default DataFactory

================
File: DatasetFactory.js
================
import Dataset from './lib/Dataset.js'

class DatasetFactory {
  dataset (quads, graph) {
    const dataset = new Dataset()

    if (quads) {
      if (graph) {
        for (const quad of quads) {
          dataset.add(this.quad(quad.subject, quad.predicate, quad.object, graph))
        }
      } else {
        dataset.addAll(quads)
      }
    }

    return dataset
  }
}

DatasetFactory.exports = ['dataset']

export default DatasetFactory

================
File: FetchFactory.js
================
import FetchFactoryBase from '@rdfjs/fetch-lite/Factory.js'
import fetch from './lib/fetch.js'

class FetchFactory extends FetchFactoryBase {
  init () {
    super.init()

    this.fetch.config('fetch', fetch)
  }
}

export default FetchFactory

================
File: FormatsFactory.js
================
import formats from '@rdfjs/formats'
import FormatsFactoryBase from '@rdfjs/formats/Factory.js'

class FormatsFactory extends FormatsFactoryBase {
  init () {
    super.init()

    this.formats.import(formats)
  }
}

export default FormatsFactory

================
File: index.js
================
import Environment from '@rdfjs/environment/Environment.js'
import IoFactory from '@rdfjs/io/Factory.js'
import NamespaceFactory from '@rdfjs/namespace/Factory.js'
import PrefixMapFactory from '@rdfjs/prefix-map/Factory.js'
import ScoreFactory from '@rdfjs/score/Factory.js'
import TermMapFactory from '@rdfjs/term-map/Factory.js'
import TermSetFactory from '@rdfjs/term-set/Factory.js'
import TraverserFactory from '@rdfjs/traverser/Factory.js'
import GrapoiFactory from 'grapoi/Factory.js'
import DataFactory from './DataFactory.js'
import DatasetFactory from './DatasetFactory.js'
import FetchFactory from './FetchFactory.js'
import FormatsFactory from './FormatsFactory.js'

const defaultEnv = new Environment([
  DataFactory,
  DatasetFactory,
  FetchFactory,
  FormatsFactory,
  GrapoiFactory,
  IoFactory,
  NamespaceFactory,
  PrefixMapFactory,
  ScoreFactory,
  TermMapFactory,
  TermSetFactory,
  TraverserFactory
], { bind: true })

export default defaultEnv
export {
  DataFactory,
  DatasetFactory,
  Environment,
  FetchFactory,
  FormatsFactory,
  GrapoiFactory,
  NamespaceFactory,
  PrefixMapFactory,
  ScoreFactory,
  TermMapFactory,
  TermSetFactory,
  TraverserFactory
}

================
File: LICENSE.md
================
# License
The MIT License (MIT)
Copyright © 2012–2015 Thomas Bergwinkl

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

================
File: package.json
================
{
  "name": "rdf-ext",
  "version": "2.5.2",
  "description": "RDF-Ext is a developer-friendly extension for RDF/JS",
  "type": "module",
  "main": "index.js",
  "scripts": {
    "test": "stricter-standard && c8 --reporter=lcov --reporter=text-summary mocha"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/rdf-ext/rdf-ext.git"
  },
  "keywords": [
    "rdf",
    "rdfjs",
    "rdf-ext"
  ],
  "author": "Thomas Bergwinkl <bergi@axolotlfarm.org> (https://www.bergnet.org/people/bergi/card#me)",
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/rdf-ext/rdf-ext/issues"
  },
  "homepage": "https://github.com/rdf-ext/rdf-ext",
  "dependencies": {
    "@rdfjs/data-model": "^2.0.1",
    "@rdfjs/dataset": "^2.0.1",
    "@rdfjs/environment": "^1.0.0",
    "@rdfjs/fetch-lite": "^3.2.1",
    "@rdfjs/formats": "^4.0.0",
    "@rdfjs/io": "^1.0.0",
    "@rdfjs/namespace": "^2.0.0",
    "@rdfjs/normalize": "^2.0.0",
    "@rdfjs/prefix-map": "^0.1.1",
    "@rdfjs/score": "^0.1.1",
    "@rdfjs/term-map": "^2.0.0",
    "@rdfjs/term-set": "^2.0.1",
    "@rdfjs/to-ntriples": "^3.0.1",
    "@rdfjs/traverser": "^0.1.1",
    "file-fetch": "^2.0.0",
    "grapoi": "^1.0.2",
    "nodeify-fetch": "^3.1.0",
    "proto-fetch": "^2.0.0",
    "readable-stream": "^4.3.0"
  },
  "devDependencies": {
    "c8": "^10.1.2",
    "mocha": "^11.0.1",
    "stream-chunks": "^1.0.0",
    "stricter-standard": "^0.3.1"
  },
  "browser": {
    "./lib/fetch.js": "./lib/fetch.browser.js"
  }
}

================
File: README.md
================
# rdf-ext

[![build status](https://img.shields.io/github/actions/workflow/status/rdf-ext/rdf-ext/test.yaml?branch=master)](https://github.com/rdf-ext/rdf-ext/actions/workflows/test.yaml)
[![npm version](https://img.shields.io/npm/v/rdf-ext.svg)](https://www.npmjs.com/package/rdf-ext)

RDF-Ext is a JavaScript library that extends the [RDF/JS](#rdf-js) specs to handle RDF data in a developer-friendly way.

## Install

```bash
npm install --save rdf-ext
```

## Usage

Just import the default export from the package:

```javascript
import rdf from 'rdf-ext'

const term = rdf.namedNode('http://example.org/')
```

The exported object is an instance of [@rdfjs/environment](https://github.com/rdfjs-base/environment).
The following factories are included in the environment:

- [DataFactory](https://github.com/rdfjs-base/data-model)
- [DatasetFactory](https://github.com/rdfjs-base/dataset)
- [FetchFactory](https://github.com/rdfjs-base/fetch-lite)
- [FormatsFactory](https://github.com/rdfjs-base/formats-common)
- [GrapoiFactory](https://github.com/rdf-ext/grapoi)
- [NamespaceFactory](https://github.com/rdfjs-base/namespace)
- [PrefixMapFactory](https://github.com/rdfjs-base/prefix-map)
- [TermMapFactory](https://github.com/rdfjs-base/term-map/)
- [TermSetFactory](https://github.com/rdfjs-base/term-set)
- [TraverserFactory](https://github.com/rdfjs-base/traverser)

### Experimental features

The package contains experimental features which may break or be removed without being covered in the semantic versioning:

- [ScoreFactory](https://github.com/rdfjs-base/score/#factory)

## Documentation & examples

For more details, please check [rdf-ext.org](https://rdf-ext.org/)
